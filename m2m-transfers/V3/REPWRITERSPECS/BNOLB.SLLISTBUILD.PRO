[* BNOLB.SLLISTBUILD.PRO
** Copyright 2023-2024, Jack Henry & Associates
**
** Modification History:
**   Ver. 1.0.0  01/24/24 10:00 MT TKainz - Original Programming
**
** These procedures serve the purpose of creating a list of eligible
** Shares, Loans and/or External Loans based upon how the search
** parameters are set.
**
** Before calling the procedure 'BNOBUILDSHARELOANLIST', to generate
** your required Share/Loan list, 'INCLUDE' this file and the
** corresponding definitions file 'BNOLB.SLLISTBUILD.DEF' into your
** SpecFile. Additional library files which are required by this program
** and which also must be included into your SpecFile are:
** RD.GETDATA.DEF, RB.LISTEXPAND.DEF and RB.LISTEXPAND.
**
** The calling program must be sitting on the desired home account and
** the following parameter values must be set as desired before calling
** the 'BNOBUILDSHARELOANLISTINIT' procedure followed by the
** 'BNOBUILDSHARELOANLIST' procedure to generate the desired list of
** Shares/Loans. Displaying external loans is independent of this
** setting. See 'BNOINCLUDEEXTLOANS' below
**
**   BNOSLTYPE
**     Set to BNOSLTYPESHARE to target just Shares
**     Set to BNOSLTYPELOAN to target just Loans
**     Set to BNOSLTYPESHARELOAN to target both Shares and Loans
**      EG:      BNOSLTYPE=BNOSLTYPESHARELOAN
**      DEFAULT: BNOSLTYPESHARELOAN
**
**   BNOCROSSACCTACCESS
**     Set to TRUE to include cross-accounts based upon Preference
**     Access records under the home account. When including
**     cross-accounts, cross-account Shares/Loans will be targeted based
**     upon the BNOSLTYPE setting. External Loan records on cross
**     accounts are not included in the return.
**      EG:       BNOCROSSACCTACCESS=FALSE
**      DEFAULT:  FALSE
**
**   BNOSLCODE(x)
**     Set eligible Share codes (x) when looking for valid Shares.
**     Set to TRUE or FALSE for 'x' values BNOSHARECODESHARE,
**     BNOSHARECODEDRAFT, BNOSHARECODECERTIFICATE and BNOSHARECODECLUB.
**      EG:      BNOSLCODE(BNOSHARECODESHARE)=TRUE
**               BNOSLCODE(BNOSHARECODEDRAFT)=TRUE
**      DEFAULT: TRUE (for all 4 types)
**
**   BNOEXCLUDESHARETYPELIST, BNOEXCLUDELOANTYPELIST
**     Enter, in list format (i.e: 1,2,6-9,12) any Share or Loan types
**     which need to be excluded from the Share/Loan list.
**      EG:      BNOEXCLUDESHARETYPELIST="1,2,6-9,12"
**      DEFAULT: none (no Share or Loans types to be excluded).
**
**   BNOINCLUDEEXTLOANS
**     Set to TRUE to include External Loan records when BNOSLTYPE is
**     set to BNOSLTYPELOAN or BNOSLTYPESHARELOAN.
**      * External loans on cross accounts are not included.
**      * Account tracking record based external loans are not supported.
**      EG:      BNOINCLUDEEXTLOANS=TRUE
**      DEFAULT: FALSE
**
**   BNOACCESSTYPE
**     Set to BNOACCESSTYPEIQ (inquiry), BNOACCESSTYPEXFEROUT (transfer out),
**     BNOACCESSTYPEXFERIN (transfer in) or BNOACCESSTYPEWD (transfer out)
**     to indicate the type of access the targeted share or loan must have
**     based upon the service code(s).
**      EG:      BNOACCESSTYPE=BNOACCESSTYPEIQ
**      DEFAULT: BNOACCESSTYPEIQ
**
**   BNOAVAILCALCMETHOD
**     When reporting the Share available balance, set to 0 to use the
**     SHARE:AVAILABLEBALANCE or set to 1 to deduct the SHARE:LOANPAYMENTHOLD
**     value from the SHARE: AVAILABLEBALANCE
**      EG:      BNOAVAILCALCMETHOD=1
**      DEFAULT: 0
**
**   BNOINCLUDECLOSED
**     Set to TRUE to include closed Shares, Loans and External Loans.
**      EG:      TRUE
**      DEFAULT: FALSE
**
**   BNOINCLUDECHARGEDOFF
**     Set to TRUE to include charged-off Shares and Loans.
**      EG:      TRUE
**      DEFAULT: FALSE
**
********************************************************************************
** RETURNS
**  The following data is returned by these procedures: Lists (arrays) of
**  Shares, Loans and External Loans per the program parameters along with basic
**  information from the Shares and Loans. Share/Loan information is contained
**  in arrays which are indexed by the share or loan ordinal (x). There can be
**  up to 200 shares and/or loans and up to 20 External Loans indexed by this
**  program. The following values can be referenced once the call to
**  BNOBUILDSHARELOANLIST has been successfully completed. Array indexing starts
**  at 1.
**
**  Shares:
**   BNOSHARECOUNT=the number of valid shares found
**   BNOTOTALSHAREBALANCE=Total targeted Share balances
**
**   BNOSHAREACCTNUM(x)=ACCOUNT:NUMBER the share is under
**   BNOSHAREID(x)=SHARE:ID
**   BNOSHARETYPE(x)=SHARE:TYPE
**   BNOSHAREDESC(x)=SHARE:DESCRIPTION
**   BNOSHAREIQFFLAG(x)=account access IQ flag
**   BNOSHAREXFERINFLAG(x)=account access xfer in flag
**   BNOSHAREXFEROUTFLAG(x)=account access xfer out flag
**   BNOSHAREWDFLAG(x)=account access WD flag
**   BNOSHAREAVAILBAL(x)=SHARE:AVAILABLEBALANCE or
**                       SHARE:AVAILABLEBALANCE-SHARE:LOANPAYMENTHOLD
**                       depending upon BNOAVAILCALCMETHOD setting
**   BNOSHAREBALANCE(x)=SHARE:BALANCE
**   BNOSHARECODE(x)=SHARE:SHARECODE
**   BNOSHAREMATURITYDATE(x)=SHARE:MATURITYDATE
**   BNOSHARENICKNAME(x)=SHARE:NICKNAME
**   BNOSHAREXACCTPRIMARYNAME(x)=Cross account primary member's long name
**   BNOSHAREOPENDATE(x)=SHARE:OPENDATE
**   BNOSHARECLOSEDATE(x)=SHARE:CLOSEDATE
**   BNOSHARECHARGEOFFDATE(x)=SHARE:CHARGEOFFDATE
**
**  Loans:
**   BNOLOANCOUNT=the number of valid Loans found (not incl. ext. Loans)
**   BNOTOTALLOANBALANCE=total targeted Loan balances
**
**   BNOLOANIQFLAG(x)=account access IQ flag
**   BNOLOANXFERINFLAG(x)=account access xfer in flag
**   BNOLOANXFEROUTFLAG(x)=account access xfer out flag
**   BNOLOANWDFLAG(x)=account access WD flag
**   BNOLOANACCTNUM(x)=ACCOUNT:NUMBER the Loan is under
**   BNOLOANID(x)=LOAN:ID
**   BNOLOANTYPE(x)=LOAN:TYPE
**   BNOLOANDESC(x)=LOAN:DESCRIPTION
**   BNOLOANBALANCE(x)=LOAN:BALANCE
**   BNOLOANDUEDATE(x)=LOAN:DUEDATE
**   BNOLOANPAYMENT(x)=LOAN:PAYMENT
**   BNOLOANPAYMENTDUE(x)=LOAN:PAYMENTDUE
**   BNOLOANPASTDUEAMOUNT(x)=LOAN:PASTDUEAMOUNT
**   BNOLOANPMTBUCKETAMT(x)=Calculated payment based upon
**                          Loan payment bucket values
**   BNOLOANLOANCODE(x)=LOAN:LOANCODE
**   BNOLOANCREDITLIMIT(x)=LOAN:CREDITLIMIT
**   BNOLOANEFFECTIVEBAL(x)=LOAN:BALANCE
**   BNOLOANAVAILCREDIT(x)=LOAN:AVAILABLECREDIT
**   BNOLOANNICKNAME(x)=LOAN:NICKNAME
**   BNOLOANXACCTPRIMARYNAME(x)=Cross account primary member's long name
**   BNOLOANOPENDATE(x)=LOAN:OPENDATE
**   BNOLOANCLOSEDATE(x)=LOAN:CLOSEDATE
**   BNOLOANCHARGEOFFDATE(x)=LOAN:CHARGEOFFDATE
**
**  External Loans: (note: cross-account external loans are not included)
**   BNOEXTLOANCOUNT=the number of valid ext. Loans found
**   BNOTOTALEXTLOANBALANCE=Total targeted external Loan balances
**
**   BNOEXTLOANDESC(x)=EXTERNALLOAN:DESCRIPTION
**   BNOEXTLOANACCOUNTNUM(x)=EXTERNALLOAN:ACCOUNTNUMBER
**   BNOEXTLOANLOC(x)=EXTERNALLOAN:LOCATOR
**   BNOEXTLOANTYPE(x)=EXTERNALLOAN:TYPE
**   BNOEXTLOANIQFLAG(x)=account access IQ flag
**   BNOEXTLOANXFEROUTFLAG(x)=account access xfer out flag
**   BNOEXTLOANXFERINFLAG(x)=account access xfer in flag
**   BNOEXTLOANWDFLAG(x)=account access WD flag
**   BNOEXTLOANBALANCE(x)=EXTERNALLOAN:BALANCE
**   BNOEXTLOANAMOUNTDUE(x)=EXTERNALLOAN:PAYMENTDUE
**   BNOEXTLOANPIPAYMENT(x)=EXTERNALLOAN:PRINCINTPAYMENT
**   BNOEXTLOANESCPAYMENT(x)=EXTERNALLOAN:ESCROWPAYMENT
**   BNOEXTLOANIMPOUNDPAYMENT(x)=EXTERNALLOAN:IMPOUNDPAYMENT
**   BNOEXTLOANLATEFEE(x)=EXTERNALLOAN:LATECHARGEDUE
**   BNOEXTLOANDUEDATE(x)=EXTERNALLOAN:DUEDATE
**   BNOEXTLOANAVAILCREDIT(x)=EXTERNALLOAN:AVAILCREDIT
**   BNOEXTLOANCREDITLIMIT(x)=EXTERNALLOAN:CREDITLIMIT
**   BNOEXTLOANPAYMENT(x)=EXTERNALLOAN:PRINCINTPAYMENT+
**                        EXTERNALLOAN:ESCROWPAYMENT
**   BNOEXTLOANCLOSEDATE(x)=EXTERNALLOAN:CLOSEDATE
*]

PROCEDURE BNOBUILDSHARELOANLISTINIT
[* Initialize Share/Loan list build values and program
** defaults
*]
 BNOSLTYPE=BNOSLTYPESHARELOAN
 BNOCROSSACCTACCESS=BNOFALSE
 BNOSLCODE(BNOSHARECODESHARE)=BNOTRUE
 BNOSLCODE(BNOSHARECODEDRAFT)=BNOTRUE
 BNOSLCODE(BNOSHARECODECERTIFICATE)=BNOTRUE
 BNOSLCODE(BNOSHARECODECLUB)=BNOTRUE
 BNOEXCLUDESHARETYPELIST="none"
 BNOEXCLUDELOANTYPELIST="none"
 BNOINCLUDEEXTLOANS=BNOFALSE
 BNOINCLUDECLOSED=BNOFALSE
 BNOINCLUDECHARGEDOFF=BNOFALSE
 BNOACCESSTYPE=BNOACCESSTYPEIQ
 BNOAVAILCALCMETHOD=0
 BNOSERVICELISTSETFLAG=BNOFALSE
 BNOEXCLUDESHARELISTSETFLAG=BNOFALSE
 BNOEXCLUDELOANLISTSETFLAG=BNOFALSE

 BNOSHARECODECHR(BNOSHARECODESHARE)="share"
 BNOSHARECODECHR(BNOSHARECODEDRAFT)="draft"
 BNOSHARECODECHR(BNOSHARECODECERTIFICATE)="certificate"
 BNOSHARECODECHR(BNOSHARECODECLUB)="club"

 BNOLOANCODECHR(BNOLOANCODECLOSEDEND)="closed end"
 BNOLOANCODECHR(BNOLOANCODEOPENEND)="open end"
 BNOLOANCODECHR(BNOLOANCODELOC)="line of credit"
 BNOLOANCODECHR(BNOLOANCODECC)="credit card"
 BNOLOANCODECHR(BNOLOANCODELEASE)="lease"
 BNOLOANCODECHR(BNOLOANCODEAVGDAILYBALLOC)="avg daily bal loc"
 BNOLOANCODECHR(BNOLOANCODELOCCOMBO)="loc combination"

 BNOACCESSTYPECHR(BNOACCESSTYPEIQ)="Inquiry"
 BNOACCESSTYPECHR(BNOACCESSTYPEXFEROUT)="Xfer Out"
 BNOACCESSTYPECHR(BNOACCESSTYPEXFERIN)="Xfer In"
 BNOACCESSTYPECHR(BNOACCESSTYPEWD)="Withdrawal"

 BNOSLTYPECHR(BNOSLTYPESHARE)="Shares Only"
 BNOSLTYPECHR(BNOSLTYPELOAN)="Loans Only"
 BNOSLTYPECHR(BNOSLTYPESHARELOAN)="Shares and Loans"

 CALL BNOSETUSERHBENABLE                  [PREFERENCE:HBENABLE]
 BNOSYMXINSTANCE=@SYMXINSTANCEID
 BNOSYMXCLIENTNUM=@CLIENTNUMBER
 BNOINCLUDEEXTLOANS=BNOFALSE
 BNOFINDACCTNUM=""

 BNOSHARECOUNT=0
 BNOTOTALSHAREBALANCE=$0.00

 BNOLOANCOUNT=0
 BNOTOTALLOANBALANCE=$0.00

 BNOEXTLOANCOUNT=0
 BNOTOTALEXTLOANBALANCE=$0.00
 BNOINCLUDEEXTLOANS=BNOFALSE
END

PROCEDURE BNOBUILDSHARELOANLIST
[* Based upon the program settings, the program branches off to
** gather Share, Loan, and/or External Loan data.
*]
 IF BNOSLTYPE=BNOSLTYPESHARE OR BNOSLTYPE=BNOSLTYPESHARELOAN THEN
  CALL BNOBUILDSHARELIST

 IF BNOSLTYPE=BNOSLTYPELOAN OR BNOSLTYPE=BNOSLTYPESHARELOAN THEN
  DO
   CALL BNOBUILDLOANLIST
   IF BNOINCLUDEEXTLOANS=BNOTRUE THEN
    CALL BNOBUILDEXTLOANLIST
  END

 BNOSHARELOANCOUNT=BNOSHARECOUNT+BNOLOANCOUNT+BNOEXTLOANCOUNT
END

PROCEDURE BNOBUILDSHARELIST
[* Build a list of valid shares. This procedure performs preliminary checking
** to only allow Shares which are not charged-off, which are not invalid
** share types (based upon the settings) and are a valid share code.
*]
 CALL BNOSETSERVICELISTS
 CALL BNOSETEXCLUDESHARELIST
 BNOSHARECOUNT=0
 BNOTOTALSHAREBALANCE=$0.00

 FOR EACH SHARE WITH ((BNOINCLUDECLOSED=BNOTRUE OR
                      (BNOINCLUDECLOSED=BNOFALSE AND
                       SHARE:CLOSEDATE=BNODATENULL)) AND
                      (BNOINCLUDECHARGEDOFF=BNOTRUE OR
                      (BNOINCLUDECHARGEDOFF=BNOFALSE AND
                       SHARE:CHARGEOFFDATE=BNODATENULL)) AND
                       BNOSLCODE(SHARE:SHARECODE)=BNOTRUE AND
                       BNOEXCLUDESHARETYPEALLFLAG=BNOFALSE AND
                       BNOEXCLUDESHARETYPES(SHARE:TYPE)=BNOFALSE)
  DO
   BNOCROSSACCTFLAG=BNOFALSE
   BNOACCESSIQFLAG=BNOTRUE
   BNOACCESSXFEROUTFLAG=BNOTRUE
   BNOACCESSXFERINFLAG=BNOTRUE
   BNOACCESSWDFLAG=BNOTRUE
   CALL BNOADDTOSHARELIST
  END
 UNTIL BNOSHARECOUNT>=BNOSHAREARRAYMAX

 IF BNOCROSSACCTACCESS=BNOTRUE THEN
  DO
   BNOCROSSACCTSLTYPE=BNOSLTYPESHARE
   CALL BNOADDCROSSACCOUNTS
  END
END

PROCEDURE BNOADDTOSHARELIST
[* Check that target Share is valid and if so, add
** it to the array of Shares
*]
 CALL BNOCHECKUSERHBENABLE

[Check service codes]
 BNOSERVICEXFERINFLAG=BNOFALSE
 BNOSERVICEXFEROUTFLAG=BNOFALSE
 BNOSERVICEWDFLAG=BNOFALSE

 IF BNOSERVICEXFERINALLFLAG=BNOTRUE THEN
  BNOSERVICEXFERINFLAG=BNOTRUE
 IF BNOSERVICEXFEROUTALLFLAG=BNOTRUE THEN
  BNOSERVICEXFEROUTFLAG=BNOTRUE
 IF BNOSERVICEWDALLFLAG=BNOTRUE THEN
  BNOSERVICEWDFLAG=BNOTRUE

 BNOSVCCODELOOP=1
 WHILE (BNOSERVICEXFERINFLAG=BNOFALSE OR
        BNOSERVICEXFEROUTFLAG=BNOFALSE OR
        BNOSERVICEWDFLAG=BNOFALSE) AND
        BNOSVCCODELOOP<=BNOSVCCODEMAX
  DO
   IF BNOSERVICEXFERINLIST(BNOSVCCODELOOP)=BNOTRUE THEN
    DO
     IF ANYSERVICE(SHARE,BNOSVCCODELOOP) THEN
      BNOSERVICEXFERINFLAG=BNOTRUE
    END
   IF BNOSERVICEXFEROUTLIST(BNOSVCCODELOOP)=BNOTRUE THEN
    DO
     IF ANYSERVICE(SHARE,BNOSVCCODELOOP) THEN
      BNOSERVICEXFEROUTFLAG=BNOTRUE
    END
   IF BNOSERVICEWDLIST(BNOSVCCODELOOP)=BNOTRUE THEN
    DO
     IF ANYSERVICE(SHARE,BNOSVCCODELOOP) THEN
      BNOSERVICEWDFLAG=BNOTRUE
    END
   BNOSVCCODELOOP=BNOSVCCODELOOP+1
  END

 IF BNOSERVICEXFERINFLAG=BNOFALSE THEN
  BNOACCESSXFERINFLAG=BNOFALSE
 IF BNOSERVICEXFEROUTFLAG=BNOFALSE THEN
  BNOACCESSXFEROUTFLAG=BNOFALSE
 IF BNOSERVICEWDFLAG=BNOFALSE THEN
  BNOACCESSWDFLAG=BNOFALSE

 BNOACCESSFLAG=BNOFALSE
 IF BNOACCESSTYPE=BNOACCESSTYPEIQ AND
    BNOACCESSIQFLAG=BNOTRUE THEN
  BNOACCESSFLAG=BNOTRUE
 ELSE IF BNOACCESSTYPE=BNOACCESSTYPEXFERIN AND
         BNOACCESSXFERINFLAG=BNOTRUE THEN
  BNOACCESSFLAG=BNOTRUE
 ELSE IF BNOACCESSTYPE=BNOACCESSTYPEXFEROUT AND
         BNOACCESSXFEROUTFLAG=BNOTRUE THEN
  BNOACCESSFLAG=BNOTRUE
 ELSE IF BNOACCESSTYPE=BNOACCESSTYPEWD AND
         BNOACCESSWDFLAG=BNOTRUE THEN
  BNOACCESSFLAG=BNOTRUE

[*  Now remove access based on restrictions
*]
 IF SHARE:AVAILABLEBALANCE<=$0.00 AND
   (BNOACCESSTYPE=BNOACCESSTYPEXFEROUT OR
    BNOACCESSTYPE=BNOACCESSTYPEWD) THEN
  BNOACCESSFLAG=BNOFALSE

[*  This block of code just checks for duplicates since ACCESS records
**  can point to duplicate shares/loans.
*]
 IF BNOCROSSACCTFLAG=BNOFALSE THEN
  BNOSLIDFOUND=BNOFALSE
 ELSE
  DO
   BNOFINDID=SHARE:ID
   BNOFINDACCTNUM=ACCOUNT:NUMBER
   CALL BNOFINDSHAREACCT
  END

 IF BNOACCESSFLAG=BNOTRUE AND BNOSLIDFOUND=BNOFALSE THEN
  DO
   BNOSHARECOUNT=BNOSHARECOUNT+1

   BNOSHAREXACCTPRIMARYNAME(BNOSHARECOUNT)=""
   BNOSHAREAVAILBAL(BNOSHARECOUNT)=$0.00

   IF BNOCROSSACCTFLAG=BNOTRUE THEN
    BNOSHAREXACCTPRIMARYNAME(BNOSHARECOUNT)=NAME:LONGNAME
   BNOSHAREACCTNUM(BNOSHARECOUNT)=ACCOUNT:NUMBER
   BNOSHAREID(BNOSHARECOUNT)=SHARE:ID
   BNOSHARETYPE(BNOSHARECOUNT)=SHARE:TYPE
   BNOSHAREDESC(BNOSHARECOUNT)=SHARE:DESCRIPTION
   BNOSHAREIQFLAG(BNOSHARECOUNT)=BNOACCESSIQFLAG
   BNOSHAREXFERINFLAG(BNOSHARECOUNT)=BNOACCESSXFERINFLAG
   BNOSHAREXFEROUTFLAG(BNOSHARECOUNT)=BNOACCESSXFEROUTFLAG
   BNOSHAREWDFLAG(BNOSHARECOUNT)=BNOACCESSWDFLAG
   BNOSHAREAVAILBAL(BNOSHARECOUNT)=SHARE:AVAILABLEBALANCE
   IF BNOAVAILCALCMETHOD=1 THEN
    BNOSHAREAVAILBAL(BNOSHARECOUNT)=
     BNOSHAREAVAILBAL(BNOSHARECOUNT)-SHARE:LOANPAYMENTHOLD
   BNOSHARESORTORDER(BNOSHARECOUNT)=0
   BNOSHAREBALANCE(BNOSHARECOUNT)=SHARE:BALANCE
   BNOSHARECODE(BNOSHARECOUNT)=SHARE:SHARECODE
   BNOSHAREMATURITYDATE(BNOSHARECOUNT)=SHARE:MATURITYDATE
   BNOTOTALSHAREBALANCE=BNOTOTALSHAREBALANCE+SHARE:BALANCE
   BNOSHARENICKNAME(BNOSHARECOUNT)=SHARE:NICKNAME
   BNOSHAREOPENDATE(BNOSHARECOUNT)=SHARE:OPENDATE
   BNOSHARECLOSEDATE(BNOSHARECOUNT)=SHARE:CLOSEDATE
   BNOSHARECHARGEOFFDATE(BNOSHARECOUNT)=SHARE:CHARGEOFFDATE
  END
END

PROCEDURE BNOADDCROSSACCOUNTS
[* Review the current Preference Access records on the account
** to add cross account Shares and/or Loans as appropriate
*]
 FOR EACH PREFERENCE WITH (PREFERENCE:LOCATOR=@PREFLOCATOR)
  DO
   FOR EACH PREFERENCE ACCESS WITH
    ((PREFERENCE ACCESS:ACCESSTYPE=BNOACCESSRECTYPEXFEROUT OR
      PREFERENCE ACCESS:ACCESSTYPE=BNOACCESSRECTYPEALTACCT) AND
     (PREFERENCE ACCESS:IDTYPE=2 OR
    ((PREFERENCE ACCESS:IDTYPE=0 AND
      BNOCROSSACCTSLTYPE=BNOSLTYPESHARE) OR
     (PREFERENCE ACCESS:IDTYPE=1 AND
      BNOCROSSACCTSLTYPE=BNOSLTYPELOAN))))
    DO
     BNOACCESSRECIQFLAG=BNOFALSE
     BNOACCESSRECXFEROUTFLAG=BNOFALSE
     BNOACCESSRECXFERINFLAG=BNOFALSE
     BNOACCESSRECWDFLAG=BNOFALSE

     IF PREFERENCE ACCESS:ACCESSTYPE=BNOACCESSRECTYPEXFEROUT THEN
      BNOACCESSRECXFERINFLAG=BNOTRUE
     ELSE IF PREFERENCE ACCESS:ACCESSTYPE=BNOACCESSRECTYPEALTACCT THEN
      DO
       IF PREFERENCE ACCESS:ENABLEINQUIRY=BNOTRUE THEN
        BNOACCESSRECIQFLAG=BNOTRUE
       IF PREFERENCE ACCESS:ENABLEDEPOSIT=BNOTRUE THEN
        BNOACCESSRECXFERINFLAG=BNOTRUE
       IF PREFERENCE ACCESS:ENABLEWITHDRAWAL=BNOTRUE THEN
        DO
         BNOACCESSRECXFEROUTFLAG=BNOTRUE
         BNOACCESSRECWDFLAG=BNOTRUE
        END
      END

     BNOPREFACCESSIDTYPE=PREFERENCE ACCESS:IDTYPE
     BNOPREFACCESSID=PREFERENCE ACCESS:ID
     FOR ACCOUNT PREFERENCE ACCESS:ACCOUNTNUMBER
      DO
       IF BNOCROSSACCTSLTYPE=BNOSLTYPESHARE AND
         (BNOPREFACCESSIDTYPE=2 OR
          BNOPREFACCESSIDTYPE=0) THEN
        DO
         FOR EACH SHARE WITH ((BNOINCLUDECLOSED=BNOTRUE OR
                              (BNOINCLUDECLOSED=BNOFALSE AND
                               SHARE:CLOSEDATE=BNODATENULL)) AND
                              (BNOINCLUDECHARGEDOFF=BNOTRUE OR
                              (BNOINCLUDECHARGEDOFF=BNOFALSE AND
                               SHARE:CHARGEOFFDATE=BNODATENULL)) AND
                               BNOSLCODE(SHARE:SHARECODE)=BNOTRUE AND
                               BNOEXCLUDESHARETYPEALLFLAG=BNOFALSE AND
                               BNOEXCLUDESHARETYPES(SHARE:TYPE)=BNOFALSE)
          DO
           IF BNOPREFACCESSIDTYPE=2 OR
             (BNOPREFACCESSIDTYPE=0 AND BNOPREFACCESSID=SHARE:ID) THEN
            DO
             BNOCROSSACCTFLAG=BNOTRUE
             BNOACCESSIQFLAG=BNOACCESSRECIQFLAG
             BNOACCESSXFEROUTFLAG=BNOACCESSRECXFEROUTFLAG
             BNOACCESSXFERINFLAG=BNOACCESSRECXFERINFLAG
             BNOACCESSWDFLAG=BNOACCESSRECWDFLAG
             IF BNOSHARECOUNT<BNOSHAREARRAYMAX THEN
              CALL BNOADDTOSHARELIST
            END
          END
         UNTIL BNOSHARECOUNT>=BNOSHAREARRAYMAX
        END
       IF BNOCROSSACCTSLTYPE=BNOSLTYPELOAN AND
         (BNOPREFACCESSIDTYPE=2 OR
          BNOPREFACCESSIDTYPE=1) THEN
        DO
         FOR EACH LOAN WITH ((BNOINCLUDECLOSED=BNOTRUE OR
                             (BNOINCLUDECLOSED=BNOFALSE AND
                              LOAN:CLOSEDATE=BNODATENULL)) AND
                             (BNOINCLUDECHARGEDOFF=BNOTRUE OR
                             (BNOINCLUDECHARGEDOFF=BNOFALSE AND
                              LOAN:CHARGEOFFDATE=BNODATENULL)) AND
                              BNOEXCLUDELOANTYPEALLFLAG=BNOFALSE AND
                              BNOEXCLUDELOANTYPES(LOAN:TYPE)=BNOFALSE)

          DO
           IF BNOPREFACCESSIDTYPE=2 OR
             (BNOPREFACCESSIDTYPE=1 AND BNOPREFACCESSID=LOAN:ID) THEN
            DO
             BNOCROSSACCTFLAG=BNOTRUE
             BNOACCESSIQFLAG=BNOACCESSRECIQFLAG
             BNOACCESSXFEROUTFLAG=BNOACCESSRECXFEROUTFLAG
             BNOACCESSXFERINFLAG=BNOACCESSRECXFERINFLAG
             BNOACCESSWDFLAG=BNOACCESSRECWDFLAG
             IF BNOLOANCOUNT<BNOLOANARRAYMAX THEN
              CALL BNOADDTOLOANLIST
            END
          END
         UNTIL BNOLOANCOUNT>=BNOLOANARRAYMAX
        END
      END
    END
  END
END

PROCEDURE BNOFINDSHAREACCT
[* Determine if the account and Share ID are already in the array
**
** PASS    BNOFINDACCTNUM    Account trying to match
** PASS    BNOFINDID         Share ID trying to match
** RETURN  BNOSLIDFOUND      BOOLEAN - Found?
** RETURN  BNOFINDINDEX      Index of array element which matched
*]
 BNOFINDINDEX=0
 BNOSLIDFOUND=BNOFALSE
 BNOSLLOOP=1
 WHILE (BNOSLIDFOUND=BNOFALSE AND BNOSLLOOP<=BNOSHARECOUNT)
  DO
   IF BNOFINDID=BNOSHAREID(BNOSLLOOP) AND
      BNOFINDACCTNUM=BNOSHAREACCTNUM(BNOSLLOOP) THEN
    DO
     BNOSLIDFOUND=BNOTRUE
     BNOFINDINDEX=BNOSLLOOP
    END
   BNOSLLOOP=BNOSLLOOP+1
  END
END

PROCEDURE BNOBUILDLOANLIST
[* Build a list of eligible loans
*]

 CALL BNOSETSERVICELISTS
 CALL BNOSETEXCLUDELOANLIST
 BNOLOANCOUNT=0
 BNOTOTALLOANBALANCE=$0.00

 FOR EACH LOAN WITH ((BNOINCLUDECLOSED=BNOTRUE OR
                     (BNOINCLUDECLOSED=BNOFALSE AND
                      LOAN:CLOSEDATE=BNODATENULL)) AND
                     (BNOINCLUDECHARGEDOFF=BNOTRUE OR
                     (BNOINCLUDECHARGEDOFF=BNOFALSE AND
                      LOAN:CHARGEOFFDATE=BNODATENULL)) AND
                      BNOEXCLUDELOANTYPEALLFLAG=BNOFALSE AND
                      BNOEXCLUDELOANTYPES(LOAN:TYPE)=BNOFALSE)
  DO
   BNOCROSSACCTFLAG=BNOFALSE
   BNOACCESSIQFLAG=BNOTRUE
   BNOACCESSXFEROUTFLAG=BNOTRUE
   BNOACCESSXFERINFLAG=BNOTRUE
   BNOACCESSWDFLAG=BNOTRUE
   CALL BNOADDTOLOANLIST
  END
 UNTIL BNOLOANCOUNT>=BNOLOANARRAYMAX

 IF BNOCROSSACCTACCESS=BNOTRUE THEN
  DO
   BNOCROSSACCTSLTYPE=BNOSLTYPELOAN
   CALL BNOADDCROSSACCOUNTS
  END
END

PROCEDURE BNOADDTOLOANLIST
[* Check the current loan targeted for eligibility and
** if eligible, then add to the array.
*]
 CALL BNOCHECKUSERHBENABLE

[Check service codes]
 BNOSERVICEXFERINFLAG=BNOFALSE
 BNOSERVICEXFEROUTFLAG=BNOFALSE
 BNOSERVICEWDFLAG=BNOFALSE
 IF BNOSERVICEXFERINALLFLAG=BNOTRUE THEN
  BNOSERVICEXFERINFLAG=BNOTRUE
 IF BNOSERVICEXFEROUTALLFLAG=BNOTRUE THEN
  BNOSERVICEXFEROUTFLAG=BNOTRUE
 IF BNOSERVICEWDALLFLAG=BNOTRUE THEN
  BNOSERVICEWDFLAG=BNOTRUE

 BNOSVCCODELOOP=1
 WHILE (BNOSERVICEXFERINFLAG=BNOFALSE OR
        BNOSERVICEXFEROUTFLAG=BNOFALSE OR
        BNOSERVICEWDFLAG=BNOFALSE) AND
        BNOSVCCODELOOP<=BNOSVCCODEMAX
  DO
   IF BNOSERVICEXFERINLIST(BNOSVCCODELOOP)=BNOTRUE THEN
    DO
     IF ANYSERVICE(LOAN,BNOSVCCODELOOP) THEN
      BNOSERVICEXFERINFLAG=BNOTRUE
    END
   IF BNOSERVICEXFEROUTLIST(BNOSVCCODELOOP)=BNOTRUE THEN
    DO
     IF ANYSERVICE(LOAN,BNOSVCCODELOOP) THEN
      BNOSERVICEXFEROUTFLAG=BNOTRUE
    END
   IF BNOSERVICEWDLIST(BNOSVCCODELOOP)=BNOTRUE THEN
    DO
     IF ANYSERVICE(LOAN,BNOSVCCODELOOP) THEN
      BNOSERVICEWDFLAG=BNOTRUE
    END
   BNOSVCCODELOOP=BNOSVCCODELOOP+1
  END

 IF BNOSERVICEXFERINFLAG=BNOFALSE THEN
  BNOACCESSXFERINFLAG=BNOFALSE
 IF BNOSERVICEXFEROUTFLAG=BNOFALSE THEN
  BNOACCESSXFEROUTFLAG=BNOFALSE
 IF BNOSERVICEWDFLAG=BNOFALSE THEN
  BNOACCESSWDFLAG=BNOFALSE

 BNOACCESSFLAG=BNOFALSE
 IF BNOACCESSTYPE=BNOACCESSTYPEIQ AND
    BNOACCESSIQFLAG=BNOTRUE THEN
  BNOACCESSFLAG=BNOTRUE
 ELSE IF BNOACCESSTYPE=BNOACCESSTYPEXFERIN AND
         BNOACCESSXFERINFLAG=BNOTRUE THEN
  BNOACCESSFLAG=BNOTRUE
 ELSE IF BNOACCESSTYPE=BNOACCESSTYPEXFEROUT AND
         BNOACCESSXFEROUTFLAG=BNOTRUE THEN
  BNOACCESSFLAG=BNOTRUE
 ELSE IF BNOACCESSTYPE=BNOACCESSTYPEWD AND
         BNOACCESSWDFLAG=BNOTRUE THEN
  BNOACCESSFLAG=BNOTRUE

[*  Now remove access based on restrictions
*]
 IF LOAN:AVAILABLECREDIT<=$0.00 AND
   (BNOACCESSTYPE=BNOACCESSTYPEXFEROUT OR
    BNOACCESSTYPE=BNOACCESSTYPEWD) THEN
  BNOACCESSFLAG=BNOFALSE

[*  This block of code just checks for duplicates since ACCESS records
**  can point to duplicate shares/loans.
*]
 IF BNOCROSSACCTFLAG=BNOFALSE THEN
  BNOSLIDFOUND=BNOFALSE
 ELSE
  DO
   BNOFINDID=LOAN:ID
   BNOFINDACCTNUM=ACCOUNT:NUMBER
   CALL BNOFINDLOANACCT
  END

 IF BNOACCESSFLAG=BNOTRUE AND BNOSLIDFOUND=BNOFALSE THEN
  DO
   BNOLOANCOUNT=BNOLOANCOUNT+1

   BNOLOANXACCTPRIMARYNAME(BNOLOANCOUNT)=""
   BNOLOANEFFECTIVEBAL(BNOLOANCOUNT)=$0.00

   IF BNOCROSSACCTFLAG=BNOTRUE THEN
    BNOLOANXACCTPRIMARYNAME(BNOLOANCOUNT)=NAME:LONGNAME
   BNOTOTALLOANBALANCE=BNOTOTALLOANBALANCE+LOAN:BALANCE
   BNOLOANIQFLAG(BNOLOANCOUNT)=BNOACCESSIQFLAG
   BNOLOANXFERINFLAG(BNOLOANCOUNT)=BNOACCESSXFERINFLAG
   BNOLOANXFEROUTFLAG(BNOLOANCOUNT)=BNOACCESSXFEROUTFLAG
   BNOLOANWDFLAG(BNOLOANCOUNT)=BNOACCESSWDFLAG
   BNOLOANACCTNUM(BNOLOANCOUNT)=ACCOUNT:NUMBER
   BNOLOANID(BNOLOANCOUNT)=LOAN:ID
   BNOLOANTYPE(BNOLOANCOUNT)=LOAN:TYPE
   BNOLOANDESC(BNOLOANCOUNT)=LOAN:DESCRIPTION
   BNOLOANBALANCE(BNOLOANCOUNT)=LOAN:BALANCE
   BNOLOANDUEDATE(BNOLOANCOUNT)=LOAN:DUEDATE
   BNOLOANPAYMENT(BNOLOANCOUNT)=LOAN:PAYMENT
   BNOLOANPAYMENTDUE(BNOLOANCOUNT)=LOAN:PAYMENTDUE
   BNOLOANPASTDUEAMOUNT(BNOLOANCOUNT)=LOAN:PASTDUEAMOUNT
   CALL BNOFINDLOANPMTBUCKETAMT
   BNOLOANPMTBUCKETAMT(BNOLOANCOUNT)=BNOPMTBUCKETAMT
   BNOLOANLOANCODE(BNOLOANCOUNT)=LOAN:LOANCODE
   BNOLOANCREDITLIMIT(BNOLOANCOUNT)=LOAN:CREDITLIMIT
   BNOLOANEFFECTIVEBAL(BNOLOANCOUNT)=LOAN:BALANCE
   IF LOAN:INTERESTTYPE>9 AND LOAN:CLOSEDATE=BNODATENULL THEN
    BNOLOANEFFECTIVEBAL(BNOLOANCOUNT)=BNOLOANEFFECTIVEBAL(BNOLOANCOUNT)+
     LOAN:INTERESTDUE+LOAN:LATECHARGEDUE
   BNOLOANAVAILCREDIT(BNOLOANCOUNT)=LOAN:AVAILABLECREDIT
   BNOLOANNICKNAME(BNOLOANCOUNT)=LOAN:NICKNAME
   BNOLOANOPENDATE(BNOLOANCOUNT)=LOAN:OPENDATE
   BNOLOANCLOSEDATE(BNOLOANCOUNT)=LOAN:CLOSEDATE
   BNOLOANCHARGEOFFDATE(BNOLOANCOUNT)=LOAN:CHARGEOFFDATE
  END
END

PROCEDURE BNOFINDLOANACCT
[* Check if the current loan being evaluated is already in the
** list of eligible loans. If not, then add it.
**
** PASS    BNOFINDACCTNUM    Account trying to match
** PASS    BNOFINDID         Loan ID trying to match
** RETURN  BNOSLIDFOUND      BOOLEAN - Found?
** RETURN  BNOFINDINDEX      Index of array element which matched
*]
 BNOFINDINDEX=0
 BNOSLIDFOUND=BNOFALSE
 BNOSLLOOP=1
 WHILE (BNOSLIDFOUND=BNOFALSE AND BNOSLLOOP<=BNOLOANCOUNT)
  DO
   IF BNOFINDID=BNOLOANID(BNOSLLOOP) AND
      BNOFINDACCTNUM=BNOLOANACCTNUM(BNOSLLOOP)THEN
    DO
     BNOSLIDFOUND=BNOTRUE
     BNOFINDINDEX=BNOSLLOOP
    END
   BNOSLLOOP=BNOSLLOOP+1
  END
END

PROCEDURE BNOBUILDEXTLOANLIST
[* Validate certain aspects of the current External Loan record and if the
** External Loan record remains eligible, add it to the array
*]
 BNOEXTLOANCOUNT=0
 BNOTOTALEXTLOANBALANCE=$0.00
 FOR EACH EXTERNALLOAN
  DO
   BNOACCESSFLAG=BNOTRUE

   IF EXTERNALLOAN:STATUS=1 OR
     (BNOINCLUDECLOSED=BNOFALSE AND
      EXTERNALLOAN:CLOSEDATE<>BNODATENULL) THEN
    BNOACCESSFLAG=BNOFALSE

   IF BNOACCESSFLAG=BNOTRUE THEN
    DO
     BNOEXTLOANCOUNT=BNOEXTLOANCOUNT+1

     BNOEXTLOANDESC(BNOEXTLOANCOUNT)=EXTERNALLOAN:DESCRIPTION
     BNOEXTLOANACCOUNTNUM(BNOEXTLOANCOUNT)=EXTERNALLOAN:ACCOUNTNUMBER
     BNOEXTLOANLOC(BNOEXTLOANCOUNT)=EXTERNALLOAN:LOCATOR
     BNOEXTLOANTYPE(BNOEXTLOANCOUNT)=EXTERNALLOAN:TYPE
     BNOEXTLOANIQFLAG(BNOEXTLOANCOUNT)=BNOTRUE
     BNOEXTLOANXFEROUTFLAG(BNOEXTLOANCOUNT)=BNOTRUE
     BNOEXTLOANXFERINFLAG(BNOEXTLOANCOUNT)=BNOFALSE
     BNOEXTLOANWDFLAG(BNOEXTLOANCOUNT)=BNOFALSE
     BNOEXTLOANBALANCE(BNOEXTLOANCOUNT)=EXTERNALLOAN:BALANCE
     BNOEXTLOANAMOUNTDUE(BNOEXTLOANCOUNT)=EXTERNALLOAN:PAYMENTDUE
     BNOEXTLOANPIPAYMENT(BNOEXTLOANCOUNT)=EXTERNALLOAN:PRINCINTPAYMENT
     BNOEXTLOANESCPAYMENT(BNOEXTLOANCOUNT)=EXTERNALLOAN:ESCROWPAYMENT
     BNOEXTLOANIMPOUNDPAYMENT(BNOEXTLOANCOUNT)=EXTERNALLOAN:IMPOUNDPAYMENT
     BNOEXTLOANLATEFEE(BNOEXTLOANCOUNT)=EXTERNALLOAN:LATECHARGEDUE
     BNOEXTLOANDUEDATE(BNOEXTLOANCOUNT)=EXTERNALLOAN:DUEDATE
     BNOEXTLOANAVAILCREDIT(BNOEXTLOANCOUNT)=EXTERNALLOAN:AVAILCREDIT
     BNOEXTLOANCREDITLIMIT(BNOEXTLOANCOUNT)=EXTERNALLOAN:CREDITLIMIT
     BNOEXTLOANPAYMENT(BNOEXTLOANCOUNT)=EXTERNALLOAN:PRINCINTPAYMENT+
      EXTERNALLOAN:ESCROWPAYMENT
     BNOEXTLOANCLOSEDATE(BNOEXTLOANCOUNT)=EXTERNALLOAN:CLOSEDATE

     BNOTOTALEXTLOANBALANCE=BNOTOTALEXTLOANBALANCE+
                            BNOEXTLOANBALANCE(BNOEXTLOANCOUNT)
    END
  END
 UNTIL BNOEXTLOANCOUNT>=BNOEXTLOANARRAYMAX
END

PROCEDURE BNOFINDLOANPMTBUCKETAMT
[* BNOLOANPAYMENT value from the pre-built loan information array may not
** be accurate when loan is delinquent. Some clients may choose not to
** display BNOLOANPAYMENTDUE as includes payment + any delinquent amount.
** Provide another option to display next Payment based on PMTBUCKETS.
** Clients now have an option to choose from BNOLOANPAYMENT,
** BNOLOANPAYMENTDUE or BNOLOANPMTBUCKETAMT to display in Payment column.
** Default remains BNOLOANPAYMENT.
]
 BNOPMTBUCKETAMT=$0.00
 IF LOAN:DUEDATE>=LOAN:PMTBUCKETDUEDATE:1 OR
    LOAN:PMTBUCKETDUEDATE:1='--/--/--' THEN
  BNOPMTBUCKETAMT=LOAN:PAYMENT
 ELSE
  DO
   BNOLOCALLOOP=1
   BNOFOUND=BNOFALSE
   WHILE BNOFOUND=BNOFALSE AND BNOLOCALLOOP<=7
    DO
     IF LOAN:DUEDATE>=LOAN:PMTBUCKETDUEDATE:(BNOLOCALLOOP) AND
        LOAN:PMTBUCKETDUEDATE:(BNOLOCALLOOP)<>'--/--/--' THEN
      DO
       BNOPMTBUCKETAMT=LOAN:PMTBUCKETAMOUNT:(BNOLOCALLOOP)
       BNOFOUND=BNOTRUE
      END
     BNOLOCALLOOP=BNOLOCALLOOP+1
    END
  END
END

PROCEDURE BNOSETSERVICELISTS
[* Create boolean arrays of service codes for xfer in, xfer out & WD
** Service code values are pulled from system parameters
**  RETURN  BNOSERVICEXFERINLIST(a)  Boolean array of xfer in svc codes
**  RETURN  BNOSERVICEXFEROUTLIST(a)  Boolean array of xfer out svc codes
**  RETURN  BNOSERVICEWDLIST(a)  Boolean array of svc codes for WD
*]

 IF BNOSERVICELISTSETFLAG=BNOFALSE THEN
  DO
   LELISTINPUT=GETDATACHARACTER(GETPARAMSYMXCHCLSERVICESXIN,BNOSYMXINSTANCE,BNOSYMXCLIENTNUM)
   CALL LISTEXPAND
   BNOSERVICEXFERINALLFLAG=LEALLFLAG
   FOR BNOSVCCODELOOP=0 TO BNOSVCCODEMAX
    DO
     BNOSERVICEXFERINLIST(BNOSVCCODELOOP)=LELIST(BNOSVCCODELOOP)
    END

   LELISTINPUT=GETDATACHARACTER(GETPARAMSYMXCHCLSERVICESXOUT,BNOSYMXINSTANCE,BNOSYMXCLIENTNUM)
   CALL LISTEXPAND
   BNOSERVICEXFEROUTALLFLAG=LEALLFLAG
   FOR BNOSVCCODELOOP=0 TO BNOSVCCODEMAX
    DO
     BNOSERVICEXFEROUTLIST(BNOSVCCODELOOP)=LELIST(BNOSVCCODELOOP)
    END

   LELISTINPUT=GETDATACHARACTER(GETPARAMSYMXCHCLSERVICESWD,BNOSYMXINSTANCE,BNOSYMXCLIENTNUM)
   CALL LISTEXPAND
   BNOSERVICEWDALLFLAG=LEALLFLAG
   FOR BNOSVCCODELOOP=0 TO BNOSVCCODEMAX
    DO
     BNOSERVICEWDLIST(BNOSVCCODELOOP)=LELIST(BNOSVCCODELOOP)
    END
   BNOSERVICELISTSETFLAG=BNOTRUE
  END
END

PROCEDURE BNOSETEXCLUDESHARELIST
[* Build a list of invalid Share types
** PASS    BNOINFOEXCLUDESHARETYPELIST  List of invalid Share types in list format
** RETURN  BNOEXCLUDESHARETYPES(a) Boolean array of invalid share types
** RETURN  BNOEXCLUDESHARETYPEALLFLAG Boolean - Exclude all share types?
*]
 IF BNOEXCLUDESHARELISTSETFLAG=BNOFALSE THEN
  DO
   LELISTINPUT=BNOEXCLUDESHARETYPELIST
   CALL LISTEXPAND
   BNOEXCLUDESHARETYPEALLFLAG=LEALLFLAG
   FOR BNOSLLOOP=0 TO BNOSLTYPEMAX
    DO
     BNOEXCLUDESHARETYPES(BNOSLLOOP)=LELIST(BNOSLLOOP)
    END
   BNOEXCLUDESHARELISTSETFLAG=BNOTRUE
  END
END

PROCEDURE BNOSETEXCLUDELOANLIST
[* Build a list of invalid Loan types
** PASS    BNOINFOEXCLUDELOANTYPELIST  List of invalid loan types in list format
** RETURN  BNOEXCLUDELOANTYPES(a) Boolean array of invalid loan types
** RETURN  BNOEXCLUDELOANTYPEALLFLAG Boolean - Exclude all loan types?
*]
 IF BNOEXCLUDELOANLISTSETFLAG=BNOFALSE THEN
  DO
   LELISTINPUT=BNOEXCLUDELOANTYPELIST
   CALL LISTEXPAND
   BNOEXCLUDELOANTYPEALLFLAG=LEALLFLAG
   FOR BNOSLLOOP=0 TO BNOSLTYPEMAX
    DO
     BNOEXCLUDELOANTYPES(BNOSLLOOP)=LELIST(BNOSLLOOP)
    END
   BNOEXCLUDELOANLISTSETFLAG=BNOTRUE
  END
END

PROCEDURE BNOSETUSERHBENABLE
[* Get the level of user access from the current
** Preference Record accessed
** RETURN  BNOUSERHBENABLE Preference HB Enable state
*]
 BNOUSERHBENABLE=BNOHBENABLEIQ [0 = IQ only (default)]
 FOR EACH PREFERENCE WITH (PREFERENCE:LOCATOR=@PREFLOCATOR)
  DO
   BNOUSERHBENABLE=PREFERENCE:HBENABLE
  END
END

PROCEDURE BNOCHECKUSERHBENABLE
[* Set the Preference access flags accordingly based upon the
** current HB Enable setting. HB Enable WD & Transfers is assumed
** and all flags defaulted to TRUE unless otherwise restricted
*]
 IF BNOUSERHBENABLE=BNOHBENABLEIQ THEN
  DO
   BNOACCESSXFEROUTFLAG=BNOFALSE
   BNOACCESSXFERINFLAG=BNOFALSE
   BNOACCESSWDFLAG=BNOFALSE
  END
 ELSE IF BNOUSERHBENABLE=BNOHBENABLEXF THEN
  BNOACCESSWDFLAG=BNOFALSE
END

