[*
**  PowerOn Name:       BANNO.CDRENEW.V1.POW
**  Letterfile Name:    BANNO.CDRENEW.V1.CFG
**
**  Copyright 2020 Jack Henry and Associates
**
**  This Banno service PowerOn allows the user to update their
**  Certificate maturity action.
**
**  Persistant Variable Use:
**    @RGUSERCHR1 All States: Target account and share ID**
**    @RGUSERCHR2 PROCESSDATA State: Transfer account and share/Loan ID
**    @RGUSERCHR3 PROCESSDATA State: Transfer Amount
**    @RGUSERCHR4 Store account number from @RGUSERCHR1 PRELOADDATA State
**    @RGUSERCHR5 Store share ID from @RGUSERCHR1 PRELOADDATA State
**
**    @RGUSERNUM1 PROCESSDATA State: Member option selected
**    @RGUSERNUM2
**    @RGUSERNUM3
**    @RGUSERNUM4
**    @RGUSERNUM5
**
** STATE             OVERVIEW
** ----------------  -----------------------------------------------------------
** GETPRELOADDATA    Provide UX with the following data.
**                    Current cert maturity settings
**                    List of CU approved options for the member to select from
**                    CU custom messages, TOCs to display to the member
**                    List of shares available for transfer into or out of
**
**
** PROCESSDATA       Receive user input, update share record as necessary
**                   Create / update ancillary records (i.e.: share transfers)
**                   Returnsuccessful completion or not
**
** ErrorCode | loggingErrorMessage
** ----------|-----------------------------------------------------------------
** 500       | Generic Error
** 501       | Configuration file error (error opening, reading or processing)
** 502       | Invalid account or share (based on account type/share warning)
** 503       | Maturity selection previously made - contact CU
** 504       | Processing Error
** 505       | Cross account access attempt
**
**  For more information check
**  https://github.com/Banno/banno-powerons
**
**  Banno is not responsible for any modifications to this file
**  made by unauthorized personnel.
**
**  Modification History:
**    Ver. 1.0.0  12/11/20 T. Kainz - Original Programming
**
**  DO NOT MODIFY THIS FILE UNLESS YOU KNOW WHAT YOU'RE DOING!
*]

SYMCONNECT
STATELESS

TARGET=ACCOUNT

DEFINE
 #INCLUDE "RD.GETDATA.DEF"
 #INCLUDE "RB.LISTEXPAND.DEF"

 TRUE                      = 1
 FALSE                     = 0

 CONFIGFILENAME            = "BANNO.CDRENEW.V1.CFG"
 STATEPRELOADDATA          = "PRELOADDATA"
 STATEPROCESSDATA          = "PROCESSDATA"
 STATEEND                  = "STATEEND"
 DATENULL                  = '--/--/--'

 DEBUGMODE                 = NUMBER
 LFNUMBER                  = NUMBER
 LFERROR                   = CHARACTER
 LFLINE                    = CHARACTER
 READCONFIGERROR           = NUMBER
 READCONFIGERRORMSG        = CHARACTER
 PARAMCHR                  = CHARACTER

 PARAMUSEROPTIONS          = CHARACTER
 PARAMINELIGIBLEACCTS      = CHARACTER
 PARAMWARNINGSACCT         = CHARACTER
 PARAMWARNINGSSHARE        = CHARACTER
 PARAMLIMITCHANGES         = NUMBER
 PARAMDELETEXFERS          = NUMBER
 PARAMXFERTOSHARES         = CHARACTER
 PARAMXFERFROMSHARES       = CHARACTER

 PARAMPAYEETERMS           = CHARACTER ARRAY(9)
 PARAMPAYEETERMLINES       = NUMBER
 PARAMPAYEETERMLINESMAX    = 9

 PARAMSUSPENDMSG           = CHARACTER ARRAY(9)
 PARAMSUSPENDMSGLINES      = NUMBER
 PARAMSUSPENDMSGLINESMAX   = 9

 PARAMREVIEWMSG            = CHARACTER ARRAY(9)
 PARAMREVIEWMSGLINES       = NUMBER
 PARAMREVIEWMSGLINESMAX    = 9

 PARAMLOCFOUND             = NUMBER

 PARAMNAME                 = CHARACTER
 PARAMVALUE                = CHARACTER
 PARAMVALIDATIONERROR      = NUMBER
 PARAMVALIDATIONERRORCHR   = CHARACTER
 INVALIDACCTYPES           = NUMBER ARRAY(9999)
 WARNINGSACCT              = NUMBER ARRAY(999)
 WARNINGSSHARE             = NUMBER ARRAY(999)
 VALIDXFERTOSHARETYPES     = NUMBER ARRAY(9999)
 VALIDXFERFROMSHARETYPES   = NUMBER ARRAY(9999)


 ACCTFOUND                 = NUMBER
 ACCTWARNINGFOUND          = NUMBER
 INVALIDACCTTYPEFOUND      = NUMBER
 TMPLOOP                   = NUMBER
 TMPCHR                    = CHARACTER
 POS                       = NUMBER
 POS1                      = NUMBER
 Q                         = CHARACTER
 MEMBERNUM                 = CHARACTER
 SLTYPE                    = CHARACTER
 SLID                      = CHARACTER
 SLDESCRIPTION             = CHARACTER
 VALIDACCT                 = NUMBER
 FOUND                     = NUMBER
 TMPINDEX                  = NUMBER
 TRANERROR                 = CHARACTER
 ERRORCODE                 = NUMBER
 ERRORMSG                  = CHARACTER
 ERRORDETAIL               = CHARACTER ARRAY(99)
 ERRORDETAILOFFSET         = NUMBER
 IDLENGTH                  = NUMBER
 MAXWARNINGTYPES           = NUMBER
 MAXACCTYPES               = NUMBER

 TMPTEXT                   = CHARACTER
 TMPTEXTLOOP               = NUMBER
 CHR                       = NUMBER
 SYSTEMMEMOMODE            = NUMBER
 COMMAPOS                  = NUMBER
 SLIDLEN                   = NUMBER
 FMERROR                   = CHARACTER
 NEWSTATUS                 = NUMBER
 FMTRACKINGLOCATOR         = NUMBER
 TEMPLOC                   = NUMBER
 INVALIDCONFIGPARAMS       = NUMBER
 TMPNUM                    = NUMBER
 BOOLEANCHR                = CHARACTER ARRAY(1)
 CHRVAL                    = NUMBER
 FMRESULTSCHR              = CHARACTER ARRAY(3)
 VALIDCHRINPUT1            = CHARACTER
 VALIDCHARS                = NUMBER ARRAY(999)
 MAXCHRVALUE               = 255
 WARNINGFOUND              = NUMBER
 FMUPDATEERRORTRACKING     = NUMBER
 VALIDBLOCKRULES           = NUMBER ARRAY(9999)
 VALIDPARAMS               = NUMBER
 VALIDACCOUNT              = NUMBER

 INDENTMAX                 = 9
 INDENT                    = CHARACTER ARRAY(9)
 TERMSLOOP                 = NUMBER
 PROCESSINGLOOP            = NUMBER
 TRACKINGLOOP              = NUMBER
 UNBLOCKCOUNT              = NUMBER
 DONE                      = NUMBER

 TMPCODE                   = NUMBER
 TMPDATE                   = DATE

 UPDATEDDISPLAY            = NUMBER
 DISPLAYCHANGES            = 0
 DISPLAYALL                = 1
 TCFOUND                   = NUMBER

 USEROPTIONSCHR            = CHARACTER ARRAY(9)
 USEROPTIONSAVAILABLE      = NUMBER ARRAY(9)
 USEROPTIONSMAX            = 6
 USEROPTIONSMAXUSED        = NUMBER
 OPTIONFOUND               = NUMBER
 TERMFREQCHR               = CHARACTER ARRAY(1)
 MATURITYPOSTCODECHR       = CHARACTER(7)

 TRANSFERLISTCHR           = CHARACTER ARRAY(99)
 TRANSFERLISTAMTCHR        = CHARACTER ARRAY(99)
 TRANSFERLISTPERCENTCHR    = CHARACTER ARRAY(99)
 TRANSFERLISTNAME          = CHARACTER ARRAY(99)
 TRANSFERLISTCOUNT         = NUMBER
 TRANSFERLISTMAX           = 99
 TARGETACCOUNT             = CHARACTER
 TARGETSHAREID             = CHARACTER
 TARGETMATURITYDATE        = DATE
 SNAME                     = CHARACTER
 SMATURITYDATE             = DATE
 SMINIMUMBALANCE           = MONEY
 SCURRENTSTATUS            = CHARACTER
 SCURRENTTERM              = CHARACTER

 SLTRANSFERLISTTOACCT      = CHARACTER ARRAY(99)
 SLTRANSFERLISTTONAME      = CHARACTER ARRAY(99)
 SLTRANSFERLISTTOAVAILBAL  = MONEY ARRAY(99)
 SLTRANSFERLISTTOCOUNT     = NUMBER
 SLTRANSFERLISTTOMAX       = 99

 SLTRANSFERLISTFROMACCT    = CHARACTER ARRAY(99)
 SLTRANSFERLISTFROMNAME    = CHARACTER ARRAY(99)
 SLTRANSFERLISTFROMAVAILBAL= MONEY ARRAY(99)
 SLTRANSFERLISTFROMCOUNT   = NUMBER
 SLTRANSFERLISTFROMMAX     = 99

 USEROPTIONINCREASE        = 1
 USEROPTIONCHANGE          = 2
 USEROPTIONTRANSFER        = 3
 USEROPTIONRENEW           = 4
 USEROPTIONDISBURSE        = 5
 USEROPTIONSUSPEND         = 6

 ACTIONTYPE                = NUMBER

 TRANSFERACCOUNT           = CHARACTER
 TRANSFERSLTYPE            = CHARACTER
 TRANSFERSLID              = CHARACTER
 TRANSFERAMOUNT            = MONEY
 THISACCOUNT               = CHARACTER
 NEWSLTRANSFERLOC          = NUMBER

 SMATURITYPOSTCODE         = NUMBER
 SMATURITYPOSTCODERENEW    = 0
 SMATURITYPOSTCODEDISBURSE = 1
 SMATURITYPOSTCODETRANSFER = 2
 SMATURITYPOSTCODESUSPEND  = 3

 STRANSFERCOUNT            = NUMBER
 SXFEREFFECTIVEDATE        = DATE ARRAY(99)
 SXFEREXPIREDATE           = DATE ARRAY(99)
 SXFERLOC                  = NUMBER ARRAY(99)
 SHARENOTEFOUND            = NUMBER
 NOTEFMERROR               = CHARACTER
 TMPXFERACCT               = CHARACTER
 TMPXFERSLTYPE             = NUMBER
 TMPXFERSLID               = CHARACTER
 SERVICECODESIN            = NUMBER ARRAY(99)
 SERVICECODESOUT           = NUMBER ARRAY(99)
 SERVICECODEMAX            = 99
 SYMXINSTANCE              = NUMBER
 SYMXCLIENTNUM             = NUMBER
 ALLOWINMEMOMODE           = NUMBER
 PROGRAMVERSION            = CHARACTER
END [DEFINE]

SETUP
 PROGRAMVERSION            = ""
 THISACCOUNT               = ACCOUNT:NUMBER
 Q                         = CTRLCHR(34)
 IDLENGTH                  = GETDATANUMBER(GETPARAMIDLENGTH)
 MAXWARNINGTYPES           = 999
 MAXACCTYPES               = 9999
 BOOLEANCHR(FALSE)         = "false"
 BOOLEANCHR(TRUE)          = "true"
 TERMFREQCHR(0)            = "Months"
 TERMFREQCHR(1)            = "Days"
 VALIDCHRINPUT1            = "32-126,128-175,181-184,189,190,198,199,208-216,221,222,224-253"
 USEROPTIONSCHR(1)         = "Increase certificate balance"
 USEROPTIONSCHR(2)         = "Change certificate term"
 USEROPTIONSCHR(3)         = "Transfer certificate balance"
 USEROPTIONSCHR(4)         = "Renew certificate"
 USEROPTIONSCHR(5)         = "Disburse funds by check"
 USEROPTIONSCHR(6)         = "Suspend certificate"
 DEBUGMODE                 = FALSE
 SYMXINSTANCE              = @SYMXINSTANCEID
 SYMXCLIENTNUM             = @CLIENTNUMBER

 FOR TMPLOOP=1 TO INDENTMAX
  DO
   INDENT(TMPLOOP)=REPEATCHR(" ",TMPLOOP*2)
  END
END [SETUP]

PRINT TITLE="BANNO.CDRENEW.V1.POW"

 CALL INITIALIZATIONS
 CALL READCONFIGFILESETTINGS
 IF ALLOWINMEMOMODE=FALSE THEN
  CALL VALIDATESYSMEMOMODE

 IF ERRORCODE=0 AND
    SYSTEMMEMOMODE=FALSE THEN
  DO
   CALL VALIDATEPARAMS
   CALL GETRGVALUES

   IF ERRORCODE=0 THEN
    CALL VALIDATEACCOUNT

   IF ERRORCODE=0 THEN
    DO
     IF @RGSTATE=STATEPRELOADDATA THEN
      DO
       CALL GETSHAREDETAILS
       CALL BUILDSHARETRANSFERTOLIST
       CALL BUILDSHARETRANSFERFROMLIST
       CALL RETURNJSON1
      END
     ELSE IF @RGSTATE=STATEPROCESSDATA THEN
      DO
       CALL GETSHAREDETAILS

       IF ACTIONTYPE=USEROPTIONINCREASE THEN
        SMATURITYPOSTCODE=SMATURITYPOSTCODERENEW

       ELSE IF ACTIONTYPE=USEROPTIONTRANSFER THEN
        SMATURITYPOSTCODE=SMATURITYPOSTCODETRANSFER

       ELSE IF ACTIONTYPE=USEROPTIONRENEW THEN
        SMATURITYPOSTCODE=SMATURITYPOSTCODERENEW

       ELSE IF ACTIONTYPE=USEROPTIONDISBURSE THEN
        SMATURITYPOSTCODE=SMATURITYPOSTCODEDISBURSE

       ELSE IF ACTIONTYPE=USEROPTIONSUSPEND THEN
        SMATURITYPOSTCODE=SMATURITYPOSTCODESUSPEND

       IF ACTIONTYPE=USEROPTIONINCREASE THEN
        DO
         IF ERRORCODE=0 THEN
          CALL EXPIREORDELETEXFERS
         IF ERRORCODE=0 THEN
          CALL CREATETRANSFERIN
         IF ERRORCODE=0 THEN
          CALL UPDATECERTFM
         IF ERRORCODE=0 THEN
          CALL RETURNJSON2
        END
       ELSE IF ACTIONTYPE=USEROPTIONTRANSFER THEN
        DO
         IF ERRORCODE=0 THEN
          CALL EXPIREORDELETEXFERS
         IF ERRORCODE=0 THEN
          CALL CREATETRANSFEROUT
         IF ERRORCODE=0 THEN
          CALL UPDATECERTFM
         IF ERRORCODE=0 THEN
          CALL RETURNJSON2
        END
       ELSE IF ACTIONTYPE=USEROPTIONRENEW THEN
        DO
         IF ERRORCODE=0 THEN
          CALL EXPIREORDELETEXFERS
         IF ERRORCODE=0 THEN
          CALL UPDATECERTFM
         IF ERRORCODE=0 THEN
          CALL RETURNJSON2
        END
       ELSE IF ACTIONTYPE=USEROPTIONDISBURSE THEN
        DO
         IF ERRORCODE=0 THEN
          CALL EXPIREORDELETEXFERS
         IF ERRORCODE=0 THEN
          CALL UPDATECERTFM
         IF ERRORCODE=0 THEN
          CALL RETURNJSON2
        END

       ELSE  [USEROPTIONSUSPEND]
        DO
         IF ERRORCODE=0 THEN
          CALL EXPIREORDELETEXFERS
         IF ERRORCODE=0 THEN
          CALL UPDATECERTFM
         IF ERRORCODE=0 THEN
          CALL RETURNJSON2
        END
      END [ELSE IF @RGSTATE=STATEPROCESSDATA]
    END
  END
 IF ERRORCODE>0 THEN
  DO
   CALL JSONOPEN
   CALL ERRORHANDLER
   CALL JSONCLOSE
   @RGSTATE=STATEEND
  END
END [PRINT]

PROCEDURE GETSHAREDETAILS

IF DEBUGMODE=TRUE THEN
 DO
  PRINT "IN GETSHAREDETAILS:"+
        "TARGETACCOUNT="+TARGETACCOUNT+
        "  TARGETSHAREID="+TARGETSHAREID
  NEWLINE
 END

 FOR ACCOUNT TARGETACCOUNT
  DO
   FOR EACH SHARE WITH (SHARE:ID=TARGETSHAREID)
    DO
     SNAME=SHARE:NICKNAME
     IF SNAME="" THEN
      SNAME=SHARE:DESCRIPTION
     SMATURITYDATE=SHARE:MATURITYDATE
     SMINIMUMBALANCE=SHARE:MINIMUMBALANCE
     IF SHARE:MATURITYPOSTCODE=0 THEN
      SCURRENTSTATUS="Renew"
     ELSE IF SHARE:MATURITYPOSTCODE=1 THEN
      SCURRENTSTATUS="Disburse funds by check"
     ELSE IF SHARE:MATURITYPOSTCODE=2 THEN
      SCURRENTSTATUS="Transfer"
     ELSE IF SHARE:MATURITYPOSTCODE=3 THEN
      SCURRENTSTATUS="Suspend"
     ELSE IF SHARE:MATURITYPOSTCODE=4 THEN
      SCURRENTSTATUS="Transfer and Renew"
     TMPCHR=FORMAT("########9",SHARE:TERMPERIOD)
     CALL NLS
     SCURRENTTERM=TMPCHR+" "+TERMFREQCHR(SHARE:TERMFREQUENCY)

     FOR EACH SHARE TRANSFER WITH ((SHARE TRANSFER:EXPIRATIONDATE=DATENULL OR
                                    SHARE TRANSFER:EXPIRATIONDATE>SYSTEMDATE) AND
                                    SHARE TRANSFER:TYPE=2 AND
                                    SHARE TRANSFER:IDTYPE<=1)
      DO
       TRANSFERLISTCOUNT=TRANSFERLISTCOUNT+1

       TMPXFERACCT=SHARE TRANSFER:ACCOUNTNUMBER
       TMPXFERSLTYPE=SHARE TRANSFER:IDTYPE
       TMPXFERSLID=SHARE TRANSFER:ID

       TRANSFERLISTCHR(TRANSFERLISTCOUNT)=TMPXFERACCT
       IF TMPXFERSLTYPE=0 THEN
        TRANSFERLISTCHR(TRANSFERLISTCOUNT)=TRANSFERLISTCHR(TRANSFERLISTCOUNT)+"S"
       ELSE IF TMPXFERSLTYPE=1 THEN
        TRANSFERLISTCHR(TRANSFERLISTCOUNT)=TRANSFERLISTCHR(TRANSFERLISTCOUNT)+"L"
       TMPCHR="0000"+TMPXFERSLID
       TMPCHR=SEGMENT(TMPCHR,LENGTH(TMPCHR)-(IDLENGTH-1),LENGTH(TMPCHR))
       TRANSFERLISTCHR(TRANSFERLISTCOUNT)=TRANSFERLISTCHR(TRANSFERLISTCOUNT)+TMPCHR

       FOR ACCOUNT TMPXFERACCT
        DO
         IF TMPXFERSLTYPE=0 THEN
          DO
           FOR EACH SHARE WITH SHARE:ID=TMPXFERSLID
            DO
             TRANSFERLISTNAME(TRANSFERLISTCOUNT)=SHARE:NICKNAME
             IF TRANSFERLISTNAME(TRANSFERLISTCOUNT)="" THEN
              TRANSFERLISTNAME(TRANSFERLISTCOUNT)=SHARE:DESCRIPTION
            END
          END
         ELSE
          DO
           FOR EACH LOAN WITH LOAN:ID=TMPXFERSLID
            DO
             TRANSFERLISTNAME(TRANSFERLISTCOUNT)=LOAN:NICKNAME
             IF TRANSFERLISTNAME(TRANSFERLISTCOUNT)="" THEN
              TRANSFERLISTNAME(TRANSFERLISTCOUNT)=LOAN:DESCRIPTION
            END
          END
        END

       IF SHARE TRANSFER:PERCENT=0.000% THEN
        TRANSFERLISTPERCENTCHR(TRANSFERLISTCOUNT)="null"
       ELSE
        DO
         TMPCHR=FORMAT("###9.999",SHARE TRANSFER:PERCENT)
         CALL NLS
         TRANSFERLISTPERCENTCHR(TRANSFERLISTCOUNT)=TMPCHR
        END

       IF SHARE TRANSFER:PERCENT>0.000% AND
          SHARE TRANSFER:AMOUNT=$0.00 THEN
        TRANSFERLISTAMTCHR(TRANSFERLISTCOUNT)="null"
       ELSE
        DO
         TMPCHR=FORMAT("######9.99",SHARE TRANSFER:AMOUNT)
         CALL NLS
         TRANSFERLISTAMTCHR(TRANSFERLISTCOUNT)=TMPCHR
        END
      END
    END
  END
END

PROCEDURE READCONFIGFILESETTINGS
[* Read parameter settings from the configuration Letter file.
**  OPTIONS PARAMUSEROPTIONS      Options available for the member to selec t(in LISTEXPAND format)
**  LC      PARAMLIMITCHANGES     Limit changes to one per share (TRUE/FALSE)
**  ET      PARAMDELETEXFERS      Delete share transfer records instead of expiring them (TRUE/FALSE)
**  IAT     PARAMINELIGIBLEACCTS  Ineligible Account Type(s) (in LISTEXPAND format)
**  AW      PARAMWARNINGSACCT     Acct level warnings which exclude account (in LISTEXPAND format)
**  SW      PARAMWARNINGSSHARE    Share level warning which excludes the share (in LISTEXPAND format)
**  TT      PARAMXFERTOSHARES     Valid share types to transfer funds from cert to share (in LISTEXPAND format)
**  TF      PARAMXFERFROMSHARES   Valid share types to transfer funds from into cert (in LISTEXPAND format)
**  PT      PARAMPAYEETERMS       Payee Terms & Conditions (array of up to 9 lines of text)
**  SM      PARAMSUSPENDMSG       Suspend custom msg. (array of up to 9 lines of text)
**  RM      PARAMREVIEWMSG        Review custom msg. (array of up to 9 lines of text)
*]
 INVALIDCONFIGPARAMS=FALSE
 READCONFIGERROR=FALSE

 FILEOPEN("LETTER",CONFIGFILENAME,"READ",LFNUMBER,LFERROR)
 IF LFERROR<>"" THEN
  ERRORCODE=501

 IF ERRORCODE=0 THEN
  DO
   FILEREADLINE(LFNUMBER,LFLINE,LFERROR)

   IF LFERROR<>"" AND
      LFERROR<>"EOF" THEN
    DO
     READCONFIGERROR=TRUE
     ERRORCODE=501
    END
   WHILE LFERROR=""
    DO
     CALL NORMALIZEDATA
     IF PARAMNAME<>"" THEN
      DO
[* Debug Mode
*]
       IF PARAMNAME="DEBUGMODE" AND
               PARAMVALUE="TRUE" THEN
        DEBUGMODE=TRUE

[* User Options
*]
       ELSE IF PARAMNAME="OPTIONS" AND
          PARAMVALUE<>"" THEN
        PARAMUSEROPTIONS=PARAMVALUE

[* Limit changes to 1
*]
       ELSE IF PARAMNAME="LC" AND
          PARAMVALUE="FALSE" THEN
        PARAMLIMITCHANGES=FALSE

[* Expire or delete share transfer
*]
       ELSE IF PARAMNAME="ET" AND
          PARAMVALUE="DELETE" THEN
        PARAMDELETEXFERS=TRUE

[* Ineligible Account Type(s)
*]
       IF PARAMNAME="IAT" AND
          PARAMVALUE<>"" THEN
        PARAMINELIGIBLEACCTS=PARAMVALUE
[* Account Warnings
*]
       ELSE IF PARAMNAME="AW" AND
               PARAMVALUE<>"" THEN
        PARAMWARNINGSACCT=PARAMVALUE

[* Share Warnings
*]
       ELSE IF PARAMNAME="SW" AND
               PARAMVALUE<>"" THEN
        PARAMWARNINGSSHARE=PARAMVALUE

[* Transfer 'TO' share types
*]
       ELSE IF PARAMNAME="TT" AND
               PARAMVALUE<>"" THEN
        PARAMXFERTOSHARES=PARAMVALUE

[* Transfer 'FROM' share types
*]
       ELSE IF PARAMNAME="TF" AND
               PARAMVALUE<>"" THEN
        PARAMXFERFROMSHARES=PARAMVALUE


[* Custom check payee terms
*]
       ELSE IF PARAMNAME="PT" THEN
        DO
         IF PARAMPAYEETERMLINES<PARAMPAYEETERMLINESMAX THEN
          DO
           IF PARAMVALUE<>"" THEN
            TCFOUND=TRUE
           PARAMPAYEETERMLINES=PARAMPAYEETERMLINES+1
           TMPCHR=PARAMVALUE
           CALL NTS
           CALL CLEANUPTEXT
           PARAMPAYEETERMS(PARAMPAYEETERMLINES)=TMPCHR
          END
        END

[* Custom suspend message
*]
       ELSE IF PARAMNAME="SM" THEN
        DO
         IF PARAMSUSPENDMSGLINES<PARAMSUSPENDMSGLINESMAX THEN
          DO
           IF PARAMVALUE<>"" THEN
            TCFOUND=TRUE
           PARAMSUSPENDMSGLINES=PARAMSUSPENDMSGLINES+1
           TMPCHR=PARAMVALUE
           CALL NTS
           CALL CLEANUPTEXT
           PARAMSUSPENDMSG(PARAMSUSPENDMSGLINES)=TMPCHR
          END
        END

[* Custom review message
*]
       ELSE IF PARAMNAME="RM" THEN
        DO
         IF PARAMREVIEWMSGLINES<PARAMREVIEWMSGLINESMAX THEN
          DO
           IF PARAMVALUE<>"" THEN
            TCFOUND=TRUE
           PARAMREVIEWMSGLINES=PARAMREVIEWMSGLINES+1
           TMPCHR=PARAMVALUE
           CALL NTS
           CALL CLEANUPTEXT
           PARAMREVIEWMSG(PARAMREVIEWMSGLINES)=TMPCHR
          END
        END
      END

     PARAMNAME=""
     PARAMVALUE=""
     FILEREADLINE(LFNUMBER,LFLINE,LFERROR)

     IF LFERROR<>"" AND
        LFERROR<>"EOF" THEN
      DO
       ERRORCODE=501
       READCONFIGERROR=TRUE
      END
    END [WHILE LFERROR=""]
   FILECLOSE(LFNUMBER,LFERROR)
  END

  LELISTINPUT=PARAMUSEROPTIONS
  CALL LISTEXPAND
  FOR TMPLOOP=1 TO USEROPTIONSMAX
   DO
    USEROPTIONSAVAILABLE(TMPLOOP)=LELIST(TMPLOOP)
    IF LELIST(TMPLOOP)=TRUE THEN
     USEROPTIONSMAXUSED=TMPLOOP
   END

 LELISTINPUT=PARAMINELIGIBLEACCTS
 IF LELISTINPUT="" THEN
  LELISTINPUT="NONE"
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO 9999
  DO
   INVALIDACCTYPES(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=PARAMWARNINGSACCT
 IF LELISTINPUT="" THEN
  LELISTINPUT="NONE"
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXWARNINGTYPES
  DO
   WARNINGSACCT(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=PARAMWARNINGSSHARE
 IF LELISTINPUT="" THEN
  LELISTINPUT="NONE"
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXWARNINGTYPES
  DO
   WARNINGSSHARE(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=PARAMXFERTOSHARES
 IF LELISTINPUT="" THEN
  LELISTINPUT="NONE"
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO 9999
  DO
   VALIDXFERTOSHARETYPES(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=PARAMXFERFROMSHARES
 IF LELISTINPUT="" THEN
  LELISTINPUT="NONE"
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO 9999
  DO
   VALIDXFERFROMSHARETYPES(TMPLOOP)=LELIST(TMPLOOP)
  END

 IF DEBUGMODE=TRUE THEN
  DO
   PRINT "PARAMUSEROPTIONS="+PARAMUSEROPTIONS
   NEWLINE
   PRINT "PARAMLIMITCHANGES="+BOOLEANCHR(PARAMLIMITCHANGES)
   NEWLINE
   PRINT "PARAMDELETEXFERS="+BOOLEANCHR(PARAMDELETEXFERS)
   NEWLINE
   PRINT "PARAMINELIGIBLEACCTS="+PARAMINELIGIBLEACCTS
   NEWLINE
   PRINT "PARAMWARNINGSACCT="+PARAMWARNINGSACCT
   NEWLINE
   PRINT "PARAMWARNINGSSHARE="+PARAMWARNINGSSHARE
   NEWLINE
   PRINT "PARAMXFERTOSHARES="+PARAMXFERTOSHARES
   NEWLINE
   PRINT "PARAMXFERFROMSHARES="+PARAMXFERFROMSHARES
   NEWLINE

   FOR TMPLOOP=1 TO PARAMPAYEETERMLINES
    DO
     PRINT PARAMPAYEETERMS(TMPLOOP)
     NEWLINE
    END
   FOR TMPLOOP=1 TO PARAMSUSPENDMSGLINES
    DO
     PRINT PARAMSUSPENDMSG(TMPLOOP)
     NEWLINE
    END
   FOR TMPLOOP=1 TO PARAMREVIEWMSGLINES
    DO
     PRINT PARAMREVIEWMSG(TMPLOOP)
     NEWLINE
    END
  END
END [PROCEDURE]

PROCEDURE VALIDATEPARAMS
[* Validate required parameters to make sure all necessary
** parameter settings are present and within required ranges
*]

 PARAMVALIDATIONERROR=FALSE

 FOUND=FALSE
 FOR TMPLOOP=1 TO USEROPTIONSMAX
  DO
   IF USEROPTIONSAVAILABLE(TMPLOOP)=TRUE THEN
    FOUND=TRUE
  END
 IF FOUND=FALSE THEN
  PARAMVALIDATIONERROR=TRUE

 IF PARAMVALIDATIONERROR=TRUE THEN
  DO
   NEWLINE
   CALL JSONOPEN
   ERRORCODE=501
   CALL ERRORHANDLER
   CALL JSONCLOSE
   @RGSTATE=STATEEND
  END
END [PROCEDURE]

PROCEDURE NORMALIZEDATA
[* Normalize the data and if a parameter, separate into
** parameter name and value
** PASS    LFLINE          Character line read in
** RETURN  PARAMNAME       Parameter name found
** RETURN  PARAMVALUE      Parameter value
**
*]
 PARAMNAME=""
 PARAMVALUE=""

 POS=CHARACTERSEARCH(LFLINE,":")
 IF LFLINE<>"" AND
    SEGMENT(LFLINE,1,1)<>"*" AND
    POS>1 THEN
  DO
   TMPCHR=SEGMENT(LFLINE,1,POS-1)
   CALL NLTS
   PARAMNAME=UPPERCASE(TMPCHR)

   TMPCHR=SEGMENT(LFLINE,POS+1,LENGTH(LFLINE))
   CALL NLTS
   PARAMVALUE=TMPCHR
  END
END [PROCEDURE]

PROCEDURE NLTS
[* Remove leading AND trailing spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 CALL NTS
 IF TMPCHR<>"" THEN
  CALL NLS
END [PROCEDURE]

PROCEDURE NLS
[* Remove leading spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 WHILE (LENGTH(TMPCHR)>0 AND
        SEGMENT(TMPCHR,1,1)=" ")
  DO
   IF LENGTH(TMPCHR)=1 THEN
    TMPCHR=""
   ELSE
    TMPCHR=SEGMENT(TMPCHR,2,LENGTH(TMPCHR))
  END
 IF LENGTH(TMPCHR)=0 THEN
  TMPCHR=""
END [PROCEDURE]

PROCEDURE NTS
[* Remove trailing spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 IF TMPCHR<>"" THEN
  TMPCHR=SEGMENT(TMPCHR,1,LENGTH(TMPCHR))
 IF LENGTH(TMPCHR)=0 THEN
  TMPCHR=""
END [PROCEDURE]

PROCEDURE CLEANUPTEXT
[* Check character string and remove out any characters or hidden
** characters which have an ASCII value which is not established in
** the VALIDCHRINPUT1 string in the SETUP division . This is to avoid
** display issues with displaying the terms or conditions. Additionally,
** if a back-slash or double quote is encountered, add a preceding
** backslash
**  PASS       TMPCHR   String to test
**  RETURN     TMPCHR   Updated string
*]

 TMPTEXT=""

 IF TMPCHR<>"" THEN
  DO
   FOR TMPTEXTLOOP=1 TO LENGTH(TMPCHR)
    DO
     CHRVAL=CHRVALUE(SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP))
     IF  VALIDCHARS(CHRVAL)=TRUE THEN
      DO
[* Check for back-slash or double-quote. If found, precede with a back-slash
*]
       IF (CHRVAL=92 OR CHRVAL=34) THEN
        TMPTEXT=TMPTEXT+"\"+SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP)
       ELSE
        TMPTEXT=TMPTEXT+SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP)
      END
    END
  END
 TMPCHR=TMPTEXT
END [PROCEDURE]

PROCEDURE INITIALIZATIONS
[* Initialize state variables
*]
 WHILELIMIT=100000
 LFNUMBER=0
 LFERROR=""
 VALIDACCOUNT=FALSE
 VALIDPARAMS=TRUE
 READCONFIGERROR=FALSE
 READCONFIGERRORMSG=""
 LFERROR=""
 LFNUMBER=0
 ERRORCODE=0
 USEROPTIONSMAXUSED=0

 PARAMUSEROPTIONS="1,2,3,4,5,6"
 PARAMLIMITCHANGES=TRUE
 PARAMINELIGIBLEACCTS="NONE"
 PARAMWARNINGSACCT="NONE"
 PARAMWARNINGSSHARE="NONE"
 PARAMDELETEXFERS=FALSE

 FOR TMPLOOP=0 TO 9
  DO
   PARAMPAYEETERMS(TMPLOOP)=""
   PARAMSUSPENDMSG(TMPLOOP)=""
   PARAMREVIEWMSG(TMPLOOP)=""
  END

 FOR TMPLOOP=1 TO SERVICECODEMAX
  DO
   SERVICECODESIN(TMPLOOP)=FALSE
   SERVICECODESOUT(TMPLOOP)=TRUE
  END
[TEK]
 LELISTINPUT=GETDATACHARACTER(GETPARAMSYMXCHCLSERVICESXIN,SYMXINSTANCE,SYMXCLIENTNUM)
 CALL LISTEXPAND
 FOR TMPLOOP=1 TO SERVICECODEMAX
  DO
   SERVICECODESIN(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=GETDATACHARACTER(GETPARAMSYMXCHCLSERVICESXOUT,SYMXINSTANCE,SYMXCLIENTNUM)
 CALL LISTEXPAND
 FOR TMPLOOP=1 TO SERVICECODEMAX
  DO
   SERVICECODESOUT(TMPLOOP)=LELIST(TMPLOOP)
  END


 LELISTINPUT=VALIDCHRINPUT1
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXCHRVALUE
  DO
   VALIDCHARS(TMPLOOP)=LELIST(TMPLOOP)
  END

 FOR TMPLOOP=0 TO PARAMPAYEETERMLINESMAX
  DO
   PARAMPAYEETERMS(TMPLOOP)=""
  END
 FOR TMPLOOP=0 TO PARAMSUSPENDMSGLINESMAX
  DO
   PARAMSUSPENDMSG(TMPLOOP)=""
  END
 FOR TMPLOOP=0 TO PARAMREVIEWMSGLINESMAX
  DO
   PARAMREVIEWMSG(TMPLOOP)=""
  END
 FOR TMPLOOP=0 TO MAXWARNINGTYPES
  DO
   WARNINGSACCT(TMPLOOP)=FALSE
   WARNINGSSHARE(TMPLOOP)=FALSE
  END
 FOR TMPLOOP=0 TO MAXACCTYPES
  DO
   INVALIDACCTYPES(TMPLOOP)=FALSE
  END
END [PROCEDURE]

PROCEDURE ERRORHANDLER
[* Print error code information to output.
**  PASS       ERRORCODE      Error code to print
**  PASS       ERRORMSG       Error type to print
**  PASS       ERRORDETAIL    Specific error detail
**
** ERROR CODES
**  500 Generic Error
**  501 Configuration file error (error opening, reading or processing)
**  502 Invalid account or share (based on account type/share warning)
**  503 Maturity selection previously made
**  504 Processing Error
**  505 Cross account access attempt
**
*]
 ERRORMSG="loggingErrorMessage"
 ERRORDETAIL(0)="Undefined Error"
 ERRORDETAIL(1)="Config file error"
 ERRORDETAIL(2)="Invalid account or share"
 ERRORDETAIL(3)="Maturity selection previously made"
 ERRORDETAIL(4)="Error processing request"

 ERRORDETAILOFFSET=ERRORCODE-500

 IF ERRORDETAILOFFSET=1 THEN
  IF READCONFIGERROR=TRUE THEN
   ERRORDETAIL(1)=ERRORDETAIL(1)+": "+FMERROR
  ELSE IF PARAMVALIDATIONERROR=TRUE THEN
   ERRORDETAIL(1)=ERRORDETAIL(1)+": Invalid Parameter in CFG file"

 IF ERRORDETAILOFFSET=2 THEN
  IF WARNINGFOUND<>FALSE THEN
   ERRORDETAIL(2)=ERRORDETAIL(2)+FORMAT(": Acct or Share Warning 999",WARNINGFOUND)
  ELSE
   ERRORDETAIL(2)=ERRORDETAIL(2)+FORMAT(": Acct Type 9999",ACCOUNT:TYPE)

 IF ERRORDETAILOFFSET=4 THEN
  ERRORDETAIL(4)=ERRORDETAIL(4)+": "+FMERROR

 PRINT INDENT(1)+Q+"errorCode"+Q+": "+FORMAT(Q+"999"+Q,ERRORCODE)+","
 NEWLINE
 PRINT INDENT(1)+Q+ERRORMSG+Q+": "+Q+ERRORDETAIL(ERRORDETAILOFFSET)+Q
 NEWLINE
END [PROCEDURE]

PROCEDURE JSONOPEN
[* Print JSON open char
*]
 PRINT "{"
 NEWLINE
END [PROCEDURE]

PROCEDURE JSONCLOSE
[* Print JSON close char
*]
 PRINT "}"
 NEWLINE
END [PROCEDURE]

PROCEDURE VALIDATEACCOUNT
[* Validate the account against targeted account warning codes
** and validate account type
*]
 INVALIDACCTTYPEFOUND=FALSE
 IF INVALIDACCTYPES(ACCOUNT:TYPE)=TRUE THEN
  INVALIDACCTTYPEFOUND=TRUE

 FOR ACCOUNT TARGETACCOUNT
  DO
   WARNINGFOUND=FALSE
   FOR TMPLOOP=1 TO MAXWARNINGTYPES
    DO
     IF WARNINGSACCT(TMPLOOP)=TRUE AND
        ANYWARNING(ACCOUNT,TMPLOOP) THEN
      DO
       WARNINGFOUND=TMPLOOP
       TMPLOOP=MAXWARNINGTYPES
      END
    END

   IF WARNINGFOUND=FALSE THEN
    DO
     FOR EACH SHARE WITH (SHARE:ID=TARGETSHAREID)
      DO

       SHARENOTEFOUND=FALSE
       TMPCHR="Banno Maturity Option Selected"
       IF PARAMLIMITCHANGES=TRUE THEN
        DO
         FOR EACH SHARE NOTE WITH ((SHARE NOTE:EXPIRATIONDATE='--/--/--' OR
                                    SHARE NOTE:EXPIRATIONDATE>SYSTEMDATE) AND
                                    SHARE NOTE:TEXT:1=TMPCHR)
          DO
           SHARENOTEFOUND=TRUE
           ERRORCODE=503
          END
        END
       IF ERRORCODE=0 THEN
        DO
         FOR TMPLOOP=1 TO MAXWARNINGTYPES
          DO
           IF WARNINGSSHARE(TMPLOOP)=TRUE AND
              ANYWARNING(SHARE,TMPLOOP) THEN
            DO
             WARNINGFOUND=TMPLOOP
             TMPLOOP=MAXWARNINGTYPES
            END
          END
        END
      END
    END
  END

 IF INVALIDACCTTYPEFOUND=TRUE OR
    WARNINGFOUND<>FALSE THEN
  ERRORCODE=502
END [PROCEDURE]

PROCEDURE CHECKFORMEMOMODE
[* Check to see if the system is in memo mode and if so, return error code
** 500 and halt program run
*]
 SYSTEMMEMOMODE=SYSMEMOMODE

 IF SYSTEMMEMOMODE=TRUE THEN
  DO
   CALL JSONOPEN
   ERRORCODE=500
   CALL ERRORHANDLER
   CALL JSONCLOSE
   @RGSTATE=STATEEND
   @RGDATATYPE=9
  END
END [PROCEDURE]

PROCEDURE RETURNJSON2

 PRINT INDENT(0)+"{"
 NEWLINE
 PRINT INDENT(1)+Q+"results"+Q+": "+Q+"success"+Q+","
 NEWLINE

 PRINT INDENT(2)+Q+"updatedState"+Q+": {"
 NEWLINE
 PRINT INDENT(3)+Q+"name"+Q+": "+Q+SNAME+Q+","
 NEWLINE
 PRINT INDENT(3)+Q+"maturityDate"+Q+": "+Q+FORMAT("99/99/99",SMATURITYDATE)+Q+","
 NEWLINE
 TMPCHR=FORMAT("########9.99",SMINIMUMBALANCE)
 CALL NLS
 PRINT INDENT(3)+Q+"minimumBalance"+Q+": "+Q+TMPCHR+Q+","
 NEWLINE
 PRINT INDENT(3)+Q+"currentStatus"+Q+": "+Q+SCURRENTSTATUS+Q+","
 NEWLINE
 PRINT INDENT(3)+Q+"currentTerm"+Q+": "+Q+SCURRENTTERM+Q+","
 NEWLINE
 PRINT INDENT(3)+Q+"transferSLId"+Q+": "+Q+TRANSFERACCOUNT+
                                           TRANSFERSLTYPE+
                                           TRANSFERSLID+Q+","
 NEWLINE
 TMPCHR=FORMAT("#########9.99",TRANSFERAMOUNT)
 CALL NLS
 PRINT INDENT(3)+Q+"transferAmount"+Q+": "+Q+TMPCHR+Q
 NEWLINE
 PRINT INDENT(2)+"}"
 NEWLINE
 PRINT INDENT(1)+"}"
 NEWLINE
END

PROCEDURE RETURNJSON1
[* Send required JSON formatted output
*]

 PRINT INDENT(0)+"{"
 NEWLINE
 IF PROGRAMVERSION<>"" THEN
  DO
   PRINT INDENT(1)+Q+"programVersion"+Q+": "+Q+PROGRAMVERSION+Q+","
   NEWLINE
  END
 PRINT INDENT(1)+Q+"results"+Q+": {"
 NEWLINE
 PRINT INDENT(2)+Q+"currentState"+Q+": {"
 NEWLINE
 PRINT INDENT(3)+Q+"name"+Q+": "+Q+SNAME+Q+","
 NEWLINE
 PRINT INDENT(3)+Q+"maturityDate"+Q+": "+Q+FORMAT("99/99/99",SMATURITYDATE)+Q+","
 NEWLINE
 TMPCHR=FORMAT("########9.99",SMINIMUMBALANCE)
 CALL NLS
 PRINT INDENT(3)+Q+"minimumBalance"+Q+": "+Q+TMPCHR+Q+","
 NEWLINE
 PRINT INDENT(3)+Q+"currentStatus"+Q+": "+Q+SCURRENTSTATUS+Q+","
 NEWLINE
 PRINT INDENT(3)+Q+"currentTerm"+Q+": "+Q+SCURRENTTERM+Q+","
 NEWLINE

 PRINT  INDENT(3)+Q+"transfers"+Q+":["
 IF TRANSFERLISTCOUNT>0 THEN
  DO
   PRINT "{"
   NEWLINE

   FOR TMPLOOP=1 TO TRANSFERLISTCOUNT
    DO

     IF TMPLOOP>1 THEN
      DO
       PRINT INDENT(4)+"{"
       NEWLINE
      END
     PRINT INDENT(4)+Q+"transferSLId"+Q+": "+Q+TRANSFERLISTCHR(TMPLOOP)+Q+","
     NEWLINE
     PRINT INDENT(4)+Q+"transferName"+Q+": "+Q+TRANSFERLISTNAME(TMPLOOP)+Q+","
     NEWLINE
     PRINT INDENT(4)+Q+"transferAmount"+Q+": "+Q+TRANSFERLISTAMTCHR(TMPLOOP)+Q+","
     NEWLINE
     PRINT INDENT(4)+Q+"transferPercent"+Q+": "+Q+TRANSFERLISTPERCENTCHR(TMPLOOP)+Q
     NEWLINE
     PRINT INDENT(4)+"}"
     IF TMPLOOP<TRANSFERLISTCOUNT THEN
      PRINT ","
     NEWLINE
    END
   IF TMPLOOP<TRANSFERLISTCOUNT THEN
    DO
     PRINT INDENT(4)+"}"
     PRINT ","
    END
   ELSE
    DO
     PRINT INDENT(3)+"]"
    END
   NEWLINE
  END
 ELSE
  DO
   PRINT "]"
   NEWLINE
  END

 PRINT INDENT(3)+"},"
 NEWLINE

[* Display the user option list
*]
 OPTIONFOUND=FALSE
 FOR TMPLOOP=1 TO USEROPTIONSMAXUSED
  DO

   IF TMPLOOP=1 AND SLTRANSFERLISTFROMCOUNT<=0 THEN
    USEROPTIONSAVAILABLE(TMPLOOP)=FALSE

   IF TMPLOOP=3 AND SLTRANSFERLISTTOCOUNT<=0 THEN
    USEROPTIONSAVAILABLE(TMPLOOP)=FALSE

   IF USEROPTIONSAVAILABLE(TMPLOOP)=TRUE THEN
    DO
     IF OPTIONFOUND=FALSE THEN
      DO
       PRINT  INDENT(3)+Q+"options"+Q+":[{"
       NEWLINE
      END
     ELSE
      DO
       PRINT INDENT(4)+"{"
       NEWLINE
      END

     OPTIONFOUND=TRUE
     PRINT INDENT(5)+Q+"name"+Q+": "+Q+USEROPTIONSCHR(TMPLOOP)+Q+","
     NEWLINE
     PRINT INDENT(5)+Q+"value"+Q+": "+Q+FORMAT("9",TMPLOOP)+Q
     NEWLINE

     PRINT INDENT(4)+"}"
     IF TMPLOOP<USEROPTIONSMAXUSED THEN
      PRINT ","
     NEWLINE

    END [USEROPTIONSAVAILABLE(TMPLOOP)=TRUE]
  END
 PRINT INDENT(3)+ "],"
 NEWLINE

[* Display the shares which can be used to transfer funds to upon share maturity.
*]
 PRINT  INDENT(3)+Q+"transferTo"+Q+":["
 IF SLTRANSFERLISTTOCOUNT>0 THEN
  DO
   PRINT "{"
   NEWLINE

   FOR TMPLOOP=1 TO SLTRANSFERLISTTOCOUNT
    DO

     IF TMPLOOP>1 THEN
      DO
       PRINT INDENT(4)+"{"
       NEWLINE
      END
     PRINT INDENT(4)+Q+"shareLoanId"+Q+": "+Q+SLTRANSFERLISTTOACCT(TMPLOOP)+Q+","
     NEWLINE
     PRINT INDENT(4)+Q+"shareLoanName"+Q+": "+Q+SLTRANSFERLISTTONAME(TMPLOOP)+Q+","
     NEWLINE
     TMPCHR=FORMAT("########9.99",SLTRANSFERLISTTOAVAILBAL(TMPLOOP))
     CALL NLS
     PRINT INDENT(4)+Q+"shareLoanBal"+Q+": "+Q+TMPCHR+Q
     NEWLINE
     PRINT INDENT(4)+"}"
     IF TMPLOOP<SLTRANSFERLISTTOCOUNT THEN
      PRINT ","
     NEWLINE
    END
   IF TMPLOOP<SLTRANSFERLISTTOCOUNT THEN
    DO
     PRINT INDENT(4)+"}"
     PRINT ","
    END
   ELSE
    DO
     PRINT INDENT(3)+"],"
    END
   NEWLINE
  END
 ELSE
  DO
   PRINT "],"
   NEWLINE
  END

[* Display the shares which can be used as a source to transfer funds from and into the certificate upon maturity.
*]
 PRINT  INDENT(3)+Q+"transferFrom"+Q+":["
 IF SLTRANSFERLISTFROMCOUNT>0 THEN
  DO
   PRINT "{"
   NEWLINE

   FOR TMPLOOP=1 TO SLTRANSFERLISTFROMCOUNT
    DO

     IF TMPLOOP>1 THEN
      DO
       PRINT INDENT(4)+"{"
       NEWLINE
      END
     PRINT INDENT(4)+Q+"shareLoanId"+Q+": "+Q+SLTRANSFERLISTFROMACCT(TMPLOOP)+Q+","
     NEWLINE
     PRINT INDENT(4)+Q+"shareLoanName"+Q+": "+Q+SLTRANSFERLISTFROMNAME(TMPLOOP)+Q+","
     NEWLINE
     TMPCHR=FORMAT("########9.99",SLTRANSFERLISTFROMAVAILBAL(TMPLOOP))
     CALL NLS
     PRINT INDENT(4)+Q+"shareLoanBal"+Q+": "+Q+TMPCHR+Q
     NEWLINE
     PRINT INDENT(4)+"}"
     IF TMPLOOP<SLTRANSFERLISTFROMCOUNT THEN
      PRINT ","
     NEWLINE
    END
   IF TMPLOOP<SLTRANSFERLISTFROMCOUNT THEN
    DO
     PRINT INDENT(4)+"}"
     PRINT ","
    END
   ELSE
    DO
     PRINT INDENT(3)+"],"
    END
   NEWLINE
  END
 ELSE
  DO
   PRINT "],"
   NEWLINE
  END

[* Display the Payee Address
*]
 PRINT INDENT(3)+Q+"payeeAddress"+Q+": ["
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:1
 CALL NLTS
 PRINT INDENT(4) +Q+TMPCHR+Q+","
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:2
 CALL NLTS
 PRINT INDENT(4)+Q+TMPCHR+Q+","
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:3
 CALL NLTS
 PRINT INDENT(4)+Q+TMPCHR+Q+","
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:4
 CALL NLTS
 PRINT INDENT(4)+Q+TMPCHR+Q+","
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:5
 CALL NLTS
 PRINT INDENT(4)+Q+TMPCHR+Q+","
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:6
 CALL NLTS
 PRINT INDENT(4)+Q+TMPCHR+Q+""
 NEWLINE
 PRINT INDENT(3)+"],"
 NEWLINE

[* Display the Payee Terms and Conditions
*]
 PRINT INDENT(2)+Q+"payeeTerms"+Q+": ["

 FOR TERMSLOOP=1 TO PARAMPAYEETERMLINES
  DO
   NEWLINE
   PRINT INDENT(4)+Q
   IF TERMSLOOP>1 AND
      PARAMPAYEETERMS(TERMSLOOP)<>"" AND
      PARAMPAYEETERMS(TERMSLOOP-1)<>"" THEN

    PRINT " "
   PRINT PARAMPAYEETERMS(TERMSLOOP)+Q
   IF TERMSLOOP<PARAMPAYEETERMLINES THEN
    PRINT ","
  END
 NEWLINE
 PRINT INDENT(3)+"],"
 NEWLINE

[* Display suspend message
*]
 PRINT INDENT(2)+Q+"suspendMessage"+Q+": ["
 FOR TERMSLOOP=1 TO PARAMSUSPENDMSGLINES
  DO
   NEWLINE
   PRINT INDENT(4)+Q
   IF TERMSLOOP>1 AND
      PARAMSUSPENDMSG(TERMSLOOP)<>"" AND
      PARAMSUSPENDMSG(TERMSLOOP-1)<>"" THEN

    PRINT " "
   PRINT PARAMSUSPENDMSG(TERMSLOOP)+Q
   IF TERMSLOOP<PARAMSUSPENDMSGLINES THEN
    PRINT ","
  END
 NEWLINE
 PRINT INDENT(3)+"],"
 NEWLINE

[* Display review message
*]
 PRINT INDENT(2)+Q+"reviewMessage"+Q+": ["

 FOR TERMSLOOP=1 TO PARAMREVIEWMSGLINES
  DO
   NEWLINE
   PRINT INDENT(4)+Q
   IF TERMSLOOP>1 AND
      PARAMREVIEWMSG(TERMSLOOP)<>"" AND
      PARAMREVIEWMSG(TERMSLOOP-1)<>"" THEN

    PRINT " "
   PRINT PARAMREVIEWMSG(TERMSLOOP)+Q
   IF TERMSLOOP<PARAMREVIEWMSGLINES THEN
    PRINT ","
  END
 NEWLINE
 PRINT INDENT(3)+"]"
 NEWLINE
 PRINT INDENT(1)+"}"
 NEWLINE
 PRINT INDENT(0)+"}"
 NEWLINE
END [PROCEDURE]

PROCEDURE BUILDSHARETRANSFERTOLIST
 FOR EACH SHARE WITH (SHARE:CLOSEDATE=DATENULL AND
                      SHARE:ID<>TARGETSHAREID AND
                      VALIDXFERTOSHARETYPES(SHARE:TYPE)=TRUE)
  DO
   IF(SERVICECODESIN(SHARE:SERVICE:1)=TRUE OR
      SERVICECODESIN(SHARE:SERVICE:2)=TRUE OR
      SERVICECODESIN(SHARE:SERVICE:3)=TRUE OR
      SERVICECODESIN(SHARE:SERVICE:4)=TRUE OR
      SERVICECODESIN(SHARE:SERVICE:5)=TRUE OR
      SERVICECODESIN(SHARE:SERVICE:6)=TRUE OR
      SERVICECODESIN(SHARE:SERVICE:7)=TRUE OR
      SERVICECODESIN(SHARE:SERVICE:8)=TRUE) THEN
    DO


     IF SLTRANSFERLISTTOCOUNT<SLTRANSFERLISTTOMAX THEN
      DO
       SLTRANSFERLISTTOCOUNT=SLTRANSFERLISTTOCOUNT+1

       SLTRANSFERLISTTOACCT(SLTRANSFERLISTTOCOUNT)=ACCOUNT:NUMBER+"S"
       TMPCHR="0000"+SHARE:ID
       TMPCHR=SEGMENT(TMPCHR,LENGTH(TMPCHR)-(IDLENGTH-1),LENGTH(TMPCHR))
       SLTRANSFERLISTTOACCT(SLTRANSFERLISTTOCOUNT)=SLTRANSFERLISTTOACCT(SLTRANSFERLISTTOCOUNT)+TMPCHR

       IF SHARE:NICKNAME<>"" THEN
        SLTRANSFERLISTTONAME(SLTRANSFERLISTTOCOUNT)=SHARE:NICKNAME
       ELSE
        SLTRANSFERLISTTONAME(SLTRANSFERLISTTOCOUNT)=SHARE:DESCRIPTION

       SLTRANSFERLISTTOAVAILBAL(SLTRANSFERLISTTOCOUNT)=SHARE:AVAILABLEBALANCE
      END
    END
  END
END [PROCEDURE]

PROCEDURE BUILDSHARETRANSFERFROMLIST
 FOR EACH SHARE WITH (SHARE:CLOSEDATE=DATENULL AND
                      SHARE:ID<>TARGETSHAREID AND
                      VALIDXFERFROMSHARETYPES(SHARE:TYPE)=TRUE)
  DO
   IF(SERVICECODESOUT(SHARE:SERVICE:1)=TRUE OR
      SERVICECODESOUT(SHARE:SERVICE:2)=TRUE OR
      SERVICECODESOUT(SHARE:SERVICE:3)=TRUE OR
      SERVICECODESOUT(SHARE:SERVICE:4)=TRUE OR
      SERVICECODESOUT(SHARE:SERVICE:5)=TRUE OR
      SERVICECODESOUT(SHARE:SERVICE:6)=TRUE OR
      SERVICECODESOUT(SHARE:SERVICE:7)=TRUE OR
      SERVICECODESOUT(SHARE:SERVICE:8)=TRUE) THEN
    DO

     IF SLTRANSFERLISTFROMCOUNT<SLTRANSFERLISTFROMMAX THEN
      DO
       SLTRANSFERLISTFROMCOUNT=SLTRANSFERLISTFROMCOUNT+1

       SLTRANSFERLISTFROMACCT(SLTRANSFERLISTFROMCOUNT)=ACCOUNT:NUMBER+"S"
       TMPCHR="0000"+SHARE:ID
       TMPCHR=SEGMENT(TMPCHR,LENGTH(TMPCHR)-(IDLENGTH-1),LENGTH(TMPCHR))
       SLTRANSFERLISTFROMACCT(SLTRANSFERLISTFROMCOUNT)=SLTRANSFERLISTFROMACCT(SLTRANSFERLISTFROMCOUNT)+TMPCHR

       IF SHARE:NICKNAME<>"" THEN
        SLTRANSFERLISTFROMNAME(SLTRANSFERLISTFROMCOUNT)=SHARE:NICKNAME
       ELSE
        SLTRANSFERLISTFROMNAME(SLTRANSFERLISTFROMCOUNT)=SHARE:DESCRIPTION

       SLTRANSFERLISTFROMAVAILBAL(SLTRANSFERLISTFROMCOUNT)=SHARE:AVAILABLEBALANCE
      END
    END
  END
END [PROCEDURE]

PROCEDURE GETRGVALUES
[* Check the values returned in the @USERCHR variables to
** determine if there are any values which need to be
** processed.
*]
 IF @RGSTATE=STATEPRELOADDATA THEN
  DO
   IF (LENGTH(@RGUSERCHR1)=15 AND
       IDLENGTH=4) OR
      (LENGTH(@RGUSERCHR1)=13 AND
       IDLENGTH=2) THEN
    DO
     TARGETACCOUNT=SEGMENT(@RGUSERCHR1,1,10)
     TARGETSHAREID=SEGMENT(@RGUSERCHR1,12,LENGTH(@RGUSERCHR1))
    END
  END
 ELSE IF @RGSTATE=STATEPROCESSDATA THEN
  DO
   ACTIONTYPE=@RGUSERNUM1
   IF (LENGTH(@RGUSERCHR1)=15 AND
       IDLENGTH=4) OR
      (LENGTH(@RGUSERCHR1)=13 AND
       IDLENGTH=2) THEN
    DO
     TARGETACCOUNT=SEGMENT(@RGUSERCHR1,1,10)
     TARGETSHAREID=SEGMENT(@RGUSERCHR1,12,LENGTH(@RGUSERCHR1))
    END

   IF DEBUGMODE=TRUE THEN
    DO
     PRINT FORMAT("action type: 9",actiontype)+
          "   TARGETACCOUNT="+TARGETACCOUNT+
          "   TARGETSHAREID="+TARGETSHAREID+
           FORMAT("   LENGTH(@RGUSERCHR2)=99",LENGTH(@RGUSERCHR2))
     NEWLINE
    END

   IF ACTIONTYPE=USEROPTIONINCREASE OR
      ACTIONTYPE=USEROPTIONTRANSFER THEN
    DO
     IF (LENGTH(@RGUSERCHR2)=15 AND
         IDLENGTH=4) OR
        (LENGTH(@RGUSERCHR2)=13 AND
         IDLENGTH=2) THEN
      DO
       TRANSFERACCOUNT=SEGMENT(@RGUSERCHR2,1,10)
       TRANSFERSLTYPE=SEGMENT(@RGUSERCHR2,11,11)
       TRANSFERSLID=SEGMENT(@RGUSERCHR2,12,LENGTH(@RGUSERCHR1))
       TRANSFERAMOUNT=MONEY(VALUE(@RGUSERCHR3))


       IF DEBUGMODE=TRUE THEN
        DO
         PRINT "TRANSFERACCOUNT="+TRANSFERACCOUNT+
               "   TRANSFERSLTYPE="+TRANSFERSLTYPE+
               "   TRANSFERSLID="+TRANSFERSLID
         NEWLINE
        END
       FOR ACCOUNT TRANSFERACCOUNT
        DO
         FOR EACH SHARE WITH (SHARE:ID=TARGETSHAREID)
          DO
           TARGETMATURITYDATE=SHARE:MATURITYDATE
          END
        END
      END
    END
  END
END [PROCEDURE]

PROCEDURE CREATETRANSFERIN
 IF TRANSFERSLTYPE="S" THEN
 DO
  FOR ACCOUNT TRANSFERACCOUNT
   DO
    FMPERFORM CREATE SHARE TRANSFERSLID TRANSFER LOC AFTERLAST (0,0,NEWSLTRANSFERLOC,FMERROR)
     DO
      SET TYPE TO 3
      SET ACCOUNTNUMBER TO TARGETACCOUNT
      SET IDTYPE TO 0
      SET ID TO TARGETSHAREID
      SET AMOUNT TO TRANSFERAMOUNT
      SET EFFECTIVEDATE TO TARGETMATURITYDATE-1
      SET NEXTDATE TO TARGETMATURITYDATE-1
      SET FREQUENCY TO 0
     END
   END
 END
 ELSE
 DO
  FOR ACCOUNT TRANSFERACCOUNT
   DO
    FMPERFORM CREATE LOAN TRANSFERSLID TRANSFER LOC AFTERLAST (0,0,NEWSLTRANSFERLOC,FMERROR)
     DO
      SET TYPE TO 3
      SET ACCOUNTNUMBER TO TARGETACCOUNT
      SET IDTYPE TO 1
      SET ID TO TARGETSHAREID
      SET AMOUNT TO TRANSFERAMOUNT
      SET EFFECTIVEDATE TO TARGETMATURITYDATE-1
      SET NEXTDATE TO TARGETMATURITYDATE-1
      SET FREQUENCY TO 0
     END
   END
 END
END [PROCEDURE]

PROCEDURE CREATETRANSFEROUT
 IF TRANSFERSLTYPE="S" THEN
  DO
   FOR ACCOUNT TARGETACCOUNT
    DO
     FMPERFORM CREATE SHARE TARGETSHAREID TRANSFER LOC AFTERLAST (0,0,NEWSLTRANSFERLOC,FMERROR)
      DO
       SET TYPE TO 2
       SET ACCOUNTNUMBER TO TRANSFERACCOUNT
       SET IDTYPE TO 0
       SET ID TO TRANSFERSLID
       SET AMOUNT TO $0.00
       SET EFFECTIVEDATE TO TARGETMATURITYDATE
      END
    END
  END
 ELSE
  DO
   FOR ACCOUNT TRANSFERACCOUNT
    DO
     FMPERFORM CREATE LOAN TRANSFERSLID TRANSFER LOC AFTERLAST (0,0,NEWSLTRANSFERLOC,FMERROR)
      DO
       SET TYPE TO 2
       SET ACCOUNTNUMBER TO TRANSFERACCOUNT
       SET IDTYPE TO 1
       SET ID TO TRANSFERSLID
       SET AMOUNT TO $0.00
       SET EFFECTIVEDATE TO TARGETMATURITYDATE
      END
    END
  END
END [PROCEDURE]

PROCEDURE UPDATECERTFM

 FOR ACCOUNT TARGETACCOUNT
  DO
   FMPERFORM REVISE SHARE TARGETSHAREID(0,0,FMERROR)
    DO
     SET MATURITYPOSTCODE TO SMATURITYPOSTCODE
    END
  END

 IF FMERROR<>"" THEN
  DO
   ERRORCODE=504
  END
 ELSE
  DO
   IF DEBUGMODE=TRUE THEN
    DO
     PRINT "TESTING FOR NOTE CREATION: "+
           FORMAT("PARAMLIMITCHANGES:9",PARAMLIMITCHANGES)
     NEWLINE
    END
   IF PARAMLIMITCHANGES=TRUE THEN
    DO
     FOR ACCOUNT TARGETACCOUNT
      DO
       FMPERFORM CREATE SHARE TARGETSHAREID NOTE LOC BEFOREFIRST (0,0,FMERROR)
        DO
         SET CODE TO 0
         SET TEXT:1 TO "Banno Maturity Option Selected"
         SET TEXT:2 TO "Selected: "+USEROPTIONSCHR(ACTIONTYPE)
         SET EXPIRATIONDATE TO TMPDATE
        END
      END
     IF DEBUGMODE=TRUE THEN
      DO
       PRINT "NOTE RECORD CREATION RESULT - FMERROR="+FMERROR
       NEWLINE
      END
    END
  END
END [PROCEDURE]

PROCEDURE EXPIREORDELETEXFERS

 STRANSFERCOUNT=0
 FOR ACCOUNT TARGETACCOUNT
  DO
   FOR EACH SHARE WITH (SHARE:ID=TARGETSHAREID)
    DO
     FOR EACH SHARE TRANSFER WITH (SHARE TRANSFER:TYPE=2 AND
                                  (SHARE TRANSFER:EXPIRATIONDATE=DATENULL OR
                                   SHARE TRANSFER:EXPIRATIONDATE>SYSTEMDATE))
      DO
       STRANSFERCOUNT=STRANSFERCOUNT+1
       SXFERLOC(STRANSFERCOUNT)=SHARE TRANSFER:LOCATOR
       SXFEREXPIREDATE(STRANSFERCOUNT)=SHARE TRANSFER:EXPIRATIONDATE
       SXFEREFFECTIVEDATE(STRANSFERCOUNT)=SHARE TRANSFER:EFFECTIVEDATE
      END
    END
   IF STRANSFERCOUNT>0 THEN
    DO
     TMPLOOP=1
     WHILE (TMPLOOP<=STRANSFERCOUNT)
      DO
       TMPDATE=SXFEREFFECTIVEDATE(STRANSFERCOUNT)
       IF TMPDATE>SYSTEMDATE THEN
        TMPDATE=DATENULL

       IF DEBUGMODE=TRUE THEN
        DO
         PRINT "STARTING EXPIRATION OF XFERS"
         NEWLINE
         PRINT "TARGETSHAREID="+TARGETSHAREID+"   "+
               FORMAT("TRANSFER LOC:999",SXFERLOC(TMPLOOP))
         NEWLINE
        END
       IF PARAMDELETEXFERS=TRUE THEN
        DO
         FMPERFORM DELETE SHARE TARGETSHAREID TRANSFER LOC SXFERLOC(TMPLOOP)(0,0,FMERROR)
          DO
          END
        END
       ELSE
        DO
         FMPERFORM REVISE SHARE TARGETSHAREID TRANSFER LOC SXFERLOC(TMPLOOP)(0,0,FMERROR)
          DO
           SET EFFECTIVEDATE TO TMPDATE
           SET EXPIRATIONDATE TO SYSTEMDATE
          END
        END
       TMPLOOP=TMPLOOP+1
      END
    END
  END
END [PROCEDURE]

PROCEDURE VALIDATESYSMEMOMODE
[* Check to see if system is in MemoMode and if so, return
** memoMode: true
*]
 SYSTEMMEMOMODE=SYSMEMOMODE
 IF SYSTEMMEMOMODE=TRUE THEN
  DO
   NEWLINE
   CALL JSONOPEN
   PRINT Q+"memoMode"+Q+": true"
   NEWLINE
   CALL JSONCLOSE
   @RGSTATE=STATEEND
  END
END [PROCEDURE]

#INCLUDE "RB.LISTEXPAND"
