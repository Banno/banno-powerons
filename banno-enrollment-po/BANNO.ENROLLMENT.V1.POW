[*
**  PowerOn Name: BANNO.ENROLLMENT.V1.POW
**
**  Copyright 2021 Jack Henry and Associates
**
**  07/14/2021: Initial program creation by JuCarson.
**
**  This Banno service PowerOn is to be installed for use on
**  demand and is run from the Account Manager and Teller 
**  Transaction workspaces to enroll or edit Banno HB users, 
**  change HB Passwords or create, edit and delete cross 
**  account preference access records.
**
**  Customizable Settings (found in setup):
**
**  - ALLOWMULT:      Allow multiple Banno users (HB Preference records)
**                    on each account.
**                    TRUE or FALSE
**  - ALLOWDELETE:    Allow deletion of Banno users (HB Preference 
**                    records).
**                    TRUE or FALSE
**  - ALLOWXFERTOANY: Allow transfer to any account preference access
**                    records for use with Banno M2M transfers.
**                    TRUE or FALSE
**  - ALLOWXACCT:     Allow to create, edit or delete cross accounts 
**                    for "transfer in", "transfer out" or "alternate 
**                    account".
**                    TRUE or FALSE
**  - CHECKPRIVS:     Check user privileges for all file maintenance(FM)? 
**                    When set to TRUE, user must have the privileges 
**                    in User Control to perform requested FM, when set
**                    to FALSE any user can perform FM regardless of privileges.
**                    TRUE or FALSE
**
**  For more information check
**  https://github.com/Banno/banno-powerons
**
**  Banno is not responsible for any modifications to this file
**  made by unauthorized personnel.
**
**  DO NOT MODIFY THIS FILE UNLESS YOU KNOW WHAT YOU'RE DOING!
*]

WINDOWS

TARGET=ACCOUNT

DEFINE
 #INCLUDE "RD.GETDATA.DEF"
 
 ALLOWMULT          = NUMBER
 ALLOWDELETE        = NUMBER
 ALLOWXFERTOANY     = NUMBER
 ALLOWXACCT         = NUMBER
 CHECKPRIVS         = NUMBER
 PREFCOUNT          = NUMBER
 PREFINDEX          = NUMBER
 PREFLOC            = NUMBER ARRAY(99)
 PREFUSER           = CHARACTER ARRAY(99)
 PREFEMAILADDR      = CHARACTER ARRAY(99)
 PREFXFERANYLOC     = NUMBER ARRAY(99)
 PREFPASSPROB       = NUMBER ARRAY(99)
 ACCESSLOC          = NUMBER ARRAY(99)
 ACCESSTYPE         = NUMBER ARRAY(99)
 ACCESSACCT         = CHARACTER ARRAY(99)
 ACCESSIDTYPE       = NUMBER ARRAY(99)
 ACCESSID           = CHARACTER ARRAY(99)
 ACCESSWD           = NUMBER ARRAY(99)
 ACCESSDEP          = NUMBER ARRAY(99)
 ACCESSINQ          = NUMBER ARRAY(99)
 ACCESSFM           = NUMBER ARRAY(99)
 ACCESSCOUNT        = NUMBER
 
 SELECTEDPREF       = NUMBER
 ACTIONREQUESTED    = NUMBER
 NEWPASSWORD        = CHARACTER
 NEWPASSPROB        = CHARACTER
 NEWPASSPROBNUM     = NUMBER
 CREATEXFERTOANY    = CHARACTER
 NEWUSERNAME        = CHARACTER
 NEWEMAILADDR       = CHARACTER
 FMERROR            = CHARACTER
 NEWPREFLOC         = NUMBER
 REALLYDELETE       = CHARACTER
 SELECTEDACCESS     = NUMBER
 NEWACCESSTYPE      = NUMBER
 NEWACCESSACCT      = CHARACTER
 NEWACCESSIDTYPE    = NUMBER
 NEWACCESSID        = CHARACTER
 NEWACCESSWD        = NUMBER
 NEWACCESSDEP       = NUMBER
 NEWACCESSINQ       = NUMBER
 NEWACCESSFM        = NUMBER
 ACCESSINDEX        = NUMBER
 ACCESSDESC         = CHARACTER
 ACCTFOUND          = NUMBER
 MAXPASSLENGTH      = NUMBER
 MAXHBUSERLENGTH    = NUMBER
 MINHBUSERLENGTH    = NUMBER
 IDLENGTH           = NUMBER
 HBPASSHASHING      = NUMBER
 HASHEDHBPASSWORD   = CHARACTER

 [Replace Values]
 TRUE                     = 1
 FALSE                    = 0
 ENDLESSLOOP              = 1
 ACTIONCHGPASS            = 1
 ACTIONCREATEUSR          = 2
 ACTIONEDITUSER           = 3
 ACTIONDELUSER            = 4
 ACTIONADDXACCT           = 5
 ACTIONEDITXACCT          = 6
 ACTIONDELXACCT           = 7
 ACTIONEXITPGM            = 8
 STDHOMEBANKING           = 1
 PREFMAX                  = 99
 ACCESSTYPEXFEROUT        = 0
 ACCESSTYPEXFERIN         = 1
 ACCESSTYPEALTACCT        = 2
 ACCESSTYPEXFERTOANY      = 3
 ACCESSIDTYPESHARE        = 0
 ACCESSIDTYPELOAN         = 1
 ACCESSIDTYPEUNRESTRICTED = 2
 ACCESSMAX                = 99
END [DEFINE]

SETUP
 ALLOWMULT       = TRUE
 ALLOWDELETE     = TRUE
 ALLOWXFERTOANY  = TRUE
 ALLOWXACCT      = TRUE
 CHECKPRIVS      = FALSE

 MAXPASSLENGTH=GETDATANUMBER(GETPARAMHBPASSWORDMAXLENGTH)
 MAXHBUSERLENGTH=GETDATANUMBER(GETPARAMHBUSERNAMEMAXLENGTH)
 MINHBUSERLENGTH=GETDATANUMBER(GETPARAMHBUSERNAMEMINLENGTH)
 IDLENGTH=GETDATANUMBER(GETPARAMIDLENGTH)
 HBPASSHASHING=GETDATANUMBER(GETPARAMPASSWORDHASHCODE,0)

 WHILE ENDLESSLOOP=TRUE
  DO
   CALL INITVARS
   CALL GETPREFERENCERECS
   CALL CHOOSEACTION
 
   IF ACTIONREQUESTED=ACTIONCHGPASS THEN
    DO
     CALL SELECTPREF
     CALL CHGPASSDIALOG
     CALL CHGPASSFM
     WHILE FMERROR<>"" 
      DO
       FMERROR=""
       CALL CHGPASSDIALOG
       CALL CHGPASSFM
      END
    END 

   ELSE IF ACTIONREQUESTED=ACTIONCREATEUSR OR
           ACTIONREQUESTED=ACTIONEDITUSER THEN
    DO
     IF ACTIONREQUESTED=ACTIONEDITUSER THEN
      CALL SELECTPREF
     CALL CREATEEDITDIALOG
     CALL CREATEEDITFM
     WHILE FMERROR<>"" 
      DO
       FMERROR=""
       CALL CREATEEDITDIALOG
       CALL CREATEEDITFM
      END
    END

   ELSE IF ACTIONREQUESTED=ACTIONDELUSER THEN
    DO
     CALL SELECTPREF
     CALL DELETEUSERDIALOG
     CALL DELETEUSERFM
     WHILE FMERROR<>"" 
      DO
       FMERROR=""
       CALL DELETEUSERDIALOG
       CALL DELETEUSERFM
      END
    END

   ELSE IF ACTIONREQUESTED=ACTIONEDITXACCT OR
           ACTIONREQUESTED=ACTIONADDXACCT THEN
    DO
     CALL SELECTPREF
     CALL ADDEDITXACCTDIALOG
     CALL ADDEDITXACCTFM
     WHILE FMERROR<>"" 
      DO
       FMERROR=""
       CALL ADDEDITXACCTDIALOG
       CALL ADDEDITXACCTFM
      END
    END

   ELSE IF ACTIONREQUESTED=ACTIONDELXACCT THEN
    DO
     CALL SELECTPREF
     CALL DELETEXACCTDIALOG
     CALL DELETEXACCTFM
     WHILE FMERROR<>"" 
      DO
       FMERROR=""
       CALL DELETEXACCTDIALOG
       CALL DELETEXACCTFM
      END
    END

   ELSE IF ACTIONREQUESTED=ACTIONEXITPGM THEN
    DO
     TERMINATE
    END

  END [ENDLESS LOOP]
END [SETUP]

PRINT TITLE="BANNO.ENROLLMENT.V1.POW"
 SUPPRESSNEWLINE
END [PRINT]

PROCEDURE INITVARS
[* Initializes variables before each run of specfile.
*]
 FOR PREFINDEX=0 TO PREFMAX
  DO
   PREFLOC(PREFINDEX)        = 0
   PREFUSER(PREFINDEX)       = ""
   PREFEMAILADDR(PREFINDEX)  = ""
   PREFXFERANYLOC(PREFINDEX) = 0  
   PREFPASSPROB(PREFINDEX)   = 0
  END
 FOR ACCESSINDEX=0 TO ACCESSMAX
  DO
   ACCESSLOC(ACCESSINDEX)    = 0
   ACCESSTYPE(ACCESSINDEX)   = 0
   ACCESSACCT(ACCESSINDEX)   = ""
   ACCESSIDTYPE(ACCESSINDEX) = 0
   ACCESSID(ACCESSINDEX)     = ""
   ACCESSWD(ACCESSINDEX)     = 0
   ACCESSDEP(ACCESSINDEX)    = 0
   ACCESSINQ(ACCESSINDEX)    = 0
   ACCESSFM(ACCESSINDEX)     = 0
  END
 PREFCOUNT                   = 0
 SELECTEDPREF                = 0
 ACTIONREQUESTED             = 0
 NEWPASSWORD                 = ""
 NEWPASSPROB                 = ""
 NEWPASSPROBNUM              = 0
 ACCESSCOUNT                 = 0
 SELECTEDACCESS              = 0
 CREATEXFERTOANY             = ""
 NEWUSERNAME                 = ""
 NEWEMAILADDR                = ""
 FMERROR                     = ""
 NEWPREFLOC                  = 0
 REALLYDELETE                = ""
 NEWACCESSTYPE               = 0
 NEWACCESSACCT               = ""
 NEWACCESSIDTYPE             = 0
 NEWACCESSID                 = ""
 NEWACCESSWD                 = 0
 NEWACCESSDEP                = 0
 NEWACCESSINQ                = 0
 NEWACCESSFM                 = 0
 ACCESSDESC                  = ""
END [PROCEDURE]

PROCEDURE SELECTPREF
[* Dialog that prompts user to choose banno username if more 
** than one HB preference is present or auto-chooses if one.
*]
 IF PREFCOUNT=1 THEN
  SELECTEDPREF=1
 ELSE IF PREFCOUNT>1 THEN
  DO
   DIALOGSTART("Banno Enrollment - Select User",200%,0)
   DIALOGPROMPTLISTSTART("Choose Banno User",1)
   FOR PREFINDEX=1 TO PREFCOUNT
    DO
     DIALOGPROMPTLISTOPTION(PREFINDEX,PREFUSER(PREFINDEX))
   END
   DIALOGPROMPTLISTEND
   DIALOGDISPLAY
   SELECTEDPREF=ENTERNUMBER("Choose Banno User",1)
   DIALOGCLOSE
  END
 IF LENGTH(PREFUSER(SELECTEDPREF))>MAXHBUSERLENGTH OR
    LENGTH(PREFUSER(SELECTEDPREF))<MINHBUSERLENGTH THEN
  DO
   CALL FIXUSERDIALOG
   CALL FIXUSERFM
   WHILE FMERROR<>""
    DO
     FMERROR=""
     CALL FIXUSERDIALOG
     CALL FIXUSERFM
    END
  END
END [PROCEDURE]

PROCEDURE FIXUSERDIALOG
[* Dialog that prompts user to choose a new banno username if 
** username no longer meets length criteria.
*]
 DIALOGSTART("Banno Enrollment - Enter New Username",1500%,1)
 DIALOGINTROTEXT("Existing Username does not meet current length requirements.")
 DIALOGINTROTEXT("Please choose a new username between "+FORMAT("#9",MINHBUSERLENGTH)+
                 " and "+FORMAT("#9",MAXHBUSERLENGTH)+" characters.") 
 DIALOGPROMPTCHAR("User Name : ",MAXHBUSERLENGTH,NEWUSERNAME)
 DIALOGDISPLAY
 NEWUSERNAME=ENTERCHARACTER("User Name : ",MAXHBUSERLENGTH,NEWUSERNAME)
 DIALOGCLOSE
END [PROCEDURE]

PROCEDURE FIXUSERFM
[* File maintenance used when a new banno username is chosen if 
** username no longer meets length criteria.
*]
 IF NEWUSERNAME="" THEN
  FMERROR="New HB Username Cannot Be Blank"
 IF FMERROR="" THEN
  DO
   FMPERFORM REVISE PREFERENCE LOC PREFLOC(SELECTEDPREF) (CHECKPRIVS,0,FMERROR)
    DO
     SET HBUSERNAME TO UPPERCASE(NEWUSERNAME)
    END
  END
 IF FMERROR<>"" THEN
  CALL ERRORHANDLER
 ELSE IF FMERROR="" THEN
  DO
   PREFUSER(SELECTEDPREF)=NEWUSERNAME
   POPUPMESSAGE(0,"Username Successfully Updated")
  END
END [PROCEDURE]

PROCEDURE GETPREFERENCERECS
[* Collects needed data from each HB preference on current
** account.
*]
 PREFCOUNT=0
 FOR EACH PREFERENCE WITH (PREFERENCE:HBUSERNAME<>"" AND
                           PREFERENCE:HBMODE=STDHOMEBANKING)
  DO
   IF PREFCOUNT<PREFMAX THEN
    DO
     PREFCOUNT=PREFCOUNT+1
     PREFLOC(PREFCOUNT)=PREFERENCE:LOCATOR
     PREFUSER(PREFCOUNT)=PREFERENCE:HBUSERNAME
     PREFEMAILADDR(PREFCOUNT)=PREFERENCE:EMAILADDRESS
     PREFPASSPROB(PREFCOUNT)=PREFERENCE:PWDRESETPROBATION
     PREFXFERANYLOC(PREFCOUNT)=0
     FOR EACH PREFERENCE ACCESS WITH (PREFERENCE ACCESS:ACCESSTYPE=3)
      DO
       PREFXFERANYLOC(PREFCOUNT)=PREFERENCE ACCESS:LOCATOR
      END
     UNTIL PREFXFERANYLOC(PREFCOUNT)<>0
   END
  END
 IF PREFCOUNT>PREFMAX THEN
  DO
   POPUPMESSAGE(2,"Too many users, Update Manually")
   TERMINATE
  END
END [PROCEDURE]

PROCEDURE CHOOSEACTION
[* Dialog that prompts user for desired action.
*]
 DIALOGSTART("Banno Enrollment",1500%,0)
 DIALOGPROMPTLISTSTART("Choose Action:",ACTIONCHGPASS)
 IF PREFCOUNT>=1 THEN
  DIALOGPROMPTLISTOPTION(ACTIONCHGPASS,"Change Password")
 IF PREFCOUNT=0 OR ALLOWMULT=TRUE THEN
  DIALOGPROMPTLISTOPTION(ACTIONCREATEUSR,"Create User")
 IF PREFCOUNT>=1 THEN
  DIALOGPROMPTLISTOPTION(ACTIONEDITUSER,"Edit User")
 IF ALLOWDELETE=TRUE AND PREFCOUNT>=1 THEN
  DIALOGPROMPTLISTOPTION(ACTIONDELUSER,"Delete User")
 IF ALLOWXACCT=TRUE AND PREFCOUNT>=1 THEN
  DO
   DIALOGPROMPTLISTOPTION(ACTIONADDXACCT,"Add Cross Account")
   DIALOGPROMPTLISTOPTION(ACTIONEDITXACCT,"Edit Cross Account")
   DIALOGPROMPTLISTOPTION(ACTIONDELXACCT,"Delete Cross Account")
  END
 DIALOGPROMPTLISTOPTION(ACTIONEXITPGM,"Exit Banno Enrollment")
 DIALOGPROMPTLISTEND
 DIALOGDISPLAY
 ACTIONREQUESTED=ENTERNUMBER("Choose Action:",ACTIONCHGPASS)
 DIALOGCLOSE
END [PROCEDURE]

PROCEDURE CHGPASSDIALOG
[* Dialog that prompts user for new HB password and password
** probation preference.
*]
 DIALOGSTART("Banno Enrollment - New Password",200%,0)
 DIALOGINTROTEXT("Changing Password for User "+PREFUSER(SELECTEDPREF))
 DIALOGPROMPTCHAR("Enter New Password:",MAXPASSLENGTH,"")
 DIALOGPROMPTYESNO("Change Password at next login?",FALSE)
 DIALOGDISPLAY
 NEWPASSWORD=ENTERCHARACTER("Enter New Password:",MAXPASSLENGTH,"")
 NEWPASSPROB=ENTERYESNO("Change Password at next login?","0")
 DIALOGCLOSE
END [PROCEDURE]

PROCEDURE CHGPASSFM
[* File maintenance and error handling for password change.
*]
 IF NEWPASSPROB="Y" THEN
  NEWPASSPROBNUM=1
 ELSE
  NEWPASSPROBNUM=0

 HASHEDHBPASSWORD=""
 IF HBPASSHASHING=TRUE THEN
  HASHEDHBPASSWORD=PASSWORDHASH(NEWPASSWORD)
ELSE
  HASHEDHBPASSWORD=NEWPASSWORD

 FMPERFORM REVISE PREFERENCE LOC PREFLOC(SELECTEDPREF)(CHECKPRIVS,0,FMERROR)
  DO
   SET HBPASSWORD TO HASHEDHBPASSWORD
   SET LASTHBPWCHANGEDATE TO SYSTEMDATE
   SET PWDRESETPROBATION TO NEWPASSPROBNUM
  END
 IF FMERROR<>"" THEN
  CALL ERRORHANDLER
 ELSE IF FMERROR="" AND NEWPASSWORD<>"" THEN
  POPUPMESSAGE(0,"Password Successfully Updated")
 ELSE IF FMERROR="" AND NEWPASSWORD="" THEN
  POPUPMESSAGE(0,"Password Successfully Cleared")
END [PROCEDURE]

PROCEDURE CREATEEDITDIALOG
[* Dialog that prompts user for information needed when creating
** or editing a user.
*]
 IF ACTIONREQUESTED=ACTIONCREATEUSR THEN
  DIALOGSTART("Banno Enrollment - Create User",200%,1)
 ELSE IF ACTIONREQUESTED=ACTIONEDITUSER THEN
  DIALOGSTART("Banno Enrollment - Edit User",200%,1)
 IF NEWEMAILADDR<>"" THEN
  DIALOGPROMPTCHAR("Email : ",40,NEWEMAILADDR)
 ELSE
  DIALOGPROMPTCHAR("Email : ",40,PREFEMAILADDR(SELECTEDPREF))
 IF NEWUSERNAME<>"" THEN
  DIALOGPROMPTCHAR("User Name : ",MAXHBUSERLENGTH,NEWUSERNAME)
 ELSE
  DIALOGPROMPTCHAR("User Name : ",MAXHBUSERLENGTH,PREFUSER(SELECTEDPREF))
 IF ACTIONREQUESTED=ACTIONCREATEUSR THEN
  DO
   IF NEWPASSWORD<>"" THEN
    DIALOGPROMPTCHAR("Password:",MAXPASSLENGTH,NEWPASSWORD)
   ELSE
    DIALOGPROMPTCHAR("Password:",MAXPASSLENGTH,"")
  END
 ELSE IF ACTIONREQUESTED=ACTIONEDITUSER  THEN
  DIALOGINTROTEXT("Use Change Password Option to change Password")
 IF ACTIONREQUESTED=ACTIONEDITUSER AND PREFPASSPROB(SELECTEDPREF)=0 THEN
  DIALOGPROMPTYESNO("Change Password at next login?",FALSE)
 ELSE IF ((ACTIONREQUESTED=ACTIONEDITUSER AND PREFPASSPROB(SELECTEDPREF)=1) OR
           ACTIONREQUESTED=ACTIONCREATEUSR) THEN
  DIALOGPROMPTYESNO("Change Password at next login?",TRUE)
 IF ALLOWXFERTOANY=TRUE AND PREFXFERANYLOC(SELECTEDPREF)<>0 OR ACTIONREQUESTED=ACTIONCREATEUSR THEN
  DIALOGPROMPTYESNO("Enable Xfer To Any Acct?",TRUE)
 ELSE IF ALLOWXFERTOANY=TRUE AND PREFXFERANYLOC(SELECTEDPREF)=0 THEN
  DIALOGPROMPTYESNO("Enable Xfer To Any Acct?",FALSE)
 DIALOGDISPLAY
 NEWEMAILADDR=ENTERCHARACTER("Email : ",40,PREFEMAILADDR(SELECTEDPREF))
 NEWUSERNAME=ENTERCHARACTER("User Name : ",MAXHBUSERLENGTH,PREFUSER(SELECTEDPREF))
 IF ACTIONREQUESTED=ACTIONCREATEUSR THEN
  NEWPASSWORD=ENTERCHARACTER("Password:",MAXPASSLENGTH,"")
 NEWPASSPROB=ENTERYESNO("Change Password at next login?","")
 IF ALLOWXFERTOANY=TRUE THEN
  CREATEXFERTOANY=ENTERYESNO("Enable Xfer To Any Acct?","")
 DIALOGCLOSE
END [PROCEDURE]

PROCEDURE CREATEEDITFM
[* File maintenance and error handling for creating or editing
** a user.
*]
 IF NEWPASSPROB="Y" THEN
  NEWPASSPROBNUM=1
 ELSE
  NEWPASSPROBNUM=0

 IF ACTIONREQUESTED=ACTIONCREATEUSR THEN
  DO
   IF NEWPASSWORD="" THEN
    FMERROR="Password Cannot Be Blank"
   IF NEWUSERNAME="" THEN
    FMERROR="Username Cannot Be Blank"

   IF FMERROR="" THEN  
    DO
     NEWPREFLOC=0
     FMPERFORM CREATE PREFERENCE LOC AFTERLAST (CHECKPRIVS,0,NEWPREFLOC,FMERROR)
      DO
       SET HBUSERNAME TO UPPERCASE(NEWUSERNAME)
       SET HBPASSWORD TO NEWPASSWORD
       SET LASTHBPWCHANGEDATE TO SYSTEMDATE
       SET PWDRESETPROBATION TO NEWPASSPROBNUM
       SET EMAILADDRESS TO NEWEMAILADDR
      END
     IF NEWPREFLOC<>0 AND ALLOWXFERTOANY=TRUE AND
        CREATEXFERTOANY="Y" THEN
      DO
       FMPERFORM CREATE PREFERENCE LOC NEWPREFLOC ACCESS LOC AFTERLAST (CHECKPRIVS,0,FMERROR)
        DO
         SET ACCESSTYPE TO ACCESSTYPEXFERTOANY
        END
      END
    END
   IF FMERROR="" THEN
    POPUPMESSAGE(0,"User Successfully Created")
  END

 ELSE IF ACTIONREQUESTED=ACTIONEDITUSER THEN
  DO
   FMPERFORM REVISE PREFERENCE LOC PREFLOC(SELECTEDPREF) (CHECKPRIVS,0,FMERROR)
    DO
     SET HBUSERNAME TO UPPERCASE(NEWUSERNAME)
     SET LASTHBPWCHANGEDATE TO SYSTEMDATE
     SET PWDRESETPROBATION TO NEWPASSPROBNUM
     SET EMAILADDRESS TO NEWEMAILADDR
    END
   IF FMERROR="" THEN
    DO
     IF ALLOWXFERTOANY=TRUE AND
        CREATEXFERTOANY="Y" AND 
        PREFXFERANYLOC(SELECTEDPREF)=0 THEN
      DO
       FMPERFORM CREATE PREFERENCE LOC PREFLOC(SELECTEDPREF) ACCESS LOC AFTERLAST (CHECKPRIVS,0,FMERROR)
        DO
         SET ACCESSTYPE TO 3
        END
      END
     ELSE IF ALLOWXFERTOANY=TRUE AND
          CREATEXFERTOANY<>"Y" AND 
          PREFXFERANYLOC(SELECTEDPREF)<>0 THEN
      DO
       FMPERFORM DELETE PREFERENCE LOC PREFLOC(SELECTEDPREF) ACCESS LOC PREFXFERANYLOC(SELECTEDPREF) (CHECKPRIVS,0,FMERROR)
        DO
        END
      END
    END
   IF FMERROR="" THEN
    POPUPMESSAGE(0,"User Successfully Updated")
  END
 IF FMERROR<>"" THEN
  CALL ERRORHANDLER
END [PROCEDURE]

PROCEDURE DELETEUSERDIALOG
[* Dialog that confirms user deletion.
*]
 DIALOGSTART("Banno Enrollment - Delete User",200%,0)
 DIALOGINTROTEXT("Deleting User "+PREFUSER(SELECTEDPREF)+"!")
 DIALOGINTROTEXT("THIS CANNOT BE UNDONE!")
 DIALOGPROMPTYESNO("Continue Deletion Of "+PREFUSER(SELECTEDPREF)+"?",FALSE)
 DIALOGDISPLAY
 REALLYDELETE=ENTERYESNO("Continue Deletion Of "+PREFUSER(SELECTEDPREF)+"?","")
 DIALOGCLOSE
END [PROCEDURE]

PROCEDURE DELETEUSERFM
[* File maintenance and error handling for user deletion.
*]
 IF REALLYDELETE="Y" THEN
  DO
   FMPERFORM DELETE PREFERENCE LOC PREFLOC(SELECTEDPREF)(CHECKPRIVS,0,FMERROR)
    DO
    END
   IF FMERROR<>"" THEN 
    CALL ERRORHANDLER
   ELSE IF FMERROR="" THEN
    POPUPMESSAGE(0,"User Successfully Deleted")
  END
 ELSE IF REALLYDELETE<>"Y" THEN
  DO
   POPUPMESSAGE(0,"Deletion Canceled")
  END
END [PROCEDURE]

PROCEDURE ADDEDITXACCTDIALOG
[* Dialog that prompts user for information needed when creating
** or editing a cross account.
*]
 IF ACTIONREQUESTED=ACTIONEDITXACCT AND
    SELECTEDACCESS=0 THEN
  DO
   CALL GETACCESSRECORDS
   CALL SELECTACCESS
  END
 IF ((ACTIONREQUESTED=ACTIONEDITXACCT AND
      SELECTEDACCESS<>0) OR 
     (ACTIONREQUESTED=ACTIONADDXACCT)) THEN
  DO

   IF ACTIONREQUESTED=ACTIONADDXACCT THEN
    DO
     DIALOGSTART("Banno Enrollment - Add Cross Account",200%,0)
     IF NEWACCESSTYPE<>0 THEN
      DIALOGPROMPTCOMBOSTART("Access Type",NEWACCESSTYPE)
     ELSE IF NEWACCESSTYPE=0 THEN
      DIALOGPROMPTCOMBOSTART("Access Type",0)
     DIALOGPROMPTCOMBOOPTION(ACCESSTYPEXFEROUT,"Transfer Out")
     DIALOGPROMPTCOMBOOPTION(ACCESSTYPEXFERIN,"Transfer In")
     DIALOGPROMPTCOMBOOPTION(ACCESSTYPEALTACCT,"Alternate Account")
     DIALOGPROMPTCOMBOEND
     IF NEWACCESSACCT<>"" THEN
      DIALOGPROMPTCHAR("Account Number",10,NEWACCESSACCT)
     ELSE IF NEWACCESSACCT="" THEN
      DIALOGPROMPTCHAR("Account Number",10,"")
    END
   ELSE IF ACTIONREQUESTED=ACTIONEDITXACCT THEN
    DO
     DIALOGSTART("Banno Enrollment - Edit Cross Account",200%,0)
     DIALOGINTROTEXT("Updating Cross Account "+ACCESSACCT(SELECTEDACCESS))
    END
   IF NEWACCESSIDTYPE<>0 THEN
    DIALOGPROMPTCOMBOSTART("ID Type",NEWACCESSIDTYPE)
   ELSE IF NEWACCESSIDTYPE=0 THEN
    DIALOGPROMPTCOMBOSTART("ID Type",ACCESSIDTYPE(SELECTEDACCESS))
   DIALOGPROMPTCOMBOOPTION(ACCESSIDTYPESHARE,"Share")
   DIALOGPROMPTCOMBOOPTION(ACCESSIDTYPELOAN,"Loan")
   DIALOGPROMPTCOMBOOPTION(ACCESSIDTYPEUNRESTRICTED,"Unrestricted")
   DIALOGPROMPTCOMBOEND
   IF NEWACCESSID<>"" THEN
    DIALOGPROMPTCHAR("ID",4,NEWACCESSID)
   ELSE IF NEWACCESSID="" THEN
    DIALOGPROMPTCHAR("ID",4,ACCESSID(SELECTEDACCESS))
   DIALOGDISPLAY
   IF ACTIONREQUESTED=ACTIONADDXACCT THEN
    DO
     NEWACCESSTYPE=ENTERNUMBER("Access Type",0)
     NEWACCESSACCT=ENTERCHARACTER("Account Number",10,"")
    END
   ELSE IF ACTIONREQUESTED=ACTIONEDITXACCT THEN
    DO
     NEWACCESSACCT=ACCESSACCT(SELECTEDACCESS)
    END
   NEWACCESSIDTYPE=ENTERNUMBER("ID Type",ACCESSIDTYPE(SELECTEDACCESS))
   NEWACCESSID=ENTERCHARACTER("ID",4,ACCESSID(SELECTEDACCESS))
   DIALOGCLOSE

   IF ((ACTIONREQUESTED=ACTIONADDXACCT AND
        NEWACCESSTYPE=ACCESSTYPEALTACCT) OR
       (ACTIONREQUESTED=ACTIONEDITXACCT AND
        ACCESSTYPE(SELECTEDACCESS)=ACCESSTYPEALTACCT)) THEN
    DO
     DIALOGSTART("Banno Enrollment - Cross Account Permissions",200%,1)
     IF NEWACCESSWD<>0 THEN
      DIALOGPROMPTCOMBOSTART("Enable Withdrawals",NEWACCESSWD)
     ELSE IF NEWACCESSWD=0 THEN
      DIALOGPROMPTCOMBOSTART("Enable Withdrawals",ACCESSWD(SELECTEDACCESS))
     DIALOGPROMPTCOMBOOPTION(FALSE,"No Withdrawals Allowed")
     DIALOGPROMPTCOMBOOPTION(TRUE,"Withdrawals Allowed")
     DIALOGPROMPTCOMBOEND
     IF NEWACCESSDEP<>0 THEN
      DIALOGPROMPTCOMBOSTART("Enable Deposits",NEWACCESSDEP)
     ELSE IF NEWACCESSDEP=0 THEN
      DIALOGPROMPTCOMBOSTART("Enable Deposits",ACCESSDEP(SELECTEDACCESS))
     DIALOGPROMPTCOMBOOPTION(FALSE,"No Deposits Allowed")
     DIALOGPROMPTCOMBOOPTION(TRUE,"Deposits Allowed")
     DIALOGPROMPTCOMBOEND
     IF NEWACCESSINQ<>0 THEN
      DIALOGPROMPTCOMBOSTART("Enable Inquiries",NEWACCESSINQ)
     ELSE IF NEWACCESSINQ=0 THEN
      DIALOGPROMPTCOMBOSTART("Enable Inquiries",ACCESSINQ(SELECTEDACCESS))
     DIALOGPROMPTCOMBOOPTION(FALSE,"No Inquiries Allowed")
     DIALOGPROMPTCOMBOOPTION(TRUE,"Inquiries Allowed")
     DIALOGPROMPTCOMBOEND
     IF NEWACCESSFM<>0 THEN
      DIALOGPROMPTCOMBOSTART("Enable FM",NEWACCESSFM)
     ELSE IF NEWACCESSFM=0 THEN
      DIALOGPROMPTCOMBOSTART("Enable FM",ACCESSFM(SELECTEDACCESS))
     DIALOGPROMPTCOMBOOPTION(FALSE,"No FM Allowed")
     DIALOGPROMPTCOMBOOPTION(TRUE,"FM Allowed")
     DIALOGPROMPTCOMBOEND
     DIALOGDISPLAY
     NEWACCESSWD=ENTERNUMBER("Enable Withdrawals",ACCESSWD(SELECTEDACCESS))
     NEWACCESSDEP=ENTERNUMBER("Enable Deposits",ACCESSDEP(SELECTEDACCESS))
     NEWACCESSINQ=ENTERNUMBER("Enable Inquiries",ACCESSINQ(SELECTEDACCESS))
     NEWACCESSFM=ENTERNUMBER("Enable FM",ACCESSFM(SELECTEDACCESS))
     DIALOGCLOSE
    END
  END
END [PROCEDURE]

PROCEDURE VALIDATEXACCT
[* Validates account number and Share/Loan ID when creating
** or editing a cross account.
*]
 ACCTFOUND=FALSE
 NEWACCESSACCT=REPEATCHR("0",10-LENGTH(NEWACCESSACCT))+NEWACCESSACCT
 IF NEWACCESSID<>"" THEN
  NEWACCESSID=REPEATCHR("0",IDLENGTH-LENGTH(NEWACCESSID))+NEWACCESSID
 FOR ACCOUNT NEWACCESSACCT
  DO
   IF NEWACCESSIDTYPE=ACCESSIDTYPEUNRESTRICTED THEN
    DO
     ACCTFOUND=TRUE
    END
   ELSE IF NEWACCESSIDTYPE=ACCESSIDTYPESHARE THEN
    DO
     FOR EACH SHARE WITH (SHARE:ID=NEWACCESSID AND
                          SHARE:CLOSEDATE='--/--/--')
      DO
       ACCTFOUND=TRUE
      END
    END
   ELSE IF NEWACCESSIDTYPE=ACCESSIDTYPELOAN THEN
    DO
     FOR EACH LOAN WITH (LOAN:ID=NEWACCESSID AND
                         LOAN:CLOSEDATE='--/--/--')
      DO
       ACCTFOUND=TRUE
      END
    END
  END
 IF ACCTFOUND=FALSE THEN
  FMERROR="Account/ID Not Found"
END [PROCEDURE]

PROCEDURE ADDEDITXACCTFM
[* File maintenance and error handling for cross account creation
** or deletion.
*]
 IF NEWACCESSIDTYPE=ACCESSIDTYPEUNRESTRICTED THEN
  NEWACCESSID=""

 IF NEWACCESSWD=FALSE AND
    NEWACCESSDEP=FALSE AND
    NEWACCESSINQ=FALSE AND
    NEWACCESSFM=FALSE AND
    NEWACCESSTYPE=ACCESSTYPEALTACCT
  THEN
   FMERROR="At Least one permission is required"

 IF (FMERROR="" AND 
    (ACTIONREQUESTED=ACTIONEDITXACCT AND
     SELECTEDACCESS<>0) OR
     ACTIONREQUESTED=ACTIONADDXACCT) THEN
  CALL VALIDATEXACCT

 IF ACTIONREQUESTED=ACTIONEDITXACCT AND
    SELECTEDACCESS<>0 AND FMERROR="" THEN 
  DO
   FMPERFORM REVISE PREFERENCE LOC PREFLOC(SELECTEDPREF) ACCESS LOC ACCESSLOC(SELECTEDACCESS)(CHECKPRIVS,0,FMERROR)
    DO
     SET IDTYPE TO NEWACCESSIDTYPE
     SET ID TO NEWACCESSID
     SET ENABLEWITHDRAWAL TO NEWACCESSWD
     SET ENABLEDEPOSIT TO NEWACCESSDEP
     SET ENABLEINQUIRY TO NEWACCESSINQ
     SET ENABLEFM TO NEWACCESSFM
    END
   IF FMERROR="" THEN
    POPUPMESSAGE(0,"Cross Account Preference Access Record Successfully Updated")
  END
 ELSE IF ACTIONREQUESTED=ACTIONADDXACCT AND
         FMERROR="" THEN
  DO
   FMPERFORM CREATE PREFERENCE LOC PREFLOC(SELECTEDPREF) ACCESS LOC AFTERLAST(CHECKPRIVS,0,FMERROR)
    DO
     SET ACCESSTYPE TO NEWACCESSTYPE
     SET ACCOUNTNUMBER TO NEWACCESSACCT
     SET IDTYPE TO NEWACCESSIDTYPE
     SET ID TO NEWACCESSID
     SET ENABLEWITHDRAWAL TO NEWACCESSWD
     SET ENABLEDEPOSIT TO NEWACCESSDEP
     SET ENABLEINQUIRY TO NEWACCESSINQ
     SET ENABLEFM TO NEWACCESSFM
    END
   IF FMERROR="" THEN
    POPUPMESSAGE(0,"Cross Account Preference Access Record Successfully Created")
  END
 IF FMERROR<>"" THEN
  CALL ERRORHANDLER
END [PROCEDURE]

PROCEDURE GETACCESSRECORDS
[* Collects needed data from each HB preference access record on
** current account.
*]
 FOR EACH PREFERENCE WITH (PREFERENCE:LOCATOR=PREFLOC(SELECTEDPREF))
  DO
   FOR EACH PREFERENCE ACCESS WITH (PREFERENCE ACCESS:ACCESSTYPE=ACCESSTYPEXFEROUT OR
                                    PREFERENCE ACCESS:ACCESSTYPE=ACCESSTYPEXFERIN OR
                                    PREFERENCE ACCESS:ACCESSTYPE=ACCESSTYPEALTACCT)
    DO
     ACCESSCOUNT=ACCESSCOUNT+1
     ACCESSLOC(ACCESSCOUNT)=PREFERENCE ACCESS:LOCATOR
     ACCESSTYPE(ACCESSCOUNT)=PREFERENCE ACCESS:ACCESSTYPE
     ACCESSACCT(ACCESSCOUNT)=PREFERENCE ACCESS:ACCOUNTNUMBER
     ACCESSIDTYPE(ACCESSCOUNT)=PREFERENCE ACCESS:IDTYPE
     ACCESSID(ACCESSCOUNT)=PREFERENCE ACCESS:ID
     ACCESSWD(ACCESSCOUNT)=PREFERENCE ACCESS:ENABLEWITHDRAWAL
     ACCESSDEP(ACCESSCOUNT)=PREFERENCE ACCESS:ENABLEDEPOSIT
     ACCESSINQ(ACCESSCOUNT)=PREFERENCE ACCESS:ENABLEINQUIRY
     ACCESSFM(ACCESSCOUNT)=PREFERENCE ACCESS:ENABLEFM
    END
  END
END [PROCEDURE]

PROCEDURE SELECTACCESS
[* Dialog that prompts user to choose cross account if more 
** than one HB preference access record is present.
*]
 IF ACCESSCOUNT=0 THEN
  DO
   POPUPMESSAGE(1,"No Cross Account Preference Access Records Available")
  END
 ELSE IF ACCESSCOUNT=1 THEN
  SELECTEDACCESS=1
 ELSE IF ACCESSCOUNT>1 THEN
  DO
   DIALOGSTART("Banno Enrollment - Choose Cross Account",200%,1)
   DIALOGPROMPTLISTSTART("Choose Access :",1)
   FOR ACCESSINDEX=1 TO ACCESSCOUNT
    DO
     CALL GETACCESSDESC
     DIALOGPROMPTLISTOPTION(ACCESSINDEX,ACCESSDESC)
    END
   DIALOGPROMPTLISTEND
   DIALOGDISPLAY
   SELECTEDACCESS=ENTERNUMBER("Choose Access :",1)
   DIALOGCLOSE
  END
END [PROCEDURE]

PROCEDURE GETACCESSDESC
[* Builds access descriptions to be used for prompting user
** when editing or deleting a preference access record.
*]
 ACCESSDESC=""
 IF ACCESSTYPE(ACCESSINDEX)=ACCESSTYPEXFEROUT THEN
  ACCESSDESC="Xfer out "
 ELSE IF ACCESSTYPE(ACCESSINDEX)=ACCESSTYPEXFERIN THEN
  ACCESSDESC="Xfer in " 
 ELSE  IF ACCESSTYPE(ACCESSINDEX)=ACCESSTYPEALTACCT THEN
  ACCESSDESC="Alt acct "
 
 ACCESSDESC=ACCESSDESC+ACCESSACCT(ACCESSINDEX)
 
 IF ACCESSIDTYPE(ACCESSINDEX)=ACCESSIDTYPESHARE THEN
  ACCESSDESC=ACCESSDESC+" Sh "+ACCESSID(ACCESSINDEX)
 ELSE IF ACCESSIDTYPE(ACCESSINDEX)=ACCESSIDTYPELOAN THEN
  ACCESSDESC=ACCESSDESC+" Ln "+ACCESSID(ACCESSINDEX)
 ELSE IF ACCESSIDTYPE(ACCESSINDEX)=ACCESSIDTYPEUNRESTRICTED THEN
  ACCESSDESC=ACCESSDESC+" Unrestricted"
END [PROCEDURE]

PROCEDURE DELETEXACCTDIALOG
[* Dialog that confirms preference access record deletion.
*]
 IF SELECTEDACCESS=0 THEN
  DO
   CALL GETACCESSRECORDS
   CALL SELECTACCESS
  END
 IF SELECTEDACCESS<>0 THEN
  DO
   DIALOGSTART("Banno Enrollment - Delete Cross Account",200%,0)
   DIALOGINTROTEXT("Deleting Cross Account "+ACCESSACCT(SELECTEDACCESS)+"!")
   DIALOGINTROTEXT("THIS CANNOT BE UNDONE!")
   DIALOGPROMPTYESNO("Continue Deletion Of "+ACCESSACCT(SELECTEDACCESS)+"?",FALSE)
   DIALOGDISPLAY
   REALLYDELETE=ENTERYESNO("Continue Deletion Of "+ACCESSACCT(SELECTEDACCESS)+"?","")
   DIALOGCLOSE
  END
END [PROCEDURE]

PROCEDURE DELETEXACCTFM
[* File maintenance and error handling for preference access record
** deletion.
*]
 IF SELECTEDACCESS<>0 THEN
  DO
   IF REALLYDELETE="Y" AND SELECTEDACCESS<>0 THEN
    DO
     FMPERFORM DELETE PREFERENCE LOC PREFLOC(SELECTEDPREF) ACCESS LOC ACCESSLOC(SELECTEDACCESS)(CHECKPRIVS,0,FMERROR)
      DO
      END
     IF FMERROR<>"" THEN 
      CALL ERRORHANDLER
     ELSE IF FMERROR="" THEN
      POPUPMESSAGE(0,"Cross Account Preference Access Record Successfully Deleted")
    END
   ELSE IF REALLYDELETE<>"Y" THEN
    DO
     POPUPMESSAGE(0,"Deletion Canceled")
    END
  END
END [PROCEDURE]

PROCEDURE ERRORHANDLER
[* Displays popup message with file maintenance errors.
*]
 POPUPMESSAGE(2,"FM Error : "+FMERROR)
END [PROCEDURE]
