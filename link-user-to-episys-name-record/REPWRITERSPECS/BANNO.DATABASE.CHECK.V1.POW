[*
**  PowerOn Name: BANNO.DATABASE.CHECK.V1.POW
**
**  Copyright 2020-2021 Jack Henry and Associates
**
**  This is a Banno service PowerOn
**
**  Banno is not responsible for any modifications to this file
**  made by unauthorized personnel.
**
**  Modification History: (be sure to update the last mod date in the SETUP div. as well)
**    Ver. 1.0.0  11/16/20 T. Kainz - Original Programming
**    Ver. 1.0.1  04/04/22 T. Kainz - Corrected Scenario 3 tracking record check & links check.
**                                    Added additional scenario check (scenario 0)
**                                    Added program info and debug info to JSON output.
**                                    Removed procedures not being NEEDED OR CALLED
**                                    Added additional documentation
**                                    Added scenario logic used to JSON output
**
**  DO NOT MODIFY THIS FILE UNLESS YOU KNOW WHAT YOU'RE DOING!
**
**  The purpose of this progrm is to connect a Banno member to a definitive name record
**  so the member can effect name record address changes.
**
**  The connection, when made, will be stored in the NetTeller tracking (type 08)
**     Preference Locator (TRACKING:USERCHAR12)
**     Banno User ID (TRACKING:USERCHAR13)
**     Member Number Link - 17 charcters - (TRACKING:USERCHAR14)
**     Member Address Number Link - 17 chracters - (TRACKING:USERCHAR15)
**
**  LOGIC FLOW
**
**   IF @RGSTATE="LINKTRACKING" (This is the existing member's' data passed back to the PowerOn)
**       @RGUSERNUM1 - Preference Locator
**       @RGUSERCHR1 - Name Types (from Banno setting)
**       @RGUSERCHR2 - Banno user ID
**       @RGUSERCHR3 - Banno user birthdate YYYYMMDD (Depending upon scenario - may be blank)
**                     birthdate
**       @RGUSERCHR4 - [blank]
**
**   IF @RGSTATE="CREATETRACKING" This is the new member's data passed back)
**       @RGUSERNUM1 - Preference Locator
**       @RGUSERCHR1 - Name Types (from Banno setting)
**       @RGUSERCHR2 - Banno user ID
**       @RGUSERCHR3 - Member number link
**       @RGUSERCHR4 - Address number link
**
**
** NEW MEMBER ENROLLMENT (CREATETRACKING State)
**
** 1. Check for existing tracking with matching ID and Pref Loc, return SUCCESS
** 2. Tracking 8 with matching ID and Pref Loc not found, Create tracking & return SUCCESS
**
** EXISTING MEMBER (LINKTRACKING State)
**
** 0. Check for existing tracking with matching Pref locator and with member and address
**    links but no Banno ID. If member and address links match any unexpired name record
**    then update tracking with Banno ID passed back. Return COMPLETE
**
** 1. If no tracking 08 found with matching Banno user #
**   a. If only 1 name record with valid name type, create tracking 08 with Banno user #,
**      Preference LOC, the member link number, and the address link number.  Return COMPLETE
**   b. If more than 1 name record with valid name type, create tracking with Banno user #,
**      Preference LOC.  Return COMPLETE WITH ERROR and add note "multiple valid name records
**      found"
**
** 2. If tracking 08 found with matching Banno user # but not matching Preference LOC…
**   a. W/1 valid name rec: revise tracking by changing Preference LOC, and adding the
**      member link number and the address link number (if available).  Return COMPLETE
**   b. W/more than 1 valid name rec: revise tracking by changing Preference LOC. Return
**      COMPLETE WITH ERROR and add note "multiple valid name records found"
**
** 3. If tracking 08 found with both matching Preference LOC and Banno user #
**   a. If both member link and address link number are blank AND only 1 name record with
**      valid name type, revise tracking 08 with the member link number and the address
**      link number (if available). Return COMPLETE.
**   b. If both member link and address link numbers are blank AND more than 1 name record
**      with valid name type, return COMPLETE WITH ERROR and add note "multiple valid name
**      records found"
**   c. If both member link and address link number are filled in, look for a Name record
**      with valid name type and matching both link numbers.
**     1. If both numbers are found in a single name record, return COMPLETE.
**     2. If no name records with either link numbers, remove both numbers from tracking 08.
**        Return COMPLETE WITH ERROR and add note "invalid name links removed from tracking 08"
**     3. If only member link matches
**       a. If new address link found, revise tracking 08 with address link # found. Return
**          COMPLETE
**       b. If no new address link # found, revise tracking 08 blanking out address link field.
**          Return COMPLETE WITH ERROR and add note "invalid address link removed from
**          tracking 08"
**     4. If only address link matches, revise tracking 08 blanking out both member link
**        and address link fields.  Return COMPLETE WITH ERROR and add note "invalid member
**        and address links removed from tracking 08.
**
*]

SYMCONNECT
STATELESS

TARGET=ACCOUNT

DEFINE
 #INCLUDE "RD.GETDATA.DEF"
 #INCLUDE "RB.LISTEXPAND.DEF"

 BNODEBUGMSGMAX            = 99
 DATENULL                  = '--/--/--'
 DEBUGMODEOFF              = 0
 DEBUGMODEON               = 1
 FALSE                     = 0
 FMSUCCESSFUL              = 1
 FMUNCHANGED               = 3
 FMUNSUCCESSFUL            = 2
 INDENTMAX                 = 9
 STATECREATETRACKING       = "CREATETRACKING"
 STATEEND                  = "STATEEND"
 STATELINKTRACKING         = "LINKTRACKING"
 TRUE                      = 1
 VALIDSOURCECODELIST       = "ABCDEFGHIJKLNOPRSTVW"

 ACCTFOUND                 = NUMBER
 ACCTWARNINGFOUND          = NUMBER
 ADDRESSLINECOUNT          = NUMBER
 ADDRLINKFOUND             = NUMBER
 BANNOMEMBERNUM            = CHARACTER
 BANNOUSERBD               = DATE
 BANNOUSERID               = CHARACTER
 BASESHAREFOUND            = NUMBER
 BASESID                   = CHARACTER
 BNODEBUGCOUNT             = NUMBER
 BNODEBUGMSG               = CHARACTER
 BNODEBUGMSGLIST           = CHARACTER ARRAY(99)
 BOOLEANCHR                = CHARACTER ARRAY(1)
 CHR                       = NUMBER
 CHRVAL                    = NUMBER
 COMMAPOS                  = NUMBER
 DEBUGLOOP                 = NUMBER
 DEBUGMODE                 = NUMBER
 DONE                      = NUMBER
 ERRORCODE                 = NUMBER
 ERRORDETAIL               = CHARACTER ARRAY(99)
 ERRORDETAILOFFSET         = NUMBER
 ERRORMSG                  = CHARACTER
 FMERROR                   = CHARACTER
 FMRESULTSCHR              = CHARACTER ARRAY(3)
 FMTRACKINGLOCATOR         = NUMBER
 FMUPDATEERRORTRACKING     = NUMBER
 FOUND                     = NUMBER
 FOUNDADDRLINK             = CHARACTER
 FOUNDMBRLINK              = CHARACTER
 FOUNDUSERID               = CHARACTER
 IDLENGTH                  = NUMBER
 INDENT                    = CHARACTER ARRAY(9)
 INVALIDCONFIGPARAMS       = NUMBER
 LASTMODDATE               = DATE
 LASTMODTIME               = CHARACTER
 LFERROR                   = CHARACTER
 LFLINE                    = CHARACTER
 LFNUMBER                  = NUMBER
 MAXCHRVALUE               = 255
 MAXSLTYPES                = NUMBER
 MAXWARNINGTYPES           = NUMBER
 MBRLINKFOUND              = NUMBER
 MEMBERNUM                 = CHARACTER
 NAMEBYBDFOUND             = NUMBER
 NAMEBYLINKFOUND           = NUMBER
 NAMECOUNT                 = NUMBER
 NAMEFOUND                 = NUMBER
 NAMEFOUNDINDEX            = NUMBER
 NAMELISTADDRLINK          = CHARACTER ARRAY(99)
 NAMELISTCOUNT             = NUMBER
 NAMELISTLOC               = NUMBER ARRAY(99)
 NAMELISTLOOP              = NUMBER
 NAMELISTMAX               = 99
 NAMELISTMBRLINK           = CHARACTER ARRAY(99)
 NAMELOC                   = NUMBER
 NAMELOOP                  = NUMBER
 NAMETYPELIST              = CHARACTER
 NAMETYPESMAX              = 53
 NEWSTATUS                 = NUMBER
 NOTECHR                   = CHARACTER
 NOTECHR1                  = CHARACTER
 NOTEERROR                 = CHARACTER
 NOTEEXPIREDAYS            = NUMBER
 NOTEFOUND                 = NUMBER
 NOTELOC                   = NUMBER
 NOTETEXT1                 = CHARACTER
 NOTETEXT2                 = CHARACTER
 NOTETEXT3                 = CHARACTER
 NOTETEXT4                 = CHARACTER
 NOTETEXT5                 = CHARACTER
 NOTETEXT6                 = CHARACTER
 NOTETEXT7                 = CHARACTER
 NOTETEXT8                 = CHARACTER
 NTID                      = CHARACTER
 PARAMAF1FALSE             = NUMBER
 PARAMAF1TRUE              = NUMBER
 PARAMCHR                  = CHARACTER
 PARAMCUSTOMTERMLINES      = NUMBER
 PARAMCUSTOMTERMLINESMAX   = 99
 PARAMCUSTOMTERMS          = CHARACTER ARRAY(99)
 PARAMFEEDISCL             = CHARACTER ARRAY(99)
 PARAMFEEDISCLLINES        = NUMBER
 PARAMNAME                 = CHARACTER
 PARAMREVOKEINST           = CHARACTER ARRAY(9)
 PARAMREVOKEINSTLINES      = NUMBER
 PARAMREVOKEINSTLINESMAX   = 9
 PARAMSC1FALSE             = CHARACTER
 PARAMSC1TRUE              = CHARACTER
 PARAMSHARETRACKING        = NUMBER
 PARAMUPDATEANDF           = NUMBER
 PARAMVALIDATIONERROR      = NUMBER
 PARAMVALIDATIONERRORCHR   = CHARACTER
 PARAMVALIDNAMETYPESLIST   = CHARACTER
 PARAMVALIDSHARETYPES      = CHARACTER
 PARAMVALUE                = CHARACTER
 PARAMWARNINGSACCT         = CHARACTER
 PARAMWARNINGSSHARE        = CHARACTER
 POS                       = NUMBER
 PREFERENCEFOUND           = NUMBER
 PREFERENCELOCFOUND        = NUMBER
 PREFLOC                   = NUMBER
 PREFLOCFOUND              = NUMBER
 PRIMARYNAMELOC            = NUMBER
 PROGRAMVERSION            = CHARACTER
 Q                         = CHARACTER
 READCONFIGERROR           = NUMBER
 READCONFIGERRORMSG        = CHARACTER
 SLAWARNINGFOUND           = NUMBER
 SLDESCRIPTION             = CHARACTER
 SLFOUND                   = NUMBER
 SLID                      = CHARACTER
 SLIDLEN                   = NUMBER
 SLTYPE                    = CHARACTER
 SYSTEMMEMOMODE            = NUMBER
 TARGETMBRADDRLINK         = CHARACTER
 TARGETMBRNUMLINK          = CHARACTER
 TARGETNAMELOC             = NUMBER
 TARGETPREFLOC             = NUMBER
 TARGETPREFLOCCHR          = CHARACTER
 TARGETUSERBIRTHDATE       = DATE
 TARGETUSERID              = CHARACTER
 TEMPLOC                   = NUMBER
 TMPCHR                    = CHARACTER
 TMPINDEX                  = NUMBER
 TMPLOOP                   = NUMBER
 TMPNUM                    = NUMBER
 TMPPREFLOC                = NUMBER
 TMPTARGETADDRNUMLINK      = CHARACTER
 TMPTARGETMBRNUMLINK       = CHARACTER
 TMPTEXT                   = CHARACTER
 TMPTEXTLOOP               = NUMBER
 TMPVAL                    = NUMBER
 TRACKINGCOMPLETE          = NUMBER
 TRACKINGFOUND             = NUMBER
 TRACKINGFOUNDINDEX        = NUMBER
 TRACKINGFOUNDLOC          = NUMBER
 TRACKINGLISTADDRLINK      = CHARACTER ARRAY(99)
 TRACKINGLISTCOUNT         = NUMBER
 TRACKINGLISTLOC           = NUMBER ARRAY(99)
 TRACKINGLISTLOOP          = NUMBER
 TRACKINGLISTMAX           = 99
 TRACKINGLISTMBRID         = CHARACTER ARRAY(99)
 TRACKINGLISTMBRLINK       = CHARACTER ARRAY(99)
 TRACKINGLISTPREFLOC       = NUMBER ARRAY(99)
 TRACKINGLOC               = NUMBER
 TRACKINGLOCFOUND          = NUMBER
 TRACKINGLOOP              = NUMBER
 TRANERROR                 = CHARACTER
 VALIDACCT                 = NUMBER
 VALIDCHARS                = NUMBER ARRAY(999)
 VALIDCHRINPUT1            = CHARACTER
 VALIDNAMESBYORDER         = NUMBER ARRAY(99)
 VALIDNAMESBYTYPE          = NUMBER ARRAY(99)
 VALIDNAMETYPECOUNT        = NUMBER
 VALIDNAMETYPESCOUNT       = NUMBER
 VALIDSHARETYPES           = NUMBER ARRAY(9999)
 VALIDSLTYPE               = NUMBER
 WARNINGFOUND              = NUMBER
 WARNINGSACCT              = NUMBER ARRAY(999)
 WARNINGSSHARE             = NUMBER ARRAY(999)
 DEBUGMODEDAYS             = NUMBER
 SCENARIODETAIL            = CHARACTER
 BNOTRUEFALSECHR           = CHARACTER ARRAY(1)
 NEWLOC                    = NUMBER
 BNOALLOWINMEMOMODE        = NUMBER
END [DEFINE]

SETUP
 Q=CTRLCHR(34)
 BNOTRUEFALSECHR(FALSE)="FALSE"
 BNOTRUEFALSECHR(TRUE)="TRUE"
 NOTEEXPIREDAYS=30
 PROGRAMVERSION="1.0.1"
 LASTMODDATE='04/04/22'
 LASTMODTIME="16:00 MT"
 DEBUGMODEDAYS=120
 FOR TMPLOOP=1 TO INDENTMAX
  DO
   INDENT(TMPLOOP)=REPEATCHR(" ",TMPLOOP*2)
  END
 DEBUGMODE=DEBUGMODEOFF
 IF LASTMODDATE+DEBUGMODEDAYS>SYSTEMDATE THEN
  DEBUGMODE=DEBUGMODEON
 BNOALLOWINMEMOMODE=FALSE
END [SETUP]

PRINT TITLE="BANNO.DATABASE.CHECK.V1.POW"

 CALL BNOMEMOMODECHECK
 IF ERRORCODE=0 THEN
  CALL GETNAMETYPES
 IF ERRORCODE=0 THEN
  DO
   CALL POLLNAMES
   CALL POLLTRACKING
   CALL GETRGVALUES
  END

 NAMELOC=0
 NAMEFOUND=FALSE
 FOUNDMBRLINK=""
 FOUNDADDRLINK=""
 TRACKINGLOC=0
 TRACKINGFOUND=FALSE
 NAMEBYLINKFOUND=FALSE
 TRACKINGCOMPLETE=FALSE
 SCENARIODETAIL=""

[* If a tracking 08 with the matching Banno user number, preference
** locator (USERCHAR 12), member link number and address link number
*]
 IF ERRORCODE=0 AND
    @RGSTATE=STATECREATETRACKING THEN
  DO

[****************************************** CREATETRACKING State ************************************]
   DONE=FALSE
   TRACKINGFOUNDLOC=0

[* Scenario #1: Check for existing tracking with matching ID and Pref Loc, return SUCCESS
*]

   IF DONE=FALSE AND
      TRACKINGFOUNDLOC=0 AND
      TRACKINGLISTCOUNT>0 THEN
    DO
     FOR TRACKINGLISTLOOP=1 TO TRACKINGLISTCOUNT
      DO
       IF TRACKINGFOUNDLOC=0 AND
          TRACKINGLISTPREFLOC(TRACKINGLISTLOOP)=TARGETPREFLOC AND
          TRACKINGLISTMBRID(TRACKINGLISTLOOP)=TARGETUSERID THEN
        DO
         SCENARIODETAIL="CREATETRACKING Logic Scenario #1 applied"
         TRACKINGFOUNDLOC=TRACKINGLISTLOC(TRACKINGLISTLOOP)
         CALL SENDCOMPLETE
         DONE=TRUE
        END
      END
    END

[* Scenario #2: Tracking 8 with matching ID and Pref Loc not found, Create tracking & return SUCCESS
*]
   IF DONE=FALSE AND
      TRACKINGFOUNDLOC=0 THEN
    DO
     SCENARIODETAIL="CREATETRACKING Logic Scenario #2 applied"
     CALL CREATETRACKING
     IF FMERROR="" THEN
      CALL SENDCOMPLETE
     ELSE
      CALL SENDCOMPLETEERROR
     DONE=TRUE
    END
  END [ERRORCODE=0 AND @RGSTATE=STATECREATETRACKING]

[******************************************* LINKTRACKING State *************************************]

 IF ERRORCODE=0 AND
    @RGSTATE=STATELINKTRACKING THEN
  DO
   DONE=FALSE

[* Scenario #0: Check for existing tracking with matching Pref locator code. If the member num link
** and the address num link match values in existing, unexpired, name records on the account
** then update the existing tracking record with the Banno member ID passed back.
*]
   IF TRACKINGLISTCOUNT>0 THEN
    DO
     FOR TRACKINGLISTLOOP=1 TO TRACKINGLISTCOUNT
      DO
       IF DONE=FALSE AND
          TRACKINGLISTPREFLOC(TRACKINGLISTLOOP)=TARGETPREFLOC AND
          TRACKINGLISTMBRID(TRACKINGLISTLOOP)="" THEN
        DO
         MBRLINKFOUND=FALSE
         ADDRLINKFOUND=FALSE
         TARGETMBRNUMLINK=TRACKINGLISTMBRLINK(TRACKINGLISTLOOP)
         TARGETMBRADDRLINK=TRACKINGLISTADDRLINK(TRACKINGLISTLOOP)
         FOR ACCOUNT ACCOUNT:NUMBER
          DO
           FOR EACH NAME WITH (NAME:EXPIRATIONDATE=DATENULL OR
                               NAME:EXPIRATIONDATE>SYSTEMDATE)
            DO
             IF NAME:MEMBERNUMLINK=TARGETMBRNUMLINK THEN
              MBRLINKFOUND=TRUE
             IF NAME:MBRADDRNUMLINK=TARGETMBRADDRLINK THEN
              ADDRLINKFOUND=TRUE
            END UNTIL (MBRLINKFOUND=TRUE AND ADDRLINKFOUND=TRUE)
          END

         IF (MBRLINKFOUND=TRUE AND ADDRLINKFOUND=TRUE) THEN
          DO
           SCENARIODETAIL="LINKTRACKING Logic Scenario #0 applied"
           TRACKINGFOUNDLOC=TRACKINGLISTLOC(TRACKINGLISTLOOP)
           CALL REVISETRACKING
           DONE=TRUE
           IF FMERROR="" THEN
            CALL SENDCOMPLETE
           ELSE
            CALL SENDCOMPLETEERROR
           DONE=TRUE
          END
        END [DONE=FALSE AND TRACKINGLISTPREFLOC(TRACKINGLISTLOOP)=TARGETPREFLOC...]
      END [FOR TRACKINGLISTLOOP=1 TO TRACKINGLISTCOUNT]
    END [IF TRACKINGLISTCOUNT>0]

[* Scenario #1: If no tracking 08 found with matching Banno user #
*]
   IF DONE=FALSE THEN
    DO
     TRACKINGFOUNDLOC=0
     IF TRACKINGLISTCOUNT>0 THEN
      DO
       FOR TRACKINGLISTLOOP=1 TO TRACKINGLISTCOUNT
        DO
         IF TRACKINGFOUNDLOC=0 AND
            TRACKINGLISTMBRID(TRACKINGLISTLOOP)=TARGETUSERID THEN
          DO
           TRACKINGFOUNDLOC=TRACKINGLISTLOC(TRACKINGLISTLOOP)
          END
        END
      END [IF TRACKINGLISTCOUNT>0]

     IF TRACKINGFOUNDLOC=0 THEN
      DO
[* 1.a If only 1 name record with valid name type, create tracking 08 with Banno user #,
**     Preference LOC, the member link number, and the address link number.  Return success.
*]
       IF NAMELISTCOUNT=1 THEN
        DO
         SCENARIODETAIL="LINKTRACKING Logic Scenario #1.a applied"
         TARGETMBRNUMLINK=NAMELISTMBRLINK(1)
         TARGETMBRADDRLINK=NAMELISTADDRLINK(1)
         CALL CREATETRACKING
         IF FMERROR="" THEN
          CALL SENDCOMPLETE
         ELSE
          CALL SENDCOMPLETEERROR
        END
       ELSE
[* 1.b If more than 1 name record with valid name type, create tracking with Banno user #,
**     Preference LOC.  Return COMPLETE WITH ERROR and add note "multiple valid name records found"
*]
        DO
         SCENARIODETAIL="LINKTRACKING Logic Scenario #1.b applied"
         TARGETMBRNUMLINK=""
         TARGETMBRADDRLINK=""
         CALL CREATETRACKING
         NOTECHR="multiple valid name records found"
         NOTECHR1=""
         CALL CREATENOTERECORD
         CALL SENDCOMPLETEERROR
        END
       DONE=TRUE
      END [IF TRACKINGFOUNDLOC=0]
    END [IF DONE=FALSE]

[* Scenario #2:  If tracking 08 found with matching Banno user # but not matching Preference LOC:
*]
   IF DONE=FALSE THEN
    DO
     TRACKINGFOUNDLOC=0
     IF TRACKINGLISTCOUNT>0 THEN
      DO
       FOR TRACKINGLISTLOOP=1 TO TRACKINGLISTCOUNT
        DO
         IF TRACKINGFOUNDLOC=0 AND
          TRACKINGLISTMBRID(TRACKINGLISTLOOP)=TARGETUSERID AND
          TRACKINGLISTPREFLOC(TRACKINGLISTLOOP)<>TARGETPREFLOC THEN
          DO
           TRACKINGFOUNDLOC=TRACKINGLISTLOC(TRACKINGLISTLOOP)
          END
        END
      END [IF TRACKINGLISTCOUNT>0]

     IF TRACKINGFOUNDLOC>0 THEN
      DO
[* 2.a w/1 valid name rec: revise tracking by changing Preference LOC, and adding
**     the member link number and the address link number (if available).  Return SUCCESS
*]
       IF NAMELISTCOUNT=1 THEN
        DO
         SCENARIODETAIL="LINKTRACKING Logic Scenario #2.a applied"
         TARGETMBRNUMLINK=NAMELISTMBRLINK(1)
         TARGETMBRADDRLINK=NAMELISTADDRLINK(1)
         CALL REVISETRACKING
         IF FMERROR="" THEN
          CALL SENDCOMPLETE
         ELSE
          CALL SENDCOMPLETEERROR
        END
       ELSE
[* 2.b. w/more than 1 valid name rec: revise tracking by changing Preference LOC and clearing out
**      both the member and the address number links. Return COMPLETE WITH ERROR and add note
**      "multiple valid name records found"
*]
        DO
         SCENARIODETAIL="LINKTRACKING Logic Scenario #2.b applied"
         TARGETMBRNUMLINK=""
         TARGETMBRADDRLINK=""
         CALL REVISETRACKING

         NOTECHR="multiple valid name records found"
         NOTECHR1=""

         CALL CREATENOTERECORD
         CALL SENDCOMPLETEERROR
        END
       DONE=TRUE
      END [IF TRACKINGFOUNDLOC>0 - Scenario 2]
    END [IF DONE=FALSE - Scenario 2]

[* Scenario #3: If tracking 08 found with both matching Preference LOC and Banno user #
*]
   IF DONE=FALSE THEN
    DO
     TRACKINGFOUNDLOC=0
     TRACKINGFOUNDINDEX=0
     IF TRACKINGLISTCOUNT>0 THEN
      DO
       FOR TRACKINGLISTLOOP=1 TO TRACKINGLISTCOUNT
        DO
         IF TRACKINGFOUNDLOC=0 AND
            TRACKINGLISTPREFLOC(TRACKINGLISTLOOP)=TARGETPREFLOC AND
            TRACKINGLISTMBRID(TRACKINGLISTLOOP)=TARGETUSERID THEN
          DO
           TRACKINGFOUNDLOC=TRACKINGLISTLOC(TRACKINGLISTLOOP)
           TRACKINGFOUNDINDEX=TRACKINGLISTLOOP
          END
        END
      END

     IF TRACKINGFOUNDLOC>0 THEN
      DO
[* 3.a. If both member link and address link number are blank AND only 1 name record with
**      valid name type, revise tracking 08 with the member link number and the address
**      link number (if available).  Return success.
*]
       IF DONE=FALSE THEN
        DO
         IF TRACKINGLISTMBRLINK(TRACKINGFOUNDINDEX)="" AND
            TRACKINGLISTADDRLINK(TRACKINGFOUNDINDEX)="" AND
            NAMELISTCOUNT=1 THEN
          DO
           SCENARIODETAIL="LINKTRACKING Logic Scenario #3.a applied"
           TARGETMBRNUMLINK=NAMELISTMBRLINK(1)
           TARGETMBRADDRLINK=NAMELISTADDRLINK(1)
           CALL REVISETRACKING
           IF FMERROR="" THEN
            CALL SENDCOMPLETE
           ELSE
            CALL SENDCOMPLETEERROR
           DONE=TRUE
          END
        END [IF DONE=FALSE - Scenario 3.a]

[* 3.b. If both member link and address link numbers are blank AND more than 1 name record
**      with valid name type, return COMPLETE WITH ERROR and add note "multiple valid name
**      records found"
*]
       IF DONE=FALSE THEN
        DO
         IF TRACKINGLISTMBRLINK(TRACKINGFOUNDINDEX)="" AND
            TRACKINGLISTADDRLINK(TRACKINGFOUNDINDEX)="" AND
            NAMELISTCOUNT>1 THEN
          DO
           SCENARIODETAIL="LINKTRACKING Logic Scenario #3.b applied"
           NOTECHR="multiple valid name records found"
           NOTECHR1=""
           CALL CREATENOTERECORD
           CALL SENDCOMPLETEERROR
           DONE=TRUE
          END
        END [IF DONE=FALSE - Scenario 3.b]

[* 3.c. If both member link and address link number are filled in, look for a Name record
**      with valid name type and matching both link numbers.
*]
       IF DONE=FALSE THEN
        DO
         IF TRACKINGLISTMBRLINK(TRACKINGFOUNDINDEX)<>"" AND
            TRACKINGLISTADDRLINK(TRACKINGFOUNDINDEX)<>"" THEN
          DO
           NAMEFOUNDINDEX=0
          FOR NAMELISTLOOP=1 TO NAMELISTCOUNT
            DO
             IF NAMELISTMBRLINK(NAMELISTLOOP)=TRACKINGLISTMBRLINK(TRACKINGFOUNDINDEX) AND
                NAMELISTADDRLINK(NAMELISTLOOP)=TRACKINGLISTADDRLINK(TRACKINGFOUNDINDEX) THEN
              DO
               NAMEFOUNDINDEX=NAMELISTLOOP
               NAMELISTLOOP=NAMELISTCOUNT
              END
            END [FOR NAMELISTLOOP=1 TO NAMELISTCOUNT]
[* 3.c.1. If both numbers are found in a single name record, return success.
*]
           IF NAMEFOUNDINDEX>0 THEN
            DO
             SCENARIODETAIL="LINKTRACKING Logic Scenario #3.c.1 applied"
             CALL SENDCOMPLETE
             DONE=TRUE
            END

[* 3.c.2. If no name records with either link numbers, remove both numbers from tracking 08.
**        Return COMPLETE WITH ERROR and add note "invalid name links removed from tracking 08"
*]
           IF DONE=FALSE THEN
            DO
             MBRLINKFOUND=FALSE
             ADDRLINKFOUND=FALSE
             FOR NAMELISTLOOP=1 TO NAMELISTCOUNT
              DO
               IF NAMELISTMBRLINK(NAMELISTLOOP)=TRACKINGLISTMBRLINK(TRACKINGFOUNDINDEX) THEN
                MBRLINKFOUND=TRUE
               IF NAMELISTADDRLINK(NAMELISTLOOP)=TRACKINGLISTADDRLINK(TRACKINGFOUNDINDEX) THEN
                ADDRLINKFOUND=TRUE
              END [FOR NAMELISTLOOP=1 TO NAMELISTCOUNT]
             IF MBRLINKFOUND=FALSE AND
                ADDRLINKFOUND=FALSE THEN
              DO
               SCENARIODETAIL="LINKTRACKING Logic Scenario #3.c.2 applied"
               TARGETMBRNUMLINK=""
               TARGETMBRADDRLINK=""
               CALL REVISETRACKING

               NOTECHR="invalid name links removed from"
               NOTECHR1="tracking 08"
               CALL CREATENOTERECORD

               CALL SENDCOMPLETEERROR
               DONE=TRUE
              END
            END [IF DONE=FALSE - Scenario #3.c.2]

[* 3.c.3.a If only member link matches & If new address link found (address link in name record is different than
**         the address link in the tracking record), revise tracking 08 with the address link from the name record.
**         Return success.
*]
           IF DONE=FALSE THEN
            DO
             NAMEFOUNDINDEX=0
             MBRLINKFOUND=FALSE
             ADDRLINKFOUND=FALSE
             FOR NAMELISTLOOP=1 TO NAMELISTCOUNT
              DO
               IF NAMEFOUNDINDEX=0 THEN
                DO
                 IF NAMELISTMBRLINK(NAMELISTLOOP)=TRACKINGLISTMBRLINK(TRACKINGFOUNDINDEX) AND
                    NAMELISTADDRLINK(NAMELISTLOOP)<>TRACKINGLISTADDRLINK(TRACKINGFOUNDINDEX) AND
                    NAMELISTADDRLINK(NAMELISTLOOP)<>"" THEN
                  NAMEFOUNDINDEX=NAMELISTLOOP
                END
              END [FOR NAMELISTLOOP=1 TO NAMELISTCOUNT]
             IF NAMEFOUNDINDEX>0 THEN
              DO
               SCENARIODETAIL="LINKTRACKING Logic Scenario #3.c.3.a applied"
               TARGETMBRNUMLINK=NAMELISTMBRLINK(NAMEFOUNDINDEX)
               TARGETMBRADDRLINK=NAMELISTADDRLINK(NAMEFOUNDINDEX)
               CALL REVISETRACKING
               CALL SENDCOMPLETE
               DONE=TRUE
              END
            END [IF DONE=FALSE - Scenario #3.c.3.a]

[* 3.c.3.b If no new address link # found, revise tracking 08 blanking out address link field.
**         Return COMPLETE WITH ERROR and add note "invalid address link removed from tracking 08"
*]
           IF DONE=FALSE THEN
            DO
             NAMEFOUNDINDEX=0
             MBRLINKFOUND=FALSE
             ADDRLINKFOUND=FALSE
             FOR NAMELISTLOOP=1 TO NAMELISTCOUNT
              DO
               IF NAMEFOUNDINDEX=0 THEN
                DO
                 IF NAMELISTMBRLINK(NAMELISTLOOP)=TRACKINGLISTMBRLINK(TRACKINGFOUNDINDEX) AND
                    NAMELISTADDRLINK(NAMELISTLOOP)<>TRACKINGLISTADDRLINK(TRACKINGFOUNDINDEX) AND
                    NAMELISTADDRLINK(NAMELISTLOOP)="" THEN
                  NAMEFOUNDINDEX=NAMELISTLOOP
                END
              END [FOR NAMELISTLOOP=1 TO NAMELISTCOUNT]
             IF NAMEFOUNDINDEX>0 THEN
              DO
               SCENARIODETAIL="LINKTRACKING Logic Scenario #3.c.3.b applied"
               TARGETMBRNUMLINK=NAMELISTMBRLINK(NAMEFOUNDINDEX)
               TARGETMBRADDRLINK=""
               CALL REVISETRACKING

               NOTECHR="invalid address link removed from"
               NOTECHR1="tracking 08"
               CALL CREATENOTERECORD
               CALL SENDCOMPLETEERROR
               DONE=TRUE
              END
            END [IF DONE=FALSE - Scenario #3.c.3.b]

[* 3.c.4 If only address link matches, revise tracking 08 blanking out both member link and
**       address link fields.  Return COMPLETE WITH ERROR and add note "invalid member and
**       address links removed from tracking 08"
*]
           IF DONE=FALSE THEN
            DO
             NAMEFOUNDINDEX=0
             MBRLINKFOUND=FALSE
             ADDRLINKFOUND=FALSE
             FOR NAMELISTLOOP=1 TO NAMELISTCOUNT
              DO
               IF NAMEFOUNDINDEX=0 THEN
                DO
                 IF NAMELISTMBRLINK(NAMELISTLOOP)<>TRACKINGLISTMBRLINK(TRACKINGFOUNDINDEX) AND
                    NAMELISTADDRLINK(NAMELISTLOOP)=TRACKINGLISTADDRLINK(TRACKINGFOUNDINDEX) AND
                    NAMELISTADDRLINK(NAMELISTLOOP)<>"" THEN
                  NAMEFOUNDINDEX=NAMELISTLOOP
                END
              END [FOR NAMELISTLOOP=1 TO NAMELISTCOUNT]
             IF NAMEFOUNDINDEX>0 THEN
              DO
               SCENARIODETAIL="LINKTRACKING Logic Scenario #3.c.4 applied"
               TARGETMBRNUMLINK=""
               TARGETMBRADDRLINK=""
               CALL REVISETRACKING

               NOTECHR="invalid member and address links removed"
               NOTECHR1="from tracking 08"
               CALL CREATENOTERECORD
               CALL SENDCOMPLETEERROR
               DONE=TRUE
              END
            END [IF DONE=FALSE]
          END [IF TRACKINGLISTMBRLINK(TRACKINGFOUNDINDEX)<>"" AND...]
        END [IF DONE=FALSE - Scenario #3.c]
      END [IF TRACKINGFOUNDLOC>0 - Scenario #3]
    END [IF DONE=FALSE - Scenario #3]
   IF DONE=FALSE THEN
    DO
     SCENARIODETAIL="LINKTRACKING uncoded scenario"
     NOTECHR="Uncoded scenario catch"
     NOTECHR1=""
     CALL CREATENOTERECORD
     CALL SENDCOMPLETEERROR
     DONE=TRUE
    END
  END [IF ERRORCODE=0 AND @RGSTATE=STATELINKTRACKING]

 IF ERRORCODE<>0 THEN
  CALL ERRORHANDLER
 CALL PRINTPROGRAMINFO
 CALL PRINTRGDATA
 CALL BNOPRINTDEBUG

 NEWLINE
 CALL JSONCLOSE
END [PRINT]

PROCEDURE CREATETRACKING
[* Create tracking record
*]
 FMPERFORM CREATE TRACKING LOC AFTERLAST (0,8,NEWLOC,FMERROR)
  DO
   SET USERCHAR12 TO TARGETPREFLOCCHR
   SET USERCHAR13 TO TARGETUSERID
   SET USERCHAR14 TO TARGETMBRNUMLINK
   SET USERCHAR15 TO TARGETMBRADDRLINK
  END
 BNODEBUGMSG=FORMAT("CREATING TRACKING LOC 999999 ",NEWLOC)+
           "FMERROR: '"+FMERROR+"'"
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="  PREFLOC:"+TARGETPREFLOCCHR+
             "  BNOID:"+TARGETUSERID+
             "  MLNK:"+TARGETMBRNUMLINK+
             "  ALNK:"+TARGETMBRADDRLINK
 CALL BNODEBUGMSGADD
END [PROCEDURE]

PROCEDURE REVISETRACKING
[* Revise the targeted tracking record
*]
 FMPERFORM REVISE TRACKING LOC TRACKINGFOUNDLOC (0,8,FMERROR)
  DO
   SET USERCHAR12 TO TARGETPREFLOCCHR
   SET USERCHAR13 TO TARGETUSERID
   SET USERCHAR14 TO TARGETMBRNUMLINK
   SET USERCHAR15 TO TARGETMBRADDRLINK
  END
 BNODEBUGMSG=FORMAT("REVISING TRACKING LOC 999999 ",TRACKINGFOUNDLOC)+
           "FMERROR: '"+FMERROR+"'"
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="  PREFLOC:"+TARGETPREFLOCCHR+
             "  BNOID:"+TARGETUSERID+
             "  MLNK:"+TARGETMBRNUMLINK+
             "  ALNK:"+TARGETMBRADDRLINK
 CALL BNODEBUGMSGADD
END [PROCEDURE]

PROCEDURE CREATENOTERECORD
[* Create a note record for error detail
*]
 IF @RGSTATE=STATELINKTRACKING THEN
  DO
   NOTETEXT1="Banno Name Link Error"
   NOTETEXT2="Error matching name link"
   NOTETEXT3=NOTECHR
   NOTETEXT4=NOTECHR1
   NOTETEXT5="ID:"+TARGETUSERID
   NOTETEXT6=FORMAT("Preference Locator:999999",TARGETPREFLOC)
   NOTETEXT7="Name Link Order:"+@RGUSERCHR1
   NOTETEXT8=FORMAT("Member BD: 99/99/99",TARGETUSERBIRTHDATE)
  END
 ELSE IF @RGSTATE=STATECREATETRACKING THEN
  DO
   NOTETEXT1="Banno Name Link Error"
   NOTETEXT2="Error creating name link"
   NOTETEXT3=NOTECHR
   NOTETEXT4=NOTECHR1
   NOTETEXT5="ID:"+TARGETUSERID
   NOTETEXT6=FORMAT("Preference Locator:999999",TARGETPREFLOC)
   NOTETEXT7="Mbr Num Link:"+TARGETMBRNUMLINK
   NOTETEXT8="Mbr Addr Link:"+TARGETMBRADDRLINK
  END

[* Test for a matching note record already created but if not found,
** create it.
*]
 NOTEFOUND=FALSE
 FOR EACH NOTE WITH (NOTE:EXPIRATIONDATE<>DATENULL AND
                     NOTE:TEXT:1=NOTETEXT1 AND
                     NOTE:TEXT:2=NOTETEXT2 AND
                     NOTE:TEXT:3=NOTETEXT3 AND
                     NOTE:TEXT:4=NOTETEXT4 AND
                     NOTE:TEXT:5=NOTETEXT5 AND
                     NOTE:TEXT:6=NOTETEXT6 AND
                     NOTE:TEXT:7=NOTETEXT7 AND
                     NOTE:TEXT:8=NOTETEXT8)
  DO
   NOTEFOUND=TRUE
   TMPCHR=FORMAT("#####9",NOTE:LOCATOR)
   CALL NLTS
   BNODEBUGMSG="NOTE ALREADY EXISTS LOC "+TMPCHR
   CALL BNODEBUGMSGADD
   CALL NOTEDEBUGOUT
  END

 IF NOTEFOUND=FALSE THEN
  DO
   FMPERFORM CREATE NOTE LOC BEFOREFIRST (0,0,NEWLOC,FMERROR)
    DO
     SET CODE TO 0
     SET TEXT:1 TO NOTETEXT1
     SET TEXT:2 TO NOTETEXT2
     SET TEXT:3 TO NOTETEXT3
     SET TEXT:4 TO NOTETEXT4
     SET TEXT:5 TO NOTETEXT5
     SET TEXT:6 TO NOTETEXT6
     SET TEXT:7 TO NOTETEXT7
     SET TEXT:8 TO NOTETEXT8
     SET EXPIRATIONDATE TO SYSTEMDATE+NOTEEXPIREDAYS
    END

   TMPCHR=FORMAT("#####9",NEWLOC)
   CALL NLTS
   BNODEBUGMSG="CREATING NOTE LOC "+TMPCHR
   CALL BNODEBUGMSGADD
   CALL NOTEDEBUGOUT
  END
END [PROCEDURE]

PROCEDURE NOTEDEBUGOUT
[* Send note record detail to JSON output
*]
 BNODEBUGMSG="  T1:"+NOTETEXT1
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="  T2:"+NOTETEXT2
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="  T3:"+NOTETEXT3
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="  T4:"+NOTETEXT4
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="  T5:"+NOTETEXT5
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="  T6:"+NOTETEXT6
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="  T7:"+NOTETEXT7
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="  T8:"+NOTETEXT8
 CALL BNODEBUGMSGADD
END [PROCEDURE]

PROCEDURE GETRGVALUES
[* Pull the values of the @RG variables for use during the state
*]
 TARGETPREFLOC=0
 TARGETUSERID=""
 TARGETPREFLOCCHR=""
 TARGETMBRNUMLINK=""
 TARGETMBRADDRLINK=""
 TARGETUSERBIRTHDATE=DATENULL

 TARGETPREFLOC=@RGUSERNUM1
 TMPCHR=@RGUSERCHR2
 CALL NLTS
 TARGETUSERID=TMPCHR

 IF TARGETPREFLOC>0 THEN
  DO
   TMPCHR=FORMAT("#######9",TARGETPREFLOC)
   CALL NLTS
   TARGETPREFLOCCHR=TMPCHR
  END

 IF @RGSTATE=STATELINKTRACKING THEN
  DO
   IF @RGUSERCHR3<>"" THEN
    DO
     TMPCHR=@RGUSERCHR3
     CALL NLTS
     TARGETUSERBIRTHDATE=DATEVALUE(TMPCHR)
    END
  END [IF @RGSTATE=STATELINKTRACKING]
 ELSE IF @RGSTATE=STATECREATETRACKING THEN
  DO
   TMPCHR=@RGUSERCHR3
   CALL NLTS
   TARGETMBRNUMLINK=TMPCHR
   TMPCHR=@RGUSERCHR4
   CALL NLTS
   TARGETMBRADDRLINK=TMPCHR
  END
END [PROCEDURE]

PROCEDURE GETNAMETYPES
[* Store the valid name types into 2 arrays: One indexed by the
** order they were listed in the passed value (@RGUSERCHR1) and the
** second in order of name type.
*]
 VALIDNAMETYPECOUNT=0
 TMPCHR=@RGUSERCHR1
 CALL NLTS
 LELISTINPUT=TMPCHR
 IF LELISTINPUT="" THEN
  LELISTINPUT="ALL"
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO NAMETYPESMAX
  DO
   IF LELIST(TMPLOOP)=TRUE THEN
    VALIDNAMETYPECOUNT=VALIDNAMETYPECOUNT+1
   VALIDNAMESBYTYPE(TMPLOOP)=LELIST(TMPLOOP)
  END

 TMPCHR=PARAMVALIDNAMETYPESLIST
 WHILE LENGTH(TMPCHR)>0
  DO
   POS=CHARACTERSEARCH(TMPCHR,",")
   IF POS=0 THEN
    DO
     TMPVAL=VALUE(TMPCHR)
     TMPCHR=""
    END
   ELSE
    DO
     TMPVAL=VALUE(SEGMENT(TMPCHR,1,POS-1))
     TMPCHR=SEGMENT(TMPCHR,POS+1,LENGTH(TMPCHR))
    END
   IF VALIDNAMETYPESCOUNT<NAMETYPESMAX THEN
    DO
     VALIDNAMETYPESCOUNT=VALIDNAMETYPESCOUNT+1
     VALIDNAMESBYORDER(VALIDNAMETYPESCOUNT)=TMPVAL
    END
  END [WHILE LENGTH(TMPCHR)>0]

 IF VALIDNAMETYPECOUNT=0 THEN
  ERRORCODE=501
END [PROCEDURE]

PROCEDURE NLTS
[* Remove leading AND trailing spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 CALL NTS
 IF TMPCHR<>"" THEN
  CALL NLS
END [PROCEDURE]

PROCEDURE NLS
[* Remove leading spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 WHILE (LENGTH(TMPCHR)>0 AND
        SEGMENT(TMPCHR,1,1)=" ")
  DO
   IF LENGTH(TMPCHR)=1 THEN
    TMPCHR=""
   ELSE
    TMPCHR=SEGMENT(TMPCHR,2,LENGTH(TMPCHR))
  END
 IF LENGTH(TMPCHR)=0 THEN
  TMPCHR=""
END [PROCEDURE]

PROCEDURE NTS
[* Remove trailing spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 IF TMPCHR<>"" THEN
  TMPCHR=SEGMENT(TMPCHR,1,LENGTH(TMPCHR))
 IF LENGTH(TMPCHR)=0 THEN
  TMPCHR=""
END [PROCEDURE]

PROCEDURE NUMTOCHR
[* Convert whole number to character w/o any commas
*]
 TMPCHR=FORMAT("########9",TMPNUM)
 CALL NLS
END [PROCEDURE]

PROCEDURE ERRORHANDLER
[* Print error code information to output.
**  PASS       ERRORCODE      Error code to print
**  PASS       ERRORMSG       Error type to print
**  PASS       ERRORDETAIL    Specific error detail
**
** ERROR CODES
**  500 - Program running in memo mode
**  501 - No eligible name types defined
*]
 ERRORMSG="loggingErrorMessage"
 ERRORDETAIL(0)="Program running in memo mode"
 ERRORDETAIL(1)="No eligible name types defined"

 ERRORDETAILOFFSET=ERRORCODE-500
 NEWLINE
 CALL JSONOPEN
 PRINT "    "+Q+"errorCode"+Q+": "+FORMAT(Q+"999"+Q,ERRORCODE)+","
 NEWLINE
 PRINT "    "+Q+ERRORMSG+Q+": "+
            Q+ERRORDETAIL(ERRORDETAILOFFSET)+Q
 NEWLINE
END [PROCEDURE]

PROCEDURE SENDCOMPLETE
[* JSON output indicating the results were complete
*]
 NEWLINE
 CALL JSONOPEN

 PRINT INDENT(1)+Q+"results"+Q+": "+Q+"COMPLETE"+Q+","
 NEWLINE
 PRINT INDENT(1)+Q+"scenario"+Q+": "+Q+SCENARIODETAIL+Q+","
 NEWLINE
 PRINT INDENT(1)+Q+"debugMode"+Q+": "+Q+BNOTRUEFALSECHR(DEBUGMODE)+Q
END [PROCEDURE]

PROCEDURE SENDCOMPLETEERROR
[* JSON output indicating complete but with an error
*]
 NEWLINE
 CALL JSONOPEN

 PRINT INDENT(1)+Q+"results"+Q+": "+Q+"COMPLETE WITH ERROR"+Q+","
 NEWLINE
 PRINT INDENT(1)+Q+"scenario"+Q+": "+Q+SCENARIODETAIL+Q+","
 NEWLINE
 PRINT INDENT(1)+Q+"debugMode"+Q+": "+Q+BNOTRUEFALSECHR(DEBUGMODE)+Q
END [PROCEDURE]

PROCEDURE JSONOPEN
 PRINT "{"
 NEWLINE
END [PROCEDURE]

PROCEDURE JSONCLOSE
 PRINT "}"
 NEWLINE
END [PROCEDURE]

PROCEDURE POLLNAMES
[* Create a list of valid names. Names are at the account
** level and be of a targeted name type.
*]
 FOR NAMELOOP=1 TO NAMELISTMAX
  DO
   NAMELISTLOC(NAMELOOP)=0
   NAMELISTMBRLINK(NAMELOOP)=""
   NAMELISTADDRLINK(NAMELOOP)=""
  END

 BNODEBUGMSG="Polling current eligible name records"
 CALL BNODEBUGMSGADD

 NAMELISTCOUNT=0
 FOR EACH NAME WITH (NAME:EXPIRATIONDATE=DATENULL OR
                     NAME:EXPIRATIONDATE>SYSTEMDATE)
  DO
   IF  VALIDNAMESBYTYPE(NAME:TYPE)=TRUE AND
       NAMELISTCOUNT<NAMELISTMAX THEN
    DO
     NAMELISTCOUNT=NAMELISTCOUNT+1

     NAMELISTLOC(NAMELISTCOUNT)=NAME:LOCATOR
     NAMELISTMBRLINK(NAMELISTCOUNT)=NAME:MEMBERNUMLINK
     NAMELISTADDRLINK(NAMELISTCOUNT)=NAME:MBRADDRNUMLINK

     BNODEBUGMSG=FORMAT("NAME LOC 999999  ",NAMELISTLOC(NAMELISTCOUNT))+
                 FORMAT("NAME TYPE 99  ",NAME:TYPE)+
                "MLNK:"+NAMELISTMBRLINK(NAMELISTCOUNT)+"  "+
                "ALNK:"+NAMELISTADDRLINK(NAMELISTCOUNT)
     CALL BNODEBUGMSGADD

    END
  END
END [PROCEDURE]

PROCEDURE POLLTRACKING
[* Create a list of valid tracking record data
*]
 FOR TRACKINGLOOP=0 TO TRACKINGLISTMAX
  DO
   TRACKINGLISTLOC(TRACKINGLOOP)=0
   TRACKINGLISTPREFLOC(TRACKINGLOOP)=0
   TRACKINGLISTMBRID(TRACKINGLOOP)=""
   TRACKINGLISTMBRLINK(TRACKINGLOOP)=""
   TRACKINGLISTADDRLINK(TRACKINGLOOP)=""
  END
 TRACKINGLISTCOUNT=0

[* USERCHAR12 is the preference Locator and connects a specific tracking 8 to
** the member logged in. USERCHAR12 is only filled in for BANNO use.
*]

 BNODEBUGMSG="ACCOUNT: "+ACCOUNT:NUMBER
 CALL BNODEBUGMSGADD

 FOR EACH TRACKING WITH (TRACKING:TYPE=8 AND
                        (TRACKING:EXPIREDATE=DATENULL OR
                         TRACKING:EXPIREDATE>SYSTEMDATE))
  DO
   IF TRACKINGLISTCOUNT<TRACKINGLISTMAX THEN
    DO
     TRACKINGLISTCOUNT=TRACKINGLISTCOUNT+1
     TRACKINGLISTLOC(TRACKINGLISTCOUNT)=TRACKING:LOCATOR
     TRACKINGLISTPREFLOC(TRACKINGLISTCOUNT)=VALUE(TRACKING:USERCHAR12)
     TRACKINGLISTMBRID(TRACKINGLISTCOUNT)=TRACKING:USERCHAR13
     TRACKINGLISTMBRLINK(TRACKINGLISTCOUNT)=TRACKING:USERCHAR14
     TRACKINGLISTADDRLINK(TRACKINGLISTCOUNT)=TRACKING:USERCHAR15

     BNODEBUGMSG="TRKG8 "+
                 FORMAT("999  ",TRACKINGLISTCOUNT)+
                 FORMAT("LOC:9999 ",TRACKINGLISTLOC(TRACKINGLISTCOUNT))

     IF TRACKINGLISTPREFLOC(TRACKINGLISTCOUNT)=0 THEN
      BNODEBUGMSG=BNODEBUGMSG+"PREFLOC: (null) "
     ELSE
      BNODEBUGMSG=BNODEBUGMSG+FORMAT("PREFLOC:99999 ",TRACKINGLISTPREFLOC(TRACKINGLISTCOUNT))

     IF TRACKINGLISTMBRID(TRACKINGLISTCOUNT)="" THEN
      BNODEBUGMSG=BNODEBUGMSG+"MID: (null) "
     ELSE
      BNODEBUGMSG=BNODEBUGMSG+"MID:"+TRACKINGLISTMBRID(TRACKINGLISTCOUNT)
     CALL BNODEBUGMSGADD

     BNODEBUGMSG="          "
     IF TRACKINGLISTMBRLINK(TRACKINGLISTCOUNT)="" THEN
      BNODEBUGMSG=BNODEBUGMSG+" MLNK: (null) "
     ELSE
      BNODEBUGMSG=BNODEBUGMSG+" MLNK:"+TRACKINGLISTMBRLINK(TRACKINGLISTCOUNT)

     IF TRACKINGLISTADDRLINK(TRACKINGLISTCOUNT)="" THEN
      BNODEBUGMSG=BNODEBUGMSG+" ALNK: (null) "
     ELSE
      BNODEBUGMSG=BNODEBUGMSG+" ALNK:"+TRACKINGLISTADDRLINK(TRACKINGLISTCOUNT)

     CALL BNODEBUGMSGADD
    END [IF TRACKINGLISTCOUNT<TRACKINGLISTMAX THEN]
  END [FOR EACH TRACKING]
END [PROCEDURE]

PROCEDURE PRINTPROGRAMINFO
[* Print program info to JSON output
*]
 PRINT ","
 NEWLINE
 PRINT INDENT(1)+Q+"programInfo"+Q+": "+Q+
       "BANNO.DATABASE.CHECK.V1.POW"+
       "  "+PROGRAMVERSION+
       "  "+FORMAT("99/99/99-",LASTMODDATE)+LASTMODTIME+Q
END [PROCEDURE]

PROCEDURE PRINTRGDATA
 PRINT ","
 NEWLINE
 PRINT INDENT(1)+Q+"rgDataFromBanno"+Q+": {"
 NEWLINE
 PRINT INDENT(2)+Q+"STATE"+Q+": "+Q+@RGSTATE+Q+","
 NEWLINE
 PRINT INDENT(2)+Q+"NUM1"+Q+": "+Q+FORMAT("999999",@RGUSERNUM1)+Q+","
 NEWLINE
 PRINT INDENT(2)+Q+"CHR1"+Q+": "+Q+@RGUSERCHR1+Q+","
 NEWLINE
 PRINT INDENT(2)+Q+"CHR2"+Q+": "+Q+@RGUSERCHR2+Q+","
 NEWLINE
 PRINT INDENT(2)+Q+"CHR3"+Q+": "+Q+@RGUSERCHR3+Q+","
 NEWLINE
 PRINT INDENT(2)+Q+"CHR4"+Q+": "+Q+@RGUSERCHR4+Q
 NEWLINE
 PRINT INDENT(1)+"}"
END [PROCEDURE]

PROCEDURE BNOPRINTDEBUG
[* Print debug output in proper JSON format
**  PASS  DEBUGMODE  Boolean: Print debug data, T/F
**  PASS  BNODEBUGMSGLIST()  Array of debug messages to print
*]
 IF DEBUGMODE=DEBUGMODEON THEN
  DO
   PRINT ","
   NEWLINE
   PRINT INDENT(2)+Q+"debugData"+Q+": ["
   NEWLINE
   FOR DEBUGLOOP=1 TO BNODEBUGCOUNT
    DO
     PRINT INDENT(2)+Q+BNODEBUGMSGLIST(DEBUGLOOP)+Q
     IF DEBUGLOOP<BNODEBUGCOUNT THEN
      PRINT ","
     NEWLINE
    END
   PRINT INDENT(2)+"]"
   NEWLINE
  END
END [PROCEDURE]

PROCEDURE BNODEBUGMSGADD
[* Add a message to the debug message array
** PASS    BNODEBUGCOUNT  Current array index
** PASS    BNODEBUGMSG  Debug message to add to array
*]
 IF BNODEBUGCOUNT<BNODEBUGMSGMAX THEN
  DO
   BNODEBUGCOUNT=BNODEBUGCOUNT+1
   BNODEBUGMSGLIST(BNODEBUGCOUNT)=BNODEBUGMSG
   BNODEBUGMSG=""
  END
END [PROCEDURE]

PROCEDURE BNOMEMOMODECHECK
[* Check to see if the system is in memo mode and if so, return ERROR code
** 500
** RETURN  BNOERRORCODE  Return error code - fixed value: 500
*]
 IF BNOALLOWINMEMOMODE=FALSE AND
    SYSMEMOMODE=TRUE THEN
  ERRORCODE=500
END [PROCEDURE]

#INCLUDE "RB.LISTEXPAND"
