[*
**  PowerOn Name:       BANNO.CHANGE.ADDR.V1.POW
**  Letterfile Name:    BANNO.CHANGE.ADDR.V1.CFG
**
**  Copyright 2021 Jack Henry and Associates
**
**  This Banno PowerOn allows the member to update their
**  address (Street, Extra Address, City, State, Zipcode, member note).
**  A note record will be added to the member's account with the member's
**  note and either success or error indication.
**
**  For more information check
**  https://github.com/Banno/banno-powerons
**
**  Banno is not responsible for any modifications to this file
**  made by unauthorized personnel.
**
**  Modification History:
**    Ver. 1.0.0  03/01/21 T. Kainz - Original Programming
**    Ver. 1.0.1  04/19/21 T. Kainz - Corrected Invalid JSON output for error code 502
**                         Corrected CFG File read error output
**    Ver. 1.0.2  05/28/21 T. Kainz - Added error handling for missing tracking 08 (code 503)
**                         Added error handling for no tracking 08 address link (code 503)
**                         Added check for max ttl address length (error code 503)
**                         Updated default param logic for PO Box restrict.
**                         Updated CFG file read error msg. Set param for note expiration days to 30
*]
SYMCONNECT
STATELESS

TARGET=ACCOUNT

DEFINE
 #INCLUDE "RD.GETDATA.DEF"
 #INCLUDE "RB.LISTEXPAND.DEF"

 BNODEBUGMSGMAX            = 99
 CONFIGFILENAME            = "BANNO.CHANGE.ADDR.V1.CFG"
 DATENULL                  = '--/--/--'
 DEBUGMODEOFF              = 0
 DEBUGMODEON               = 1
 FALSE                     = 0
 INDENTMAX                 = 9
 MAXCHRVALUE               = 255
 MAXWARNINGTYPES           = 999
 PARAMOVERRIDELISTMAX      = 65
 PARSEDTEXTMAX             = 9
 POBOXLISTMAX              = 20
 PROCESSADDRCHANGE         = "PROCESSADDRCHANGE"
 STATEEND                  = "STATEEND"
 TRUE                      = 1

 ADDRCHGSUCCESSFUL         = NUMBER
 BNODEBUGCOUNT             = NUMBER
 BNODEBUGMSG               = CHARACTER
 BNODEBUGMSGLIST           = CHARACTER ARRAY(99)
 CHRVAL                    = NUMBER
 CURRBANNOID               = CHARACTER
 DATAFIELDCOUNT            = NUMBER
 DATALINE                  = CHARACTER
 DATALINEFIELD             = CHARACTER ARRAY(10)
 DATALINEFIELDMAX          = NUMBER
 DEBUGLOOP                 = NUMBER
 DEBUGMODE                 = NUMBER
 ERRORDETAIL               = CHARACTER ARRAY(99)
 ERRORDETAILOFFSET         = NUMBER
 ERRORMSG                  = CHARACTER
 FMERROR                   = CHARACTER
 FMERRORCOUNT              = NUMBER
 FOUND                     = NUMBER
 INDENT                    = CHARACTER ARRAY(9)
 INVALIDACCTYPES           = NUMBER ARRAY(9999)
 INVALIDCONFIG             = NUMBER
 INVALIDCONFIGPARAMS       = NUMBER
 LFERROR                   = CHARACTER
 LFLINE                    = CHARACTER
 LFNUMBER                  = NUMBER
 MEMBERADDRLINK            = CHARACTER
 MEMOMODE                  = NUMBER
 NAMELOC                   = NUMBER
 NEWCITY                   = CHARACTER
 NEWEXTRAADDR              = CHARACTER
 NEWLOC                    = NUMBER
 NEWSTATE                  = CHARACTER
 NEWSTREET                 = CHARACTER
 NEWZIPCODE                = CHARACTER
 PARAMCHR                  = CHARACTER
 PARAMCLEARWARNING         = CHARACTER
 PARAMINELIGIBLEACCTS      = CHARACTER
 PARAMLOCFOUND             = NUMBER
 PARAMMAXEXPIREDAYS        = NUMBER
 PARAMNAME                 = CHARACTER
 PARAMOVERRIDELIST         = CHARACTER ARRAY(99)
 PARAMPORESTRICT           = NUMBER
 PARAMSETWARNING           = CHARACTER
 PARAMSETWARNINGEXPIRATION = DATE
 PARAMVALIDATIONERROR      = NUMBER
 PARAMVALIDATIONERRORCHR   = CHARACTER
 PARAMVALUE                = CHARACTER
 PARAMWARNINGSACCT         = CHARACTER
 PARSEDTEXT                = CHARACTER(40) ARRAY(9)
 PARSEDTEXTCOUNT           = NUMBER
 PARSEDTEXTSTART           = NUMBER
 PARSETEXTLENGTH           = NUMBER
 PARSETEXTRAW              = CHARACTER
 POBOXFOUND                = NUMBER
 POBOXINPUTFOUND           = NUMBER
 POBOXLIST                 = CHARACTER ARRAY(20)
 POBOXLISTCOUNTMAX         = NUMBER
 POS                       = NUMBER
 PREFLOC                   = NUMBER
 Q                         = CHARACTER
 READCONFIGERROR           = NUMBER
 READCONFIGERRORMSG        = CHARACTER
 RESPONSECODE              = NUMBER
 SYSTEMMEMOMODE            = NUMBER
 SYSTEMMEMOMODECHR         = CHARACTER ARRAY(1)
 TESTCHR                   = CHARACTER
 TESTLOOP                  = NUMBER
 THISACCOUNT               = CHARACTER
 TMPCHR                    = CHARACTER
 TMPLOOP                   = NUMBER
 TMPTEXT                   = CHARACTER
 TMPTEXTLOOP               = NUMBER
 TRACKINGFOUND             = NUMBER
 TRUEFALSECHR              = CHARACTER ARRAY(1)
 VALIDACCOUNT              = NUMBER
 VALIDCHRINPUT1            = CHARACTER
 VALIDCHARS                = NUMBER ARRAY(999)
 VALIDPARAMS               = NUMBER
 VALIDRANGEINPUT           = NUMBER
 WARNINGFOUND              = NUMBER
 WARNINGSACCT              = NUMBER ARRAY(999)
 WARNINGTOCLEAR            = NUMBER
 WARNINGTOSET              = NUMBER
 PROGRAMUPDATENOTE1        = CHARACTER
 PROGRAMUPDATENOTE2        = CHARACTER
 PROGRAMVERSION            = CHARACTER
 LASTMODDATE               = DATE
 LASTMODTIME               = CHARACTER
 ERROR503CHR               = CHARACTER
 SETWARNERROR              = CHARACTER
 CLEARWARNERROR            = CHARACTER
 PRINTCONFIGINFODAYS       = NUMBER
 PRINTRGINFODAYS           = NUMBER
 NOTEEXPIREDAYS            = NUMBER
END [DEFINE]

SETUP
 Q=CTRLCHR(34)
 SYSTEMMEMOMODE=SYSMEMOMODE
 DATALINEFIELDMAX=5
 NOTEEXPIREDAYS=30
 VALIDCHRINPUT1="32-126,128-175,181-184,189,190,198,199,208-216,221,222,224-253"
 FOR TMPLOOP=1 TO INDENTMAX
  DO
   INDENT(TMPLOOP)=REPEATCHR(" ",TMPLOOP*2)
  END

 TRUEFALSECHR(TRUE)="TRUE"
 TRUEFALSECHR(FALSE)="FALSE"

 PROGRAMVERSION="1.0.2"
 LASTMODDATE='05/28/21'
 LASTMODTIME="21:30 MT"
 PROGRAMUPDATENOTE1="Check for missing tracking 8 or trking 8 w/o addr link."
 PROGRAMUPDATENOTE2="Update to PO Box logic, note expire days, CFG file read errors"
 PRINTRGINFODAYS=60
 PRINTCONFIGINFODAYS=60
END [SETUP]

PRINT TITLE="BANNO.CHANGE.ADDR.V1.POW"
 CALL INITIALIZEDATA

 IF RESPONSECODE=0 THEN
  CALL READCONFIGFILESETTINGS

 IF RESPONSECODE=0 THEN
  CALL CHECKFORMEMOMODE

 IF RESPONSECODE=0 THEN
  CALL PULLRGDATA

 IF RESPONSECODE=0 THEN
  CALL VALIDATERGDATA

 IF RESPONSECODE=0 THEN
  CALL VALIDATEACCOUNT

 IF RESPONSECODE=0 THEN
  DO
   IF @RGSTATE=PROCESSADDRCHANGE THEN
    DO
     ADDRCHGSUCCESSFUL=FALSE
     CALL FINDTRACKING

     IF RESPONSECODE=0 THEN
      DO
       FOR EACH NAME WITH (NAME:MBRADDRNUMLINK=MEMBERADDRLINK)
        DO
         NAMELOC=NAME:LOCATOR
        END
       IF NAMELOC=0 THEN
        DO
         RESPONSECODE=503
         PARSEDTEXT(1)=FORMAT("Banno Chg Addr Err: Name LOC:####9",NAMELOC)
         ERROR503CHR=FORMAT("Could not locate name LOC:####9",NAMELOC)
         CALL CREATENOTERECORD
        END
      END

     IF NAMELOC>0 THEN
      DO
       FMERRORCOUNT=0

       FMPERFORM REVISE NAME LOC NAMELOC (0,0,FMERROR)
        DO
         SET EXTRAADDRESS TO UPPERCASE(NEWEXTRAADDR)
         SET STREET TO UPPERCASE(NEWSTREET)
         SET CITY TO UPPERCASE(NEWCITY)
         SET STATE TO UPPERCASE(NEWSTATE)
         SET ZIPCODE TO UPPERCASE(NEWZIPCODE)
        END

       BNODEBUGMSG=FORMAT("NAME LOC #####9 TARGETED. ",NAMELOC)+"FMERROR='"+FMERROR+"'"
       CALL BNODEBUGMSGADD
       IF FMERROR<>"" THEN
        DO
         RESPONSECODE=503
         ERROR503CHR="Banno Chg Addr Err: FM-"+FMERROR
         PARSEDTEXT(1)="Banno Chg Addr Err: FM-"+FMERROR
         CALL CREATENOTERECORD
        END
       ELSE
        DO
         ADDRCHGSUCCESSFUL=TRUE
         PARSEDTEXT(1)="Banno Successful Address Change"
         CALL CREATENOTERECORD

         IF WARNINGTOCLEAR>0 THEN
          DO
           FMPERFORM REVISE ACCOUNT (0,0,CLEARWARNERROR)
            DO
             CLEARWARNING WARNINGTOCLEAR
            END
           IF CLEARWARNERROR<>"" THEN
            BNODEBUGMSG=FORMAT("WARNING #####9 UNSUCCESSFULLY CLEARED: ",WARNINGTOCLEAR)+CLEARWARNERROR
           ELSE
            BNODEBUGMSG=FORMAT("WARNING #####9 SUCCESSFULLY CLEARED",WARNINGTOCLEAR)
           CALL BNODEBUGMSGADD
          END
         IF WARNINGTOSET>0 THEN
          DO
           FMPERFORM REVISE ACCOUNT (0,0,SETWARNERROR)
            DO
             SETWARNING WARNINGTOSET PARAMSETWARNINGEXPIRATION
            END
           IF SETWARNERROR<>"" THEN
            BNODEBUGMSG=FORMAT("WARNING #####9 UNSUCCESSFULLY SET: ",WARNINGTOSET)+SETWARNERROR
           ELSE
            BNODEBUGMSG=FORMAT("WARNING #####9 SUCCESSFULLY SET",WARNINGTOSET)
           CALL BNODEBUGMSGADD
          END
        END [FMERROR=""]
      END [IF NAMELOC>0]

     CALL RETURNJSON1

    END [IF @RGSTATE=PROCESSADDRCHANGE]
  END [IF RESPONSECODE=0]

 CALL BNOPRINTDEBUG
 IF DEBUGMODE=DEBUGMODEOFF THEN
  NEWLINE
 PRINT INDENT(0)+"}"
 NEWLINE
END [PRINT]

PROCEDURE FINDTRACKING
[* Find the tracking 8 record which contains the member's Banno ID and
** retrieve the member's address link number.
** PASS    PREFLOC         Preference record locator of member
** RETURN  TRACKINGFOUND   Was tracking record found
** RETURN  MEMBERADDRLINK  Targeted member's address number link
*]
 TMPCHR=FORMAT("#########9",PREFLOC)
 CALL NLTS
 TRACKINGFOUND=FALSE
 MEMBERADDRLINK=""
 FOR EACH TRACKING WITH (TRACKINGFOUND=FALSE AND
                       ((TRACKING:EXPIREDATE=DATENULL OR
                         TRACKING:EXPIREDATE>SYSTEMDATE) AND
                         TRACKING:USERCHAR12=TMPCHR AND
                         UPPERCASE(TRACKING:USERCHAR13)=CURRBANNOID))
  DO
   TRACKINGFOUND=TRUE
   MEMBERADDRLINK=TRACKING:USERCHAR15
  END

 IF TRACKINGFOUND=FALSE OR
   (TRACKINGFOUND=TRUE AND MEMBERADDRLINK="") THEN
  DO
   RESPONSECODE=503

   IF TRACKINGFOUND=FALSE THEN
    DO
     PARSEDTEXT(1)="Account tracking type 08 not found"
     ERROR503CHR="Tracking 8 not found"
    END
   ELSE IF (TRACKINGFOUND=TRUE AND MEMBERADDRLINK="") THEN
    DO
     PARSEDTEXT(1)="Tracking 8 found but no Mbr Addr link"
     ERROR503CHR="Tracking 8 without MbrAddr Link"
    END
   CALL CREATENOTERECORD
	  END
END [PROCEDURE]

PROCEDURE VALIDATEACCOUNT
[* Validate the member's account for account type and/or
** warning code(s). If a targeted warning or account type is found, an
** error code wil be returned and a note record created on the member's
** account.
** PASS    INVALIDACCTTYPES()  Boolean array of invalid account types
** PASS    WARNINGSACCT()  Boolean array of account warning types
** RETURN  RESPONSECODE  Error code relevant to an encountered error
** RETURN  WARNINGFOUND  Boolean flag
**
*]
 IF INVALIDACCTYPES(ACCOUNT:TYPE)=TRUE THEN
  DO
   CALL JSONOPEN
   CALL PRINTPROGRAMINFO

   RESPONSECODE=502
   CALL ERRORHANDLER
   PARSEDTEXT(1)=FORMAT("Banno Chg addr err: Inval Acct Type:9999",ACCOUNT:TYPE)
   CALL CREATENOTERECORD
  END
 IF RESPONSECODE=0 THEN
  DO
   WARNINGFOUND=FALSE
   FOR TMPLOOP=1 TO 999
    DO
     IF RESPONSECODE=0 AND
        ANYWARNING(ACCOUNT,TMPLOOP) AND
        WARNINGSACCT(TMPLOOP)=TRUE THEN
      DO
       CALL JSONOPEN
       CALL PRINTPROGRAMINFO

       RESPONSECODE=502
       WARNINGFOUND=TMPLOOP
       CALL ERRORHANDLER
       PARSEDTEXT(1)=FORMAT("Banno Chg addr err: Inval Acct Warn:999",WARNINGFOUND)
       CALL CREATENOTERECORD
      END
    END
  END
END [PROCEDURE]

PROCEDURE PULLRGDATA
[* Parse through the data passed back from the UI. Data will be delimited
** with a pipe character.
** PASS    @RGUSERCHR1  Street Address | Extra Address
** PASS    @RGUSERCHR2  City | State | Zipcode
** PASS    @RGUSERCHR3  Member Note
** PASS    @RGUSERCHR4  Member's Banno ID
** RETURN  NEWSTREET  Updated street address
** RETURN  NEWEXTRAADDRESS  Updated extra address
** RETURN  NEWCITY  Updated city
** RETURN  NEWSTATE  Updated state
** RETURN  NEWZIPCODE  Updated zipcode
** RETURN  PARSEDTEXT() An array of member notes
** RETURN  CURRBANNOID The member's Banno ID
*]
 THISACCOUNT=""

 IF @RGSTATE=PROCESSADDRCHANGE THEN
  DO
[* street, extra address
*]
   DATALINE=@RGUSERCHR1
   CALL PARSEDATALINE
   NEWSTREET=UPPERCASE(DATALINEFIELD(1))
   NEWEXTRAADDR=UPPERCASE(DATALINEFIELD(2))
   BNODEBUGMSG="RG1:"+@RGUSERCHR1
   CALL BNODEBUGMSGADD
   BNODEBUGMSG="STREET:"+NEWSTREET+
               "   XADDR:"+NEWEXTRAADDR
   CALL BNODEBUGMSGADD
[* city, state & zipcode
*]
   DATALINE=@RGUSERCHR2
   CALL PARSEDATALINE
   NEWCITY=UPPERCASE(DATALINEFIELD(1))
   NEWSTATE=UPPERCASE(DATALINEFIELD(2))
   NEWZIPCODE=DATALINEFIELD(3)
   BNODEBUGMSG="RG2:"+@RGUSERCHR2
   CALL BNODEBUGMSGADD
   BNODEBUGMSG="CITY:"+NEWCITY+
               "   STATE:"+NEWSTATE+
               "   ZIPCODE:"+NEWZIPCODE
   CALL BNODEBUGMSGADD

[* member note
*]
   DATALINE=SEGMENT(@RGUSERCHR3,1,110)
   IF DATALINE<>"" THEN
    DO
     TMPCHR=DATALINE
     CALL CLEANUPTEXT
     DATALINE=TMPCHR
    END
   CALL PARSEDATALINE
   PARSETEXTRAW=DATALINEFIELD(1)
   PARSEDTEXTSTART=2
   PARSETEXTLENGTH=40
   CALL PARSETEXTFIELD
   BNODEBUGMSG="RG3:"+SEGMENT(@RGUSERCHR3,1,110)
   CALL BNODEBUGMSGADD
   BNODEBUGMSG=FORMAT("TEXT LINES=9",PARSEDTEXTCOUNT)
   CALL BNODEBUGMSGADD
   IF PARSEDTEXTCOUNT>0 THEN
    DO
     FOR TMPLOOP=1 TO PARSEDTEXTCOUNT
      DO
       BNODEBUGMSG=FORMAT("NOTE:9",TMPLOOP)+PARSEDTEXT(TMPLOOP)
       CALL BNODEBUGMSGADD
      END
    END
[* member Banno ID
*]
   DATALINE=@RGUSERCHR4
   CALL PARSEDATALINE
   CURRBANNOID=UPPERCASE(DATALINEFIELD(1))
   BNODEBUGMSG="RG4:"+CURRBANNOID
   CALL BNODEBUGMSGADD
   BNODEBUGMSG="BANNO ID:"+CURRBANNOID
   CALL BNODEBUGMSGADD


   IF LENGTH(NEWSTREET)>40 OR
      LENGTH(NEWEXTRAADDR)>40 OR
      LENGTH(NEWCITY)>40 OR
      LENGTH(NEWSTATE)>10 OR
      LENGTH(NEWZIPCODE)>10 OR
     (LENGTH(NEWCITY)+
      LENGTH(NEWSTATE)+
      LENGTH(NEWZIPCODE)>38) THEN
    DO
     CALL JSONOPEN
     CALL PRINTPROGRAMINFO
     RESPONSECODE=503
     ERROR503CHR="Address entry exceeds Episys limits"
     PARSEDTEXT(1)="Address entry exceeds Episys limits"

     CALL ERRORHANDLER
     CALL CREATENOTERECORD
    END
  END
END [PROCEDURE]

PROCEDURE CLEANUPTEXT
[* Check character string and remove any characters or hidden
** characters which have an ASCII value which is not established in
** the VALIDCHRINPUT1 string in the SETUP division . This is to avoid
** display issues with displaying the terms or conditions. Additionally,
** if a back-slash or double quote is encountered, add a preceding
** backslash
**  PASS       TMPCHR   String to test
**  RETURN     TMPCHR   Updated string
*]
 LELISTINPUT=VALIDCHRINPUT1
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXCHRVALUE
  DO
   VALIDCHARS(TMPLOOP)=LELIST(TMPLOOP)
  END
 TMPTEXT=""

 IF TMPCHR<>"" THEN
  DO
   FOR TMPTEXTLOOP=1 TO LENGTH(TMPCHR)
    DO
     CHRVAL=CHRVALUE(SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP))
     IF  VALIDCHARS(CHRVAL)=TRUE THEN
      DO
[* Check for back-slash or double-quote. If found, precede with a back-slash
*]
       IF (CHRVAL=92 OR CHRVAL=34) THEN
        TMPTEXT=TMPTEXT+"\"+SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP)
       ELSE
        TMPTEXT=TMPTEXT+SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP)
      END
    END
  END
 TMPCHR=TMPTEXT
END [PROCEDURE]

PROCEDURE VALIDATERGDATA
[* Check the member's new street address to see if it contains
** a PO Box address per the CU's configuration settings. If a
** PO Box address is found, set an error code and create a
** note record on the member's account
** PASS    NEWSTREET
** PASS    PARAMPORESTRICT Boolean flag: should the street be
**         checked for a PO Box address
** RETURN  POBOXFOUND  Boolean flag
** RETURN  RESPONSECODE  Error code 503 if PO Box found
*]
 POBOXFOUND=FALSE
 IF PARAMPORESTRICT=TRUE THEN
  DO
   BNODEBUGMSG="Validating street ("+NEWSTREET+") for PO Box"
   CALL BNODEBUGMSGADD

   FOR TMPLOOP=1 TO POBOXLISTMAX
    DO
     TMPCHR=UPPERCASE(POBOXLIST(TMPLOOP))

     BNODEBUGMSG="Evaluating: '"+TMPCHR+"'"
     CALL BNODEBUGMSGADD

     IF CHARACTERSEARCH(NEWSTREET,TMPCHR)>0 THEN
      DO
       POBOXFOUND=TRUE
       TMPLOOP=POBOXLISTMAX
      END
    END
  END

 IF POBOXFOUND=TRUE THEN
  DO
   CALL JSONOPEN
   CALL PRINTPROGRAMINFO
   RESPONSECODE=503
   ERROR503CHR="Attempt to enter PO Box as street addr."
   PARSEDTEXT(1)="Attempt to enter PO Box as street addr."

   CALL ERRORHANDLER
   CALL CREATENOTERECORD
   @RGSTATE=STATEEND
   @RGDATATYPE=9
  END
END [PROCEDURE]

PROCEDURE INITIALIZEDATA
[* Initialize state variables
*]
 WHILELIMIT=100000
 PREFLOC=@PREFLOCATOR
 LFNUMBER=0
 LFERROR=""
 VALIDACCOUNT=FALSE
 VALIDPARAMS=TRUE
 READCONFIGERROR=FALSE
 READCONFIGERRORMSG=""
 LFERROR=""
 LFNUMBER=0
 RESPONSECODE=0
 ADDRCHGSUCCESSFUL=FALSE
 NEWSTREET=""
 NEWEXTRAADDR=""
 NEWCITY=""
 NEWSTATE=""
 NEWZIPCODE=""
 FMERROR=""
 CLEARWARNERROR=""
 SETWARNERROR=""
 NAMELOC=0

 PARAMINELIGIBLEACCTS="NONE"
 PARAMWARNINGSACCT="NONE"

 FOR TMPLOOP=0 TO MAXWARNINGTYPES
  DO
   WARNINGSACCT(TMPLOOP)=FALSE
  END
END [PROCEDURE]

PROCEDURE CHECKFORMEMOMODE
[* Check to see if the system is in memo mode and if so, return error code
** 500 and halt program run.
** RETURN  SYSTEMMEMOMODE  Boolean flag
*]
 SYSTEMMEMOMODE=SYSMEMOMODE
 IF MEMOMODE=TRUE THEN
  SYSTEMMEMOMODE=TRUE
 IF SYSTEMMEMOMODE=TRUE THEN
  DO
   CALL JSONOPEN
   CALL PRINTPROGRAMINFO
   RESPONSECODE=500
   CALL ERRORHANDLER

   PARSEDTEXT(1)="Banno Chg addr err: System in Memo Mode"
   CALL CREATENOTERECORD

   @RGSTATE=STATEEND
   @RGDATATYPE=9
  END
END [PROCEDURE]

PROCEDURE CREATENOTERECORD
[* Create a note record on the member's account
** PASS PARSEDTEXT()  Array of member's note
*]
 FMPERFORM CREATE NOTE LOC BEFOREFIRST (0,0,NEWLOC,FMERROR)
  DO
   SET TEXT:1 TO PARSEDTEXT(1)
   SET TEXT:2 TO PARSEDTEXT(2)
   SET TEXT:3 TO PARSEDTEXT(3)
   SET TEXT:4 TO PARSEDTEXT(4)
   SET TEXT:5 TO PARSEDTEXT(5)
   SET EXPIRATIONDATE TO SYSTEMDATE+NOTEEXPIREDAYS
  END
END [PROCEDURE]

PROCEDURE JSONOPEN
[* Print JSON open char
*]
 PRINT "{"
 NEWLINE
END [PROCEDURE]

PROCEDURE JSONCLOSE
[* Print JSON close char
*]
 PRINT "}"
 NEWLINE
END [PROCEDURE]

PROCEDURE ERRORHANDLER
[* Print error code information to output.
**  PASS    RESPONSECODE  Error code to print
**  PASS    ERRORMSG  Response type to print
**  PASS    ERRORDETAIL  Specific Response detail
**
** RESPONSE CODES
**  500 - Program running in memo mode
**  501 - Config file processing error
**  502 - Ineligible Account
**  503 - Error processing requested changes
**  504 - Successful Address Update
**
*]
 ERRORMSG="loggingErrorMessage"
 ERRORDETAIL(0)="Program running in memo mode"
 ERRORDETAIL(1)=""
 ERRORDETAIL(2)="Ineligible Account"
 ERRORDETAIL(3)="Error processing requested changes:"+ERROR503CHR

 TMPCHR=FORMAT("##########9",NAMELOC)
 CALL NLS
 ERRORDETAIL(4)="Successful Address Update - Name LOC:"+TMPCHR

 ERRORDETAILOFFSET=RESPONSECODE-500

 IF ERRORDETAILOFFSET=1 THEN
  IF READCONFIGERROR=TRUE THEN
   ERRORDETAIL(1)=ERRORDETAIL(1)+READCONFIGERRORMSG
  ELSE IF PARAMVALIDATIONERROR=TRUE THEN
   ERRORDETAIL(1)=ERRORDETAIL(1)+" - "+PARAMVALIDATIONERRORCHR

 IF ERRORDETAILOFFSET=2 THEN
  IF WARNINGFOUND<>FALSE THEN
   ERRORDETAIL(2)=ERRORDETAIL(2)+FORMAT(": Acct Warning 9999",WARNINGFOUND)
  ELSE
   ERRORDETAIL(2)=ERRORDETAIL(2)+FORMAT(": Acct Type 9999",ACCOUNT:TYPE)

 PRINT "    "+Q+"responseCode"+Q+": "+FORMAT(Q+"999"+Q,RESPONSECODE)+","
 NEWLINE
 PRINT "    "+Q+ERRORMSG+Q+": "+
            Q+ERRORDETAIL(ERRORDETAILOFFSET)+Q
 NEWLINE
END [PROCEDURE]

PROCEDURE READCONFIGFILESETTINGS
[* Read parameter settings from the configuration Letter file.
**  IAT    PARAMINELIGIBLEACCTS  Ineligible Account Type(s) (in LISTEXPAND format)
**  AW     PARAMWARNINGSACCT     Acct level warnings which exclude account (in LISTEXPAND format)
**  CW     PARAMCLEARWARNING     Account level warning(s) to clear upon successfull address change
**  SW     PARAMSETWARNINGS      Account level warning to set upon successful address change
**  PR     PARAMPORESTRICT       Should the program check for and restrict a PO box entry?
**  DB     DEBUGMODE             Debug mode on or off
**
** PASS    CONFIGFILENAME   Configuration Letter file name
** RETURN  INVALIDACCTYPES()  Array of ineligible account types
** RETURN  WARNINGSACCT()  Array of account warnings restricting access
** RETURN  WARNINGTOCLEAR  Account warning to clear on successful addr. change
** RETURN  WARNINGTOSET  Account warning to set on successful addr. change
** RETURN  PARAMSETWARNINGEXPIRATION  Calculated warning expiration date for WARNINGTOSET
** RETURN  PARAMPORESTRICT  Boolean flag: test for PO Box address?
** RETURN  POBOXLIST()  Array of PO Box Text strings tp test for
** RETURN  DEBUGMODE  Boolean: Debug mode on or off
*]
 INVALIDCONFIGPARAMS=FALSE
 PARAMLOCFOUND=FALSE

 PARAMINELIGIBLEACCTS="NONE"
 PARAMWARNINGSACCT="NONE"
 PARAMCLEARWARNING="NONE"
 PARAMSETWARNING="NONE"
 PARAMPORESTRICT=TRUE
 DEBUGMODE=DEBUGMODEOFF
 POBOXINPUTFOUND=FALSE
 PARAMSETWARNINGEXPIRATION=DATENULL

 FILEOPEN("LETTER",CONFIGFILENAME,"READ",LFNUMBER,LFERROR)
 IF LFERROR<>"" THEN
  DO
   READCONFIGERROR=TRUE
   READCONFIGERRORMSG="CFG open error "+CONFIGFILENAME+": "+LFERROR
  END
 ELSE
  DO
   FILEREADLINE(LFNUMBER,LFLINE,LFERROR)
   IF LFERROR<>"" AND
      LFERROR<>"EOF" THEN
    DO
     READCONFIGERROR=TRUE
     READCONFIGERRORMSG="CFG read error "+CONFIGFILENAME+": "+LFERROR
    END
   WHILE LFERROR=""
    DO
     CALL NORMALIZEDATA
     IF PARAMNAME<>"" THEN
      DO

[* Ineligible Account Type(s)
*]
       IF PARAMNAME="IAT" AND
          PARAMVALUE<>"" THEN
        PARAMINELIGIBLEACCTS=PARAMVALUE
[* Account warnings restricting access
*]
       ELSE IF PARAMNAME="AW" AND
               PARAMVALUE<>"" THEN
        PARAMWARNINGSACCT=PARAMVALUE

[* Account warnings to clear
*]
       ELSE IF PARAMNAME="CW" AND
               PARAMVALUE<>"" THEN
        PARAMCLEARWARNING=PARAMVALUE

[* Account warning to set
*]
       ELSE IF PARAMNAME="SW" AND
               PARAMVALUE<>"" THEN
        PARAMSETWARNING=PARAMVALUE

[* Account warning expiration date
*]
       ELSE IF PARAMNAME="ED" AND
               VALUE(PARAMVALUE)>0 THEN
        PARAMSETWARNINGEXPIRATION=SYSTEMDATE+VALUE(PARAMVALUE)

[* PO Box restrict flag
*]
       IF PARAMNAME="PR" AND
          PARAMVALUE<>"" THEN
        DO
         IF CHARACTERSEARCH("0FALSENO",UPPERCASE(PARAMVALUE))>0 THEN
         PARAMPORESTRICT=FALSE
        END

[* Debug mode
*]
       ELSE IF PARAMNAME="DB" AND
          PARAMVALUE<>"" THEN
        DO
         IF CHARACTERSEARCH("1DEBUGMODEONTRUEYES",UPPERCASE(PARAMVALUE))>0 THEN
         DEBUGMODE=DEBUGMODEON
        END

[* Load an array of targeted PO Box text entries to check against
*]
       IF PARAMPORESTRICT=TRUE THEN
        DO
         FOR TMPLOOP=1 TO POBOXLISTMAX
          DO
           TMPCHR=UPPERCASE(FORMAT("PO Box List 99",TMPLOOP))
           IF PARAMNAME=TMPCHR AND
              PARAMVALUE<>"" THEN
            DO
             POBOXINPUTFOUND=TRUE
             POBOXLIST(TMPLOOP)=UPPERCASE(PARAMVALUE)
            END
          END
        END
      END
     PARAMNAME=""
     PARAMVALUE=""
     FILEREADLINE(LFNUMBER,LFLINE,LFERROR)
     IF LFERROR<>"" AND
        LFERROR<>"EOF" THEN
      DO
       READCONFIGERROR=TRUE
       READCONFIGERRORMSG="CFG read error "+CONFIGFILENAME+": "+LFERROR
      END

    END [WHILE LFERROR=""]
   FILECLOSE(LFNUMBER,LFERROR)
  END

 BNODEBUGMSG="IAT:"+PARAMINELIGIBLEACCTS
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="AW:"+PARAMWARNINGSACCT
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="CW:"+PARAMCLEARWARNING
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="SW:"+PARAMSETWARNING
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="PR:"+FORMAT("9",PARAMPORESTRICT)
 CALL BNODEBUGMSGADD
 BNODEBUGMSG="DB:"+FORMAT("9",DEBUGMODE)
 CALL BNODEBUGMSGADD

 IF PARAMPORESTRICT=TRUE THEN
  DO
   FOR TMPLOOP=1 TO POBOXLISTMAX
    DO
     IF POBOXLIST(TMPLOOP)<>"" THEN
      DO
       BNODEBUGMSG=FORMAT("PO BOX (99):",TMPLOOP)+POBOXLIST(TMPLOOP)
       CALL BNODEBUGMSGADD
      END
    END
  END

 CALL VALIDATECONFIG

 IF RESPONSECODE=0 THEN
  DO
   LELISTINPUT=PARAMINELIGIBLEACCTS
   IF LELISTINPUT="" THEN
    LELISTINPUT="NONE"
   CALL LISTEXPAND
   FOR TMPLOOP=0 TO 9999
    DO
     INVALIDACCTYPES(TMPLOOP)=LELIST(TMPLOOP)
    END

   LELISTINPUT=PARAMWARNINGSACCT
   IF LELISTINPUT="" THEN
    LELISTINPUT="NONE"
   CALL LISTEXPAND
   FOR TMPLOOP=0 TO MAXWARNINGTYPES
    DO
     WARNINGSACCT(TMPLOOP)=LELIST(TMPLOOP)
    END

   WARNINGTOCLEAR=VALUE(PARAMCLEARWARNING)
   WARNINGTOSET=VALUE(PARAMSETWARNING)

  END
END [PROCEDURE]

PROCEDURE VALIDATECONFIG
[* Validate some configuration Letter file values
** PASS
** RETURN  PARAMVALIDATIONERROR  Boolean flag
** RETURN  PARAMVALIDATIONERRORCHR  Error return description
** RETURN  RESPONSECODE  Error code pertinent to error type
*]
 PARAMVALIDATIONERROR=FALSE
 PARAMVALIDATIONERRORCHR=""

 IF READCONFIGERROR=TRUE THEN
  DO
   NEWLINE
   CALL JSONOPEN
   CALL PRINTPROGRAMINFO

   RESPONSECODE=501
   CALL ERRORHANDLER
   @RGSTATE=STATEEND
   PARSEDTEXT(1)=READCONFIGERRORMSG
   CALL CREATENOTERECORD
  END
 ELSE
  DO
[* Test eligible account types input
*]
   IF PARAMINELIGIBLEACCTS<>"" THEN
    DO
     TESTCHR=PARAMINELIGIBLEACCTS
     CALL VALIDATERANGEINPUT
     IF VALIDRANGEINPUT=FALSE THEN
      DO
       PARAMVALIDATIONERROR=TRUE
       PARAMVALIDATIONERRORCHR="Invalid Acct Types Setup"
      END
    END
[* Test account warning types input
*]
   IF PARAMWARNINGSACCT<>"" AND
      PARAMVALIDATIONERROR=FALSE THEN
    DO
     TESTCHR=PARAMWARNINGSACCT
     CALL VALIDATERANGEINPUT
     IF VALIDRANGEINPUT=FALSE THEN
      DO
       PARAMVALIDATIONERROR=TRUE
       PARAMVALIDATIONERRORCHR="Invalid Warning Types Setup"
      END
    END
[* Test clear warning type input
*]
   IF PARAMCLEARWARNING<>"" AND
      PARAMVALIDATIONERROR=FALSE THEN
    DO
     TESTCHR=PARAMCLEARWARNING
     IF UPPERCASE(TESTCHR)<>"NONE" AND
       (VALUE(TESTCHR)<1 OR
        VALUE(TESTCHR)>999) THEN
      DO
       PARAMVALIDATIONERROR=TRUE
       PARAMVALIDATIONERRORCHR="Invalid Clear Warning Type Setup"
      END
    END
[* Test set warning type input
*]
   IF PARAMSETWARNING<>"" AND
      PARAMVALIDATIONERROR=FALSE THEN
    DO
     TESTCHR=PARAMSETWARNING
     IF UPPERCASE(TESTCHR)<>"NONE" AND
       (VALUE(TESTCHR)<1 OR
        VALUE(TESTCHR)>999) THEN
      DO
       PARAMVALIDATIONERROR=TRUE
       PARAMVALIDATIONERRORCHR="Invalid Set Warning Type Setup"
      END
    END
  END
[* If PO Box restrictions are in effect test for PO Box list entry
*]
 IF PARAMPORESTRICT=TRUE AND
    POBOXINPUTFOUND=FALSE AND
    PARAMVALIDATIONERROR=FALSE THEN
  DO
   PARAMVALIDATIONERROR=TRUE
   PARAMVALIDATIONERRORCHR="PO Box Types Setup Incomplete"
  END
 IF PARAMVALIDATIONERROR=TRUE THEN
  DO
   NEWLINE
   CALL JSONOPEN
   CALL PRINTPROGRAMINFO

   RESPONSECODE=501
   CALL ERRORHANDLER
   @RGSTATE=STATEEND
   PARSEDTEXT(1)="Banno Chg addr err: Cfg file invalid"
   CALL CREATENOTERECORD
  END
END [PROCEDURE]

PROCEDURE NORMALIZEDATA
[* Normalize the data and if a parameter, separate into
** parameter name and value
** PASS    LFLINE  Character line read in
** RETURN  PARAMNAME  Parameter name found
** RETURN  PARAMVALUE  Parameter value
*]
 PARAMNAME=""
 PARAMVALUE=""

 POS=CHARACTERSEARCH(LFLINE,":")
 IF LFLINE<>"" AND
    SEGMENT(LFLINE,1,1)<>"*" AND
    POS>1 THEN
  DO
   TMPCHR=SEGMENT(LFLINE,1,POS-1)
   CALL NLTS
   PARAMNAME=UPPERCASE(TMPCHR)

   TMPCHR=SEGMENT(LFLINE,POS+1,LENGTH(LFLINE))
   CALL NLTS
   PARAMVALUE=TMPCHR
  END
END [PROCEDURE]

PROCEDURE NLTS
[* Remove leading AND trailing spaces
**  PASS    TMPCHR
**  RETURN  TMPCHR
*]
 CALL NTS
 IF TMPCHR<>"" THEN
  CALL NLS
END [PROCEDURE]

PROCEDURE NLS
[* Remove leading spaces
**  PASS    TMPCHR
**  RETURN  TMPCHR
*]
 WHILE (LENGTH(TMPCHR)>0 AND
        SEGMENT(TMPCHR,1,1)=" ")
  DO
   IF LENGTH(TMPCHR)=1 THEN
    TMPCHR=""
   ELSE
    TMPCHR=SEGMENT(TMPCHR,2,LENGTH(TMPCHR))
  END
 IF LENGTH(TMPCHR)=0 THEN
  TMPCHR=""
END [PROCEDURE]

PROCEDURE NTS
[* Remove trailing spaces
**  PASS    TMPCHR
**  RETURN  TMPCHR
*]
 IF TMPCHR<>"" THEN
  TMPCHR=SEGMENT(TMPCHR,1,LENGTH(TMPCHR))
 IF LENGTH(TMPCHR)=0 THEN
  TMPCHR=""
END [PROCEDURE]

PROCEDURE RETURNJSON1
[* Send required JSON formatted output
** RETURN  RESPONSECODE  Response code
** RETURN  @RGSTATE  Program state
*]
 PRINT INDENT(0)+"{"
 NEWLINE

 CALL PRINTPROGRAMINFO
 IF ADDRCHGSUCCESSFUL=TRUE THEN
  DO
   NEWLINE
   RESPONSECODE=504
   CALL ERRORHANDLER
   @RGSTATE=STATEEND
  END
 ELSE
  DO
   NEWLINE
   RESPONSECODE=503
   CALL ERRORHANDLER
   @RGSTATE=STATEEND
  END
 NEWLINE
END [PROCEDURE]

PROCEDURE PARSEDATALINE
[* Parse through a line of data, looking for a pipe delimiter.
** Seperate text at the delimiter storing each segment into
** array elements
** PASS    DATALINE  Text to parse through
** RETURN  DATALINEFIELD() Array of text elements
*]
 FOR TMPLOOP=0 TO DATALINEFIELDMAX
  DO
   DATALINEFIELD(TMPLOOP)=""
  END
 DATAFIELDCOUNT=0

 WHILE DATALINE<>""
  DO
   POS=CHARACTERSEARCH(DATALINE,"|")
   DATAFIELDCOUNT=DATAFIELDCOUNT+1
   IF POS=0 THEN
    DO
     DATALINEFIELD(DATAFIELDCOUNT)=DATALINE
     DATALINE=""
    END
   ELSE
    DO
     DATALINEFIELD(DATAFIELDCOUNT)=SEGMENT(DATALINE,1,POS-1)
     DATALINE=SEGMENT(DATALINE,POS+1,LENGTH(DATALINE))
    END
  END
END [PROCEDURE]

PROCEDURE BNOPRINTDEBUG
[* Print debug output in proper JSON format
**  PASS  DEBUGMODE  Boolean: Print debug data, T/F
**  PASS  BNODEBUGMSGLIST()  Array of debug messages to print
*]
 IF DEBUGMODE=DEBUGMODEON THEN
  DO
   PRINT ","
   NEWLINE
   PRINT INDENT(2)+Q+"debugData"+Q+": ["
   NEWLINE
   FOR DEBUGLOOP=1 TO BNODEBUGCOUNT
    DO
     PRINT INDENT(2)+Q+BNODEBUGMSGLIST(DEBUGLOOP)+Q
     IF DEBUGLOOP<BNODEBUGCOUNT THEN
      PRINT ","
     NEWLINE
    END
   PRINT INDENT(2)+"]"
   NEWLINE
  END
END [PROCEDURE]

PROCEDURE BNODEBUGMSGADD
[* Add a message to the debug message array
** PASS    BNODEBUGCOUNT  Current array index
** PASS    BNODEBUGMSG  Debug message to add to array
*]
 IF BNODEBUGCOUNT<BNODEBUGMSGMAX THEN
  DO
   BNODEBUGCOUNT=BNODEBUGCOUNT+1
   BNODEBUGMSGLIST(BNODEBUGCOUNT)=BNODEBUGMSG
   BNODEBUGMSG=""
  END
END [PROCEDURE]

PROCEDURE VALIDATERANGEINPUT
[* Validate user input as valid listexpand input
**  PASS       TESTCHR          User input
**  RETURN     VALIDRANGEINPUT  Boolean T/F
*]
 VALIDRANGEINPUT=TRUE
 FOR TESTLOOP=1 TO LENGTH(TESTCHR)
  DO
   IF CHARACTERSEARCH("0123456789,- ALLNONE",UPPERCASE(SEGMENT(TESTCHR,TESTLOOP,TESTLOOP)))=0 THEN
    DO
     VALIDRANGEINPUT=FALSE
     TESTLOOP=LENGTH(TESTCHR)
    END
  END
 BNODEBUGMSG="Range Input Test ("+TESTCHR+"):"+TRUEFALSECHR(VALIDRANGEINPUT)
 CALL BNODEBUGMSGADD
END [PROCEDURE]

PROCEDURE PRINTPROGRAMINFO
[* Print program info to JSON output
*]

 PRINT INDENT(1)+Q+"programInfo"+Q+": {"
 NEWLINE
 PRINT INDENT(2)+Q+"programName"+Q+": "+Q+"BANNO.CHANGE.ADDR.V1.POW"+Q+","
 NEWLINE
 PRINT INDENT(2)+Q+"programVersion"+Q+": "+Q+PROGRAMVERSION+Q+","
 NEWLINE
 PRINT INDENT(2)+Q+"programLastModDate"+Q+": "+Q+FORMAT("99/99/99-",LASTMODDATE)+LASTMODTIME+Q+","
 NEWLINE
 PRINT INDENT(2)+Q+"programNote1"+Q+": "+Q+PROGRAMUPDATENOTE1+Q+","
 NEWLINE
 PRINT INDENT(2)+Q+"programNote2"+Q+": "+Q+PROGRAMUPDATENOTE2+Q
 NEWLINE
 PRINT INDENT(1)+"},"
 NEWLINE


 CALL PRINTRGDATA

END [PROCEDURE]

PROCEDURE PARSETEXTFIELD
[* Parse through a single text variable with a max length of 110
** characters to create an array of the text where each element
** of the array is limited to a max number of characters. Procedure will create
** a segment break at the first space found prior to the max segment length. If
** no space is found, the entire segment length will be stored into the array.
**
**   PASS   PARSETEXTLENGTH    Max length of each parsed text segment
**   PASS   PARSEDTEXTSTART    The PARSEDTEXT array element to start storing the
**                             segments in
**   PASS   PARSETEXTRAW       The original text string
**   RETURN PARSEDTEXTCOUNT    The number of array elements of the parsed text
**   RETURN PARSEDTEXT         An array of the parsed text segments
*]
 PARSEDTEXTCOUNT=0
 IF PARSEDTEXTSTART>0 THEN
  PARSEDTEXTCOUNT=PARSEDTEXTSTART-1

 BNODEBUGMSG="PARSETEXTRAW="+PARSETEXTRAW
 CALL BNODEBUGMSGADD

 WHILE PARSETEXTRAW<>""
  DO
   IF LENGTH(PARSETEXTRAW)<=40 THEN
    DO
     IF PARSEDTEXTCOUNT<PARSEDTEXTMAX THEN
      DO
       PARSEDTEXTCOUNT=PARSEDTEXTCOUNT+1
       PARSEDTEXT(PARSEDTEXTCOUNT)=PARSETEXTRAW
       PARSETEXTRAW=""
      END
    END
   ELSE
    DO
     POS=40
     WHILE (FOUND=FALSE AND POS>0)
      DO
       IF SEGMENT(PARSETEXTRAW,POS,POS)=" " THEN
        FOUND=TRUE
       ELSE
        POS=POS-1
      END
     IF FOUND=FALSE THEN
      DO [no space found in first 40 charcters - grab first 40 characters]
       IF PARSEDTEXTCOUNT<PARSEDTEXTMAX THEN
        DO
         PARSEDTEXTCOUNT=PARSEDTEXTCOUNT+1
         PARSEDTEXT(PARSEDTEXTCOUNT)=SEGMENT(PARSETEXTRAW,1,40)
         PARSETEXTRAW=SEGMENT(PARSETEXTRAW,41,LENGTH(PARSETEXTRAW))
        END
      END
     ELSE
      DO [space found. grab chars 1 through space-1, leave remaining]
       IF PARSEDTEXTCOUNT<PARSEDTEXTMAX THEN
        DO
         PARSEDTEXTCOUNT=PARSEDTEXTCOUNT+1
         PARSEDTEXT(PARSEDTEXTCOUNT)=SEGMENT(PARSETEXTRAW,1,POS-1)
         PARSETEXTRAW=SEGMENT(PARSETEXTRAW,POS+1,LENGTH(PARSETEXTRAW))
        END
      END
    END
  END
 FOR TMPLOOP=1 TO PARSEDTEXTMAX
  DO
   IF PARSEDTEXT(TMPLOOP)<>"" THEN
    DO
     BNODEBUGMSG=FORMAT("PARSEDTEXT:(99) - '",TMPLOOP)+PARSEDTEXT(TMPLOOP)+"'"
     CALL BNODEBUGMSGADD
    END
  END
END [PROCEDURE]

PROCEDURE PRINTRGDATA
 IF SYSTEMDATE<LASTMODDATE+PRINTRGINFODAYS THEN
  DO
   PRINT INDENT(1)+Q+"@RG Data"+Q+": {"
   NEWLINE
   PRINT INDENT(2)+Q+"@RGSTATE"+Q+": "+Q+@RGSTATE+Q+","
   NEWLINE
   PRINT INDENT(2)+Q+"@RGUSERCHR1"+Q+": "+Q+@RGUSERCHR1+Q+","
   NEWLINE
   PRINT INDENT(2)+Q+"@RGUSERCHR2"+Q+": "+Q+@RGUSERCHR2+Q+","
   NEWLINE
   PRINT INDENT(2)+Q+"@RGUSERCHR3"+Q+": "+Q+@RGUSERCHR3+Q+","
   NEWLINE
   PRINT INDENT(2)+Q+"@RGUSERCHR4"+Q+": "+Q+@RGUSERCHR4+Q
   NEWLINE
   PRINT INDENT(1)+"},"
   NEWLINE
  END
END

#INCLUDE "RB.LISTEXPAND"
