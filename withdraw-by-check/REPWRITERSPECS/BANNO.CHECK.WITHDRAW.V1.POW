[*
**  PowerOn Name:       BANNO.CHECK.WITHDRAW.V1.POW
**  Letterfile Name:    BANNO.CHECK.WITHDRAW.V1.CFG
**
**  Copyright 2020-2022 Jack Henry & Associates, Inc.
**
**  Modification History:
**   Ver. 1.0.0  03/13/2020: T. Kainz - Original Programming
**   Ver. 1.0.1  04/16/2020: fixes for invalid punctuation in share descriptions
**   Ver. 1.0.2  05/14/2020: corrected error condition when no terms and conditions
**                           defined in the parameter file.
**   Ver. 1.0.3  08/12/2020: corrected TOC end of line spacing issue
**   Ver. 1.0.4  09/18/2020: Added check for attempted cross account access and return
**                           error code 505 if true. Updated TOC line spacing logic.
**   Ver. 1.1.0  08/26/2022: T. Kainz - Added parameter settings for min/max WD Amounts.
**                           Corrected max share/loan type calculation, added program
**                           info and debug output to JSON output. Corrected loan available
**                           amounts calculations. Corrected parameter file reading which was
**                           keeping blank lines from being recognized by the UX.
**
**  This Banno service PowerOn allows the user to request a
**  withdrawal by check from an eligible share or loan
**
**  For more information check
**  https://github.com/Banno/banno-powerons
**
**  Banno is not responsible for any modifications to this file
**  made by unauthorized personnel.
**
**  DO NOT MODIFY THIS FILE UNLESS YOU KNOW WHAT YOU'RE DOING!
*]

SYMCONNECT
STATELESS

TARGET=ACCOUNT

DEFINE
 #INCLUDE "RD.GETDATA.DEF"
 #INCLUDE "RB.LISTEXPAND.DEF"

 TRUE=1
 FALSE=0
 CONFIGFILENAME            = "BANNO.CHECK.WITHDRAW.V1.CFG"
 STATESTART                = "STATESTART"
 STATEPERFORMWITHDRAW      = "PERFORMWITHDRAW"
 DATENULL                  = '--/--/--'

 BNODEBUGMODE              = NUMBER
 LFNUMBER                  = NUMBER
 LFERROR                   = CHARACTER
 LFLINE                    = CHARACTER
 READCONFIGERROR           = NUMBER
 READCONFIGERRORMSG        = CHARACTER
 PARAMCHR                  = CHARACTER
 PARAMREGD                 = NUMBER
 PARAMVALIDSHARETYPES      = CHARACTER
 PARAMVALIDLOANTYPES       = CHARACTER
 PARAMCASHADVLIMIT         = MONEY
 PARAMMINWDLIMIT           = MONEY
 PARAMMAXWDLIMIT           = MONEY
 PARAMWARNINGSACCT         = CHARACTER
 PARAMWARNINGSSHARE        = CHARACTER
 PARAMWARNINGSLOAN         = CHARACTER
 PARAMCUSTOMTERMS          = CHARACTER ARRAY(40)
 PARAMCUSTOMTERMLINES      = NUMBER
 PARAMCUSTOMTERMLINESMAX   = 40
 PARAMNAME                 = CHARACTER
 PARAMVALUE                = CHARACTER
 VALIDSHARETYPES           = NUMBER    ARRAY(9999)
 VALIDLOANTYPES            = NUMBER    ARRAY(9999)
 CASHADVLIMIT              = MONEY
 WARNINGSACCT              = NUMBER    ARRAY(999)
 WARNINGSSHARE             = NUMBER    ARRAY(999)
 WARNINGSLOAN              = NUMBER    ARRAY(999)
 ACCTFOUND                 = NUMBER
 ACCTWARNINGFOUND          = NUMBER
 VALIDADDRESS              = NUMBER
 VALIDSLTYPE               = NUMBER
 SLWARNINGFOUND            = NUMBER
 SLAVAILABLEBALCHR         = CHARACTER
 TMPLOOP                   = NUMBER
 TMPCHR                    = CHARACTER
 POS                       = NUMBER
 Q                         = CHARACTER
 MEMBERNUM                 = CHARACTER
 SLTYPE                    = CHARACTER
 SLID                      = CHARACTER
 SLAVAILABLEBAL            = MONEY
 SLDESCRIPTION             = CHARACTER
 VALIDACCT                 = NUMBER
 FOUND                     = NUMBER
 WDAMOUNT                  = MONEY
 TRANSEQ1                  = NUMBER
 TRANSEQ2                  = NUMBER
 TRANCHKACCTCD             = CHARACTER
 TRANCHKNUMBER             = CHARACTER
 TRANERROR                 = CHARACTER
 REGDCHKCODE               = NUMBER
 ERRORCODE                 = CHARACTER
 ERRORMSG                  = CHARACTER
 ERRORDETAIL               = CHARACTER
 ADDRESSLINECOUNT          = NUMBER
 SLFOUND                   = NUMBER
 SLIDLENGTH                = NUMBER
 SLTYPELENGTH              = NUMBER
 MAXWARNINGTYPES           = NUMBER
 MAXSLTYPES                = NUMBER
 TMPTEXT                   = CHARACTER
 TMPTEXTLOOP               = NUMBER
 CHRVAL                    = NUMBER
 ADDRESSLOC                = NUMBER
 NADDRESSTYPE              = NUMBER
   ADDRTYPEDOM             = 0
   ADDRTYPEFOR             = 1
   ADDRTYPEFORZL           = 2
 VALIDCHRINPUT1            = CHARACTER
 VALIDCHARS                = NUMBER ARRAY(999)
 MAXCHRVALUE               = 255

 INCLUDEPROGRAMINFO        = NUMBER
 BNOLASTMODDATE            = DATE
 BNOLASTMODTIME            = CHARACTER
 BNOPROGRAMNAME            = CHARACTER
 BNOCFGFILENAME            = CHARACTER
 BNOPROGRAMVERSION         = CHARACTER
 BNODEBUGLOOP              = NUMBER
 BNODEBUGCOUNT             = NUMBER
 BNODEBUGMSG               = CHARACTER
 BNODEBUGMSGLIST           = CHARACTER ARRAY(199)
 BNODEBUGMSGMAX            = 199
 BNOPRINTDEBUGINFODAYS     = NUMBER
 BNODEBUGMODEOFF           = 0
 BNODEBUGMODEON            = 1
 BNOINDENTMAX              = 9
 BNOLOCALLOOP              = NUMBER
END [DEFINE]

SETUP
 Q=CTRLCHR(34)

 INCLUDEPROGRAMINFO=TRUE
 BNOLASTMODDATE='08/18/22'
 BNOLASTMODTIME="12:30 MT"
 BNOPROGRAMNAME="BANNO.CHECK.WITHDRAW.V1.POW"
 BNOCFGFILENAME="BANNO.CHECK.WITHDRAW.V1.CFG"
 BNOPROGRAMVERSION="1.1.0"
 BNOPRINTDEBUGINFODAYS=90

 SLIDLENGTH=GETDATANUMBER(GETPARAMIDLENGTH)
 SLTYPELENGTH=GETDATANUMBER(GETPARAMTYPELENGTH)
 IF SLTYPELENGTH=2 THEN
  MAXSLTYPES=99
 ELSE
  MAXSLTYPES=9999
 MAXWARNINGTYPES=999
 VALIDCHRINPUT1="32-126,128-175,181-184,189,190,198,199,208-216,221,222,224-253"

END [SETUP]

PRINT TITLE="BANNO.CHECK.WITHDRAW.V1.POW"
[* STATE: STATESTART
**   Find and validate account
**      Invalid account - return error code and logging message
**      Valid account - return account description, owner, payee address,
**      disclosure text and amount available for WD
** STATE: PERFORMWITHDRAW
**   Find and validate account
**      Invalid account - return error code and logging message
**      Valid account - perform WD Transaction
**        Unsuccessful - return error code and logging message
**        Successful - return 'success:true', memomode (true/false)
*]
 CALL INITIALIZEDATA
 CALL READCONFIGFILESETTINGS

 IF READCONFIGERROR=TRUE THEN
  DO
   ERRORCODE="500"
   ERRORMSG="loggingErrorMessage"
   ERRORDETAIL=READCONFIGERRORMSG
   CALL ERRORHANDLER
  END
 ELSE
  DO
   IF @RGSTATE=STATESTART THEN
    DO
     CALL GETRGVALUES
     IF MEMBERNUM<>ACCOUNT:NUMBER THEN
      DO
       ERRORCODE="505"
       ERRORMSG="loggingErrorMessage"
       ERRORDETAIL="Cross Account WD Attempted"
       CALL ERRORHANDLER
      END
     ELSE
      DO
       CALL FINDACCOUNT
       IF VALIDACCT=TRUE THEN
        CALL RETURNVALIDACCT
       ELSE
        CALL RETURNINVALIDACCT
      END
    END
   ELSE IF @RGSTATE=STATEPERFORMWITHDRAW THEN
    DO
     CALL GETRGVALUES
     IF MEMBERNUM<>ACCOUNT:NUMBER THEN
      DO
       ERRORCODE="505"
       ERRORMSG="loggingErrorMessage"
       ERRORDETAIL="Cross Account WD Attempted"
       CALL ERRORHANDLER
      END
     ELSE
      DO
       CALL FINDACCOUNT
       IF VALIDACCT=FALSE THEN
        CALL RETURNINVALIDACCT
       ELSE IF WDAMOUNT<=$0.00 OR
               WDAMOUNT>SLAVAILABLEBAL THEN
        DO
         ERRORCODE="507"
         ERRORMSG="loggingErrorMessage"
         TMPCHR=FORMAT(" ###,##9.99",WDAMOUNT)
         CALL NLS
         ERRORDETAIL="Amount req. "+TMPCHR
         TMPCHR=FORMAT(" ###,##9.99",SLAVAILABLEBAL)
         CALL NLS
         ERRORDETAIL=ERRORDETAIL+" exceeds avail. "+TMPCHR
         CALL ERRORHANDLER
        END
       ELSE IF ((PARAMMINWDLIMIT>$0.00 AND
                 WDAMOUNT<PARAMMINWDLIMIT) OR
                (PARAMMAXWDLIMIT>$0.00 AND
                 WDAMOUNT>PARAMMAXWDLIMIT)) THEN
        DO
         ERRORCODE="506"
         ERRORMSG="loggingErrorMessage"
         ERRORDETAIL="Amount requested out of bounds"
         CALL ERRORHANDLER
         PRINT ","
         NEWLINE
         TMPCHR=FORMAT(" ###,##9.99",WDAMOUNT)
         CALL NLS
         PRINT "    "+Q+"requested"+Q+": "+Q+TMPCHR+Q+","
         NEWLINE
         TMPCHR=FORMAT(" ###,##9.99",PARAMMINWDLIMIT)
         CALL NLS
         PRINT "    "+Q+"minWdAmount"+Q+": "+Q+TMPCHR+Q+","
         NEWLINE
         TMPCHR=FORMAT(" ###,##9.99",PARAMMAXWDLIMIT)
         CALL NLS
         PRINT "    "+Q+"maxWdAmount"+Q+": "+Q+TMPCHR+Q
         NEWLINE
        END
       ELSE
        DO
         IF SLTYPE="S" AND
            PARAMREGD=TRUE THEN
          REGDCHKCODE=1
         ELSE
          REGDCHKCODE=0

         IF SLTYPE="S" THEN
          DO
           TRANPERFORM WK (1,TRANSEQ1,TRANSEQ2,TRANCHKACCTCD,TRANCHKNUMBER,
                           TRANERROR)
            DO
             SET FMACCT TO MEMBERNUM
             SET FMTYPE TO SLTYPE
             SET FMID TO SLID
             SET AMOUNT TO WDAMOUNT
             SET ISSUE TO "S"
             SET REGDCHK TO REGDCHKCODE
             SET CHECKTYPE TO 0
            END
          END
         ELSE
          DO
           TRANPERFORM AK (1,TRANSEQ1,TRANSEQ2,TRANCHKACCTCD,TRANCHKNUMBER,
                           TRANERROR)
            DO
             SET FMACCT TO MEMBERNUM
             SET FMTYPE TO SLTYPE
             SET FMID TO SLID
             SET AMOUNT TO WDAMOUNT
             SET ISSUE TO "S"
             SET REGDCHK TO REGDCHKCODE
             SET CHECKTYPE TO 0
            END
          END
         IF TRANERROR="" THEN
          DO
           PRINT "{"
           NEWLINE
           PRINT "  "+Q+"results"+Q+": {"
           NEWLINE
           PRINT "    "+Q+"success"+Q+": true,"
           NEWLINE
           PRINT "    "+Q+"memoMode"+Q+": "
           IF SYSMEMOMODE=0 THEN
            PRINT "false"
           ELSE
            PRINT "true"
           PRINT "  }"
           NEWLINE
          END
         ELSE
          DO
           IF CHARACTERSEARCH(UPPERCASE(TRANERROR),"REG D")>0 THEN
            ERRORCODE="504"
           ELSE IF TRANERROR="NSF" THEN
            ERRORCODE="507"
           ELSE
            ERRORCODE="509"
           ERRORMSG="loggingErrorMessage"
           ERRORDETAIL="TRANPERFORM Error: "+TRANERROR
           CALL ERRORHANDLER
          END
        END
      END
    END
  END
 CALL BNOPRINTPROGRAMINFO
 CALL BNOPRINTRGDATA
 CALL BNOPRINTDEBUG

 PRINT "  }"
 NEWLINE
END [PRINT]

PROCEDURE RETURNVALIDACCT
[* Set the return JSON code for a valid account
*]
 PRINT "{"
 NEWLINE
 PRINT "  "+Q+"results"+Q+": {"
 NEWLINE
 PRINT "    "+Q+"eligible"+Q+": true,"
 NEWLINE
 PRINT "    "+Q+"memberAccountNumber"+Q+": "+Q+@RGUSERCHR1+Q+","
 NEWLINE
 PRINT "    "+Q+"shareLoanDescription"+Q+": "+Q+SLDESCRIPTION+Q+","
 NEWLINE
 PRINT "    "+Q+"available"+Q+": "+Q+SLAVAILABLEBALCHR+Q+","
 NEWLINE
 TMPCHR=FORMAT("########9.99",PARAMMINWDLIMIT)
 CALL NLTS
 PRINT "    "+Q+"minWdAmount"+Q+": "+Q+TMPCHR+Q+","
 NEWLINE
 TMPCHR=FORMAT("########9.99",PARAMMAXWDLIMIT)
 CALL NLTS
 PRINT "    "+Q+"maxWdAmount"+Q+": "+Q+TMPCHR+Q+","
 NEWLINE
 PRINT "    "+Q+"owner"+Q+": "+Q+NAME:LONGNAME+Q+","
 NEWLINE
 PRINT "    "+Q+"address"+Q+": ["
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:1
 CALL NLTS
 PRINT "      "+Q+TMPCHR+Q+","
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:2
 CALL NLTS
 PRINT "      "+Q+TMPCHR+Q+","
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:3
 CALL NLTS
 PRINT "      "+Q+TMPCHR+Q+","
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:4
 CALL NLTS
 PRINT "      "+Q+TMPCHR+Q+","
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:5
 CALL NLTS
 PRINT "      "+Q+TMPCHR+Q+","
 NEWLINE
 TMPCHR=ACCOUNT:PAYEELINE:6
 CALL NLTS
 PRINT "      "+Q+TMPCHR+Q+""
 NEWLINE
 PRINT "    ],"
 NEWLINE
 PRINT "    "+Q+"disclaimerText"+Q+": ["
 NEWLINE

 FOR TMPLOOP=1 TO PARAMCUSTOMTERMLINES
  DO
   TMPCHR=PARAMCUSTOMTERMS(TMPLOOP)
   CALL NTS
   PRINT "   "
   PRINT Q
   IF TMPLOOP>1 AND
      TMPCHR<>"" AND
      PARAMCUSTOMTERMS(TMPLOOP-1)<>"" THEN
    PRINT " "
   PRINT TMPCHR+Q
   IF TMPLOOP<PARAMCUSTOMTERMLINES THEN
    PRINT ","
   NEWLINE
  END

 PRINT "]"
 PRINT "  }"
 NEWLINE
END [PROCEDURE]

PROCEDURE RETURNINVALIDACCT
[* Set correct error message
** PASS    [various]     valid acct test (true/false)
** RETURN  ERRORCODE     Error code for UX based upon flag
**         ERRORMSG      Error message for internal tracking
**         ERRORDETAIL   Error detail for internal tracking
*]
 TMPCHR=""
 IF ACCTFOUND=FALSE THEN
  TMPCHR="Account Not Found"
 ELSE IF ACCTWARNINGFOUND=TRUE THEN
  TMPCHR="Account Warning Found"
 ELSE IF VALIDADDRESS=FALSE THEN
  TMPCHR="Invalid Address"
 ELSE IF SLFOUND=FALSE THEN
  IF SLTYPE="S" THEN
   TMPCHR="Share Not Found"
  ELSE
   TMPCHR="Loan Not Found"
 ELSE IF VALIDSLTYPE=FALSE THEN
  IF SLTYPE="S" THEN
   TMPCHR="Invalid Share Type"
  ELSE
   TMPCHR="Invalid Loan Type"
 ELSE IF SLWARNINGFOUND=TRUE THEN
  IF SLTYPE="S" THEN
   TMPCHR="Share Warning Found"
  ELSE
   TMPCHR="Loan Warning Found"
 ELSE IF SLAVAILABLEBAL<=$0.00 THEN
  TMPCHR="Avail. Balance <= $0.00"
 ELSE
  TMPCHR="Unhandled error"

 IF VALIDADDRESS=FALSE THEN
  ERRORCODE="502"
 ELSE IF ACCTFOUND=FALSE OR
         ACCTWARNINGFOUND=TRUE OR
         SLFOUND=FALSE OR
         VALIDSLTYPE=FALSE OR
         SLWARNINGFOUND=TRUE THEN
  ERRORCODE="503"
 ELSE IF SLAVAILABLEBAL<=$0.00 THEN
  ERRORCODE="501"
 ELSE
  ERRORCODE="509"

 ERRORMSG="loggingErrorMessage"
 ERRORDETAIL=TMPCHR
 CALL ERRORHANDLER
END [PROCEDURE]

PROCEDURE FINDACCOUNT
[* Look up the account and share/loan ID. Test for any disqualifications
** and if valid, get the available balance if it's a Share or if it's a
** loan, get the lesser of the available cash advance or the cash advance
** limit as set in the configuration parameters.
** PASS    MEMBERNUM               The member number (ACCOUNT:NUMBER)
** PASS    SLTYPE                  Is target a Share or Loan (S or L)
** PASS    SLID                    Target Share/Loan ID
** RETURN  VALIDACCT               Is the account valid (TRUE/FALSE)
** RETURN  SLAVAILABLEBAL          The available balance/loan advance
** RETURN  SLDESCRIPTION           The Share/Loan description
*]
 VALIDACCT=TRUE
 ACCTFOUND=FALSE
 ACCTWARNINGFOUND=FALSE
 SLFOUND=FALSE
 SLWARNINGFOUND=FALSE
 VALIDSLTYPE=FALSE
 VALIDADDRESS=FALSE
 ADDRESSLINECOUNT=0
 SLAVAILABLEBAL=$0.00
 SLDESCRIPTION=""

 FOR ACCOUNT MEMBERNUM
  DO
[*Check to make sure account does not have a targeted warning
*]
   ACCTFOUND=TRUE
   FOR TMPLOOP=1 TO MAXWARNINGTYPES
    DO
     IF ANYWARNING(ACCOUNT,TMPLOOP) AND
        WARNINGSACCT(TMPLOOP)=TRUE THEN
      ACCTWARNINGFOUND=TRUE
    END
[* Invalidate account if any key address fields are missing
*]
   ADDRESSLOC=ACCOUNT:PAYEENAMELOCATOR
   FOR EACH NAME WITH (NAME:LOCATOR=ADDRESSLOC)
    DO
     NADDRESSTYPE=NAME:ADDRESSTYPE
     IF NAME:STREET<>"" AND
        NAME:CITY<>"" AND
        NAME:STATE<>"" AND
        NAME:ZIPCODE<>"" AND
      ((NADDRESSTYPE<>ADDRTYPEDOM AND
        NAME:COUNTRY<>"") OR
       (NADDRESSTYPE=ADDRTYPEDOM AND
        NAME:COUNTRY="")) THEN
      VALIDADDRESS=TRUE
    END

   IF SLTYPE="S" THEN
    DO
     FOR EACH SHARE WITH (SHARE:ID=SLID AND
                          SHARE:CLOSEDATE=DATENULL AND
                          SHARE:CHARGEOFFDATE=DATENULL)
      DO
       SLFOUND=TRUE
       SLAVAILABLEBAL=SHARE:AVAILABLEBALANCE
       TMPCHR=SHARE:DESCRIPTION
       CALL CLEANUPTEXT
       SLDESCRIPTION=TMPCHR

       IF VALIDSHARETYPES(SHARE:TYPE)=TRUE THEN
        VALIDSLTYPE=TRUE
[* Check for targeted Share warning(s)
*]
       FOR TMPLOOP=1 TO MAXWARNINGTYPES
        DO
         IF ANYWARNING(SHARE,TMPLOOP) AND
            WARNINGSSHARE(TMPLOOP)=TRUE THEN
          SLWARNINGFOUND=TRUE
        END
      END
    END
   ELSE IF SLTYPE="L" THEN
    DO
     FOR EACH LOAN WITH (LOAN:ID=SLID AND
                         LOAN:CLOSEDATE=DATENULL AND
                         LOAN:CHARGEOFFDATE=DATENULL)
      DO
       SLFOUND=TRUE
       TMPCHR=LOAN:DESCRIPTION
       CALL CLEANUPTEXT
       SLDESCRIPTION=TMPCHR

       IF (LOAN:CREDLIMITEXPIRATION=DATENULL OR
           LOAN:CREDLIMITEXPIRATION>SYSTEMDATE) THEN
        DO
         IF LOAN:LOANCODE=3 AND
         (LOAN:INTERESTTYPE>=10 AND
          LOAN:INTERESTTYPE<=8999) THEN
           SLAVAILABLEBAL=LOAN:AVAILABLECASHADVANCE
          ELSE
           SLAVAILABLEBAL=LOAN:AVAILABLECREDIT
        END

       IF PARAMCASHADVLIMIT>$0.00 AND
          SLAVAILABLEBAL>PARAMCASHADVLIMIT THEN
        SLAVAILABLEBAL=PARAMCASHADVLIMIT

       IF VALIDLOANTYPES(LOAN:TYPE)=TRUE THEN
        VALIDSLTYPE=TRUE
[* Check for targeted Loan warning(s)
*]
       FOR TMPLOOP=1 TO MAXWARNINGTYPES
        DO
         IF ANYWARNING(LOAN,TMPLOOP) AND
            WARNINGSLOAN(TMPLOOP)=TRUE THEN
          SLWARNINGFOUND=TRUE
        END
      END
    END
  END
 IF ACCTFOUND=FALSE OR
    VALIDADDRESS=FALSE OR
    ACCTWARNINGFOUND=TRUE OR
    SLFOUND=FALSE OR
    SLWARNINGFOUND=TRUE OR
    VALIDSLTYPE=FALSE OR
    SLAVAILABLEBAL<=$0.00 THEN
  VALIDACCT=FALSE
 ELSE
  DO
   TMPCHR=FORMAT("#########9.99+",SLAVAILABLEBAL)
   CALL NLTS
   SLAVAILABLEBALCHR=TMPCHR
  END
END [PROCEDURE]

PROCEDURE GETRGVALUES
[* Pull the values of the @RG variables for use during the state
*]
 MEMBERNUM=SEGMENT(@RGUSERCHR1,1,10)
 SLTYPE=UPPERCASE(SEGMENT(@RGUSERCHR1,11,11))
 SLID="00"+SEGMENT(@RGUSERCHR1,12,LENGTH(@RGUSERCHR1))
 SLID=SEGMENT(SLID,LENGTH(SLID)-(SLIDLENGTH-1),LENGTH(SLID))

 IF @RGSTATE=STATEPERFORMWITHDRAW THEN
  DO
   TMPCHR=@RGUSERCHR2+"00"

   POS=CHARACTERSEARCH(TMPCHR,".")
   IF POS>0 THEN
    TMPCHR=SEGMENT(TMPCHR,1,POS+2)

   WDAMOUNT=MONEY(VALUE(TMPCHR))
  END
END [PROCEDURE]

PROCEDURE READCONFIGFILESETTINGS
[* read parameter settings from the configuration Letter file.
*]
 FILEOPEN("LETTER",CONFIGFILENAME,"READ",LFNUMBER,LFERROR)

 IF LFERROR<>"" THEN
  DO
   READCONFIGERROR=TRUE
   READCONFIGERRORMSG="Error Opening Letterfile "+CONFIGFILENAME+": "+LFERROR
  END
 ELSE
  DO
   FILEREADLINE(LFNUMBER,LFLINE,LFERROR)
   WHILE LFERROR=""
    DO
     CALL NORMALIZEDATA

     IF PARAMNAME<>"" THEN
      DO
[* Check for Reg D Param
*]
       IF PARAMNAME="REGD" AND
          PARAMVALUE<>"TRUE" THEN
        PARAMREGD=FALSE
[* Cash Advance Limit
*]
       ELSE IF PARAMNAME="CA" THEN
        PARAMCASHADVLIMIT=MONEY(VALUE(PARAMVALUE))

[* Minimum WD amount
*]
       ELSE IF PARAMNAME="MIN" THEN
        DO
         PARAMMINWDLIMIT=MONEY(VALUE(PARAMVALUE))
         IF PARAMMINWDLIMIT>$999,999.99 THEN
          PARAMMINWDLIMIT=$999,999.99
        END
[* Maximum WD amount
*]
       ELSE IF PARAMNAME="MAX" THEN
        DO
         PARAMMAXWDLIMIT=MONEY(VALUE(PARAMVALUE))
         IF PARAMMAXWDLIMIT>$999,999.99 THEN
          PARAMMAXWDLIMIT=$999,999.99
        END

[* Valid Share Types
*]
       ELSE IF PARAMNAME="ST" AND
               PARAMVALUE<>"" THEN
        PARAMVALIDSHARETYPES=PARAMVALUE
[* Valid Loan Types
*]
       ELSE IF PARAMNAME="LT" AND
          PARAMVALUE<>"" THEN
        PARAMVALIDLOANTYPES=PARAMVALUE
[* Account Warnings
*]
       ELSE IF PARAMNAME="AW" AND
               PARAMVALUE<>"" THEN
        PARAMWARNINGSACCT=PARAMVALUE
[* Share Warnings
*]
       ELSE IF PARAMNAME="SW" AND
               PARAMVALUE<>"" THEN
        PARAMWARNINGSSHARE=PARAMVALUE
[* Loan Warnings
*]
       ELSE IF PARAMNAME="LW" AND
               PARAMVALUE<>"" THEN
        PARAMWARNINGSLOAN=PARAMVALUE
[* Check for Debug Mode
*]
       ELSE IF PARAMNAME="DEBUG" THEN
        DO
         IF CHARACTERSEARCH("TRUEYES1DEBUGON",PARAMVALUE)>0 THEN
          BNODEBUGMODE=TRUE
         ELSE
          BNODEBUGMODE=FALSE
        END
[* Custom terms & conditions
*]
       ELSE IF PARAMNAME="TC" THEN
        DO
         IF PARAMCUSTOMTERMLINES<PARAMCUSTOMTERMLINESMAX THEN
          DO
           PARAMCUSTOMTERMLINES=PARAMCUSTOMTERMLINES+1
           TMPCHR=PARAMVALUE
           CALL NTS
           CALL CLEANUPTEXT
[* Retain only first 123 characters to account for JSON spacing and field delimiters
*]
           PARAMCUSTOMTERMS(PARAMCUSTOMTERMLINES)=SEGMENT(TMPCHR,1,123)
          END
        END
      END
     PARAMNAME=""
     PARAMVALUE=""
     FILEREADLINE(LFNUMBER,LFLINE,LFERROR)
    END
   IF LFERROR<>"" AND
      LFERROR<>"EOF" THEN
    DO
     READCONFIGERROR=TRUE
     READCONFIGERRORMSG="Error Reading Letterfile "+CONFIGFILENAME+": "+LFERROR
    END
   FILECLOSE(LFNUMBER,LFERROR)
  END

 IF BNODEBUGMODE=TRUE THEN
  DO

   NEWLINE
   BNODEBUGMSG="CA: "+FORMAT("###,###,##9.99",PARAMCASHADVLIMIT)
   CALL BNODEBUGMSGADD
   BNODEBUGMSG="MIN: "+FORMAT("###,###,##9.99",PARAMMINWDLIMIT)
   CALL BNODEBUGMSGADD
   BNODEBUGMSG="MAX: "+FORMAT("###,###,##9.99",PARAMMAXWDLIMIT)
   CALL BNODEBUGMSGADD
   BNODEBUGMSG="ST: "+PARAMVALIDSHARETYPES
   CALL BNODEBUGMSGADD
   BNODEBUGMSG="LT: "+PARAMVALIDLOANTYPES
   CALL BNODEBUGMSGADD
   BNODEBUGMSG="AW: "+PARAMWARNINGSACCT
   CALL BNODEBUGMSGADD
   BNODEBUGMSG="SW: "+PARAMWARNINGSSHARE
   CALL BNODEBUGMSGADD
   BNODEBUGMSG="LW: "+PARAMWARNINGSLOAN
   CALL BNODEBUGMSGADD
   BNODEBUGMSG="DEBUG: "+FORMAT("9",BNODEBUGMODE)
   CALL BNODEBUGMSGADD
   FOR TMPLOOP=1 TO PARAMCUSTOMTERMLINES
    DO
     BNODEBUGMSG=FORMAT("TC-99:",TMPLOOP)+"'"+PARAMCUSTOMTERMS(TMPLOOP)+"'"
     CALL BNODEBUGMSGADD
    END
  END

 LELISTINPUT=PARAMVALIDSHARETYPES
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXSLTYPES
  DO
   VALIDSHARETYPES(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=PARAMVALIDLOANTYPES
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXSLTYPES
  DO
   VALIDLOANTYPES(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=PARAMWARNINGSACCT
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXWARNINGTYPES
  DO
   WARNINGSACCT(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=PARAMWARNINGSSHARE
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXWARNINGTYPES
  DO
   WARNINGSSHARE(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=PARAMWARNINGSLOAN
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXWARNINGTYPES
  DO
   WARNINGSLOAN(TMPLOOP)=LELIST(TMPLOOP)
  END
END [PROCEDURE]

PROCEDURE NORMALIZEDATA
[* Normalize the data and if a parameter, separate into
** parameter name and value
** PASS    LFLINE          Character line read in
** RETURN  PARAMNAME       Parameter name found
** RETURN  PARAMVALUE      Parameter value
**
*]
 PARAMNAME=""
 PARAMVALUE=""

 POS=CHARACTERSEARCH(LFLINE,":")
 IF LFLINE<>"" AND
    SEGMENT(LFLINE,1,1)<>"*" AND
    POS>1 THEN
  DO
   TMPCHR=SEGMENT(LFLINE,1,POS-1)
   CALL NLTS
   PARAMNAME=UPPERCASE(TMPCHR)

   TMPCHR=SEGMENT(LFLINE,POS+1,LENGTH(LFLINE))
   CALL NLTS
   PARAMVALUE=TMPCHR
  END
END [PROCEDURE]

PROCEDURE NLTS
[* Remove leading AND trailing spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 CALL NLS
 IF TMPCHR<>"" THEN
  CALL NTS
END [PROCEDURE]

PROCEDURE NLS
[* Remove leading spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 WHILE (LENGTH(TMPCHR)>0 AND
        SEGMENT(TMPCHR,1,1)=" ")
  DO
   IF LENGTH(TMPCHR)=1 THEN
    TMPCHR=""
   ELSE
    TMPCHR=SEGMENT(TMPCHR,2,LENGTH(TMPCHR))
  END
 IF LENGTH(TMPCHR)=0 THEN
  TMPCHR=""
END [PROCEDURE]

PROCEDURE NTS
[* Remove trailing spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 IF TMPCHR<>"" THEN
  TMPCHR=SEGMENT(TMPCHR,1,LENGTH(TMPCHR))
 IF LENGTH(TMPCHR)=0 THEN
  TMPCHR=""

END [PROCEDURE]

PROCEDURE CLEANUPTEXT
[* Check character string and remove out any characters or hidden
** characters which have an ASCII value which is not established in
** the VALIDCHRINPUT1 string in the SETUP division . This is to avoid
** display issues with displaying the terms or conditions. Additionally,
** if a back-slash or double quote is encountered, add a preceding
** backslash
**  PASS       TMPCHR   String to test
**  RETURN     TMPCHR   Updated string
*]
 LELISTINPUT=VALIDCHRINPUT1
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXCHRVALUE
  DO
   VALIDCHARS(TMPLOOP)=LELIST(TMPLOOP)
  END
 TMPTEXT=""

 IF TMPCHR<>"" THEN
  DO
   FOR TMPTEXTLOOP=1 TO LENGTH(TMPCHR)
    DO
     CHRVAL=CHRVALUE(SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP))
     IF  VALIDCHARS(CHRVAL)=TRUE THEN
      DO
[* Check for back-slash or double-quote. If found, precede with a back-slash
*]
       IF (CHRVAL=92 OR CHRVAL=34) THEN
        TMPTEXT=TMPTEXT+"\"+SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP)
       ELSE
        TMPTEXT=TMPTEXT+SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP)
      END
    END
  END
 TMPCHR=TMPTEXT
END [PROCEDURE]

PROCEDURE INITIALIZEDATA
[* Initialize state variables
*]
 WHILELIMIT=100000
 BNODEBUGMODE=FALSE
 LFNUMBER=0
 LFERROR=""
 MEMBERNUM=""
 SLTYPE=""
 SLID=""
 WDAMOUNT=$0.00
 READCONFIGERROR=FALSE
 READCONFIGERRORMSG=""
 LFERROR=""
 LFNUMBER=0
 ADDRESSLOC=0
 NADDRESSTYPE=-1
 PARAMREGD=TRUE
 PARAMVALIDSHARETYPES="ALL"
 PARAMVALIDLOANTYPES="ALL"
 PARAMCASHADVLIMIT=$0.00
 PARAMMINWDLIMIT=$0.00
 PARAMMAXWDLIMIT=$0.00
 PARAMWARNINGSACCT="NONE"
 PARAMWARNINGSSHARE="NONE"
 PARAMWARNINGSLOAN="NONE"
 PARAMCUSTOMTERMLINES=0

 FOR TMPLOOP=0 TO PARAMCUSTOMTERMLINESMAX
  DO
   PARAMCUSTOMTERMS(TMPLOOP)=""
  END
 PARAMCUSTOMTERMLINES=0

 FOR TMPLOOP=0 TO MAXSLTYPES
  DO
   VALIDSHARETYPES(TMPLOOP)=FALSE
   VALIDLOANTYPES(TMPLOOP)=FALSE
  END

 FOR TMPLOOP=0 TO MAXWARNINGTYPES
  DO
   WARNINGSACCT(TMPLOOP)=FALSE
   WARNINGSSHARE(TMPLOOP)=FALSE
   WARNINGSLOAN(TMPLOOP)=FALSE
  END

 IF BNOLASTMODDATE+BNOPRINTDEBUGINFODAYS>SYSTEMDATE THEN
  BNODEBUGMODE=BNODEBUGMODEON
END [PROCEDURE]

PROCEDURE ERRORHANDLER
[* Print error code information to output.
**  PASS       ERRORCODE      Error code to print
**  PASS       ERRORMSG       Error type to print
**  PASS       ERRORDETAIL    Specific error detail
*]
 PRINT "{"
 NEWLINE
 PRINT "  "+Q+"errorCode"+Q+": "+ERRORCODE+","
 NEWLINE
 PRINT "  "+Q+ERRORMSG+Q+": "+
            Q+ERRORDETAIL+Q
 NEWLINE
END [PROCEDURE]

PROCEDURE BNOPRINTPROGRAMINFO
[* Print program info to direct JSON output
**
**  PASS    BNOPROGRAMNAME     Program name
**  PASS    BNOPROGRAMVERSION  Program version
**  PASS    BNOLASTMODDATE     Last mod date
**  PASS    BNOLASTMODTIME     Last mod time
*]
 PRINT ","
 NEWLINE
 PRINT "  "+Q+"programInfo"+Q+":"+Q+
               BNOPROGRAMNAME+"  "+
               BNOPROGRAMVERSION+"  "+
               FORMAT("99/99/99 ",BNOLASTMODDATE)+
               BNOLASTMODTIME+Q
 NEWLINE
END [PROCEDURE]

PROCEDURE BNOPRINTRGDATA
[* Print @RGUSER[CHR,NUM] data passed from the UX in proper JSON format
**
**  PASS    DEBUGMODE        Boolean: Print debug data, T/F
*]
 IF BNODEBUGMODE=BNODEBUGMODEON THEN
  DO
   PRINT ","
   NEWLINE
   PRINT "  "+Q+"rgData"+Q+": ["
   NEWLINE
   PRINT "    "+Q+"@RGSTATE: "+@RGSTATE+"  "+
              "CHR1:"+@RGUSERCHR1+"  "+
              "CHR2:"+@RGUSERCHR2+Q+","
   NEWLINE
   PRINT "    "+Q+"CHR3:"+@RGUSERCHR3+" "+
                  "CHR4:"+@RGUSERCHR4+Q+","

   NEWLINE
   PRINT "    "+Q+"CHR5:"+@RGUSERCHR5+" "+
                  "NUM1:"+FORMAT("#########9 ",@RGUSERNUM1)+
                  "NUM2:"+FORMAT("#########9 ",@RGUSERNUM2)+
                  "NUM3:"+FORMAT("#########9 ",@RGUSERNUM3)+
                  "NUM4:"+FORMAT("#########9 ",@RGUSERNUM4)+
                  "NUM5:"+FORMAT("#########9",@RGUSERNUM5)+Q
   NEWLINE
   PRINT "  ]"
   NEWLINE
  END
END [PROCEDURE]

PROCEDURE BNOPRINTDEBUG
[* Add debug messages to JSON output
**  PASS    DEBUGMODE  Boolean - is debug mode on
**  PASS    BNODEBUGCOUNT  Number of debut lines to send to JSON output
**  RETURN  BNODEBUGMSGLIST  debug output
*]
 IF BNODEBUGMODE=BNODEBUGMODEON THEN
  DO
   FOR BNODEBUGLOOP=1 TO BNODEBUGCOUNT
    DO

     IF BNODEBUGLOOP=1 THEN
      DO
       PRINT ","
       NEWLINE

       PRINT "    "+Q+"debugData"+Q+": ["
       NEWLINE
      END

     PRINT "    "+Q+BNODEBUGMSGLIST(BNODEBUGLOOP)+Q
     IF BNODEBUGLOOP<BNODEBUGCOUNT THEN
      PRINT ","
     NEWLINE
    END
   PRINT "    ]"
   NEWLINE
  END
END [PROCEDURE]

PROCEDURE BNODEBUGMSGADD
[* Add debug line output to array for later display in JSON output
**  PASS    BNODEBUGMSG  Line of debug output
**  RETURN  BNODEBUGMSGLIST  Array of debug messages to display
**  RETURN  BNODEBUGCOUNT  number of debug lines to display
**
*]
 IF BNODEBUGCOUNT<BNODEBUGMSGMAX THEN
  DO
   BNODEBUGCOUNT=BNODEBUGCOUNT+1
   BNODEBUGMSGLIST(BNODEBUGCOUNT)=BNODEBUGMSG
   BNODEBUGMSG=""
  END
END [PROCEDURE]


#INCLUDE "RB.LISTEXPAND"
