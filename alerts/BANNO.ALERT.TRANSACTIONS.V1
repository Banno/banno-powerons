[*
**  PowerOn Name:       BANNO.ALERT.TRANSACTIONS.V1
**
**  Copyright 2020 Jack Henry and Associates
**
**  09/21/2018 CM Simms        Original Author
**  08/17/2020 CM Simms        Adjusted so dividends only could get alerts
**
**  This Banno feature PowerOn returns transactions for users set up for Alerts.
**  The data is requested in increments running about every 10-15 minutes.  
**  This PowerOn will return 9500 transactions per request. Any counts over
**  that are picked up by BANNO.ALERT.TRANSFILE.V1
**
**  For more information check
**  https://github.com/Banno/banno-powerons
**
**  Banno is not responsible for any modifications to this file
**  made by unauthorized personnel.
**
**  DO NOT MODIFY THIS FILE UNLESS YOU KNOW WHAT YOU'RE DOING!
*]

[*  Details:
**  First, using SymX call UploadDateFile, Banno uploads a Datafile 
**  of shares and loans where an alert has been set up.  
**  File name: MEMBERDATA.DAT

**  Second,using SymX call executePowerOn, this PowerOn is ran. Banno
**  sends the following:
**     RGUSERCHR1   REQUIRED  From Date
**                            Format is MM-DD-YYYY
**                            or DATENULL (--/--/--)
**     RGUSERCHR2   REQUIRED  To Date
**                            Format is MM-DD-YYYY
**                            or DATENULL (--/--/--)
**     RGUSERNUM1   REQUIRED  From Military Time 
**     RGUSERNUM2   REQUIRED  To Military Time
**
**   RETURNS:
**     RGLines
**      Header
**      Detail lines (up to 9500)
**      COUNT:  this is the total found in this run
**      PRINTCOUNT: this is the count that is returned from this call
**      MORETOPRINT: YES means a second pass is required
**                   (see BANNO.ALERT.TRANSFILE.V1)
**      STARTCOUNT: this is what transaction # to start with in the 
**                  next call
**
**  Third, if needed, an addition SymX call execute PowerOn for
**  BANNO.ALERT.TRANSFILE.V1     
]

SYMCONNECT
STATELESS

TARGET=ACCOUNT

DEFINE
 STARTDATE=DATE
 STARTTIME=NUMBER
 ENDDATE=DATE
 ENDTIME=NUMBER

 M1=NUMBER
 D1=NUMBER
 Y1=NUMBER

 M2=NUMBER
 D2=NUMBER
 Y2=NUMBER

 PRINTHEADERLINE1=CHARACTER
 PRINTHEADERLINE2=CHARACTER

 INPUTFILE=CHARACTER(40)
 INPUTFILENUMBER=NUMBER
 FILEERROR=CHARACTER(40)
 TEMP=CHARACTER(132)
 NEWAVAILABLEBALANCE=MONEY

 ACCOUNTNUM=CHARACTER(10)
 ALERTIDTYPE=CHARACTER(1)
 ALERTID=CHARACTER(4)
 COUNT=NUMBER
 PRINTCOUNT=NUMBER
 STARTCOUNT=NUMBER
 MORETOPRINT=NUMBER

 OUTPUTFILE=CHARACTER(40)
 OUTPUTFILENUMBER=NUMBER
 OUTPUTTRAN=CHARACTER(132)

 TRUE=1
 FALSE=0
 X=NUMBER
END

SETUP
 M1=VALUE(SEGMENT(@RGUSERCHR1,1,2))
 D1=VALUE(SEGMENT(@RGUSERCHR1,4,5))
 Y1=VALUE(SEGMENT(@RGUSERCHR1,7,10))

 M2=VALUE(SEGMENT(@RGUSERCHR2,1,2))
 D2=VALUE(SEGMENT(@RGUSERCHR2,4,5))
 Y2=VALUE(SEGMENT(@RGUSERCHR2,7,10))

 STARTDATE=DATE(M1,D1,Y1)
 STARTTIME=@RGUSERNUM1
 ENDDATE=DATE(M2,D2,Y2)
 ENDTIME=@RGUSERNUM2

 INPUTFILE="MEMBERDATA.DAT"
 OUTPUTFILE="MEMBERTRANS.DAT"

 [DELETE ANY EXISTING FILES]
 FILEDELETE("LETTER",OUTPUTFILE,FILEERROR)

 [OPEN THE FILE IN PREP FOR WRITING TO IT]
 FILEOPEN("LETTER", OUTPUTFILE, "WRITE", OUTPUTFILENUMBER, FILEERROR)

 IF FILEERROR <> "" THEN
  DO
   PRINT "Error opening output file: "
   PRINT FILEERROR
   NEWLINE
  END

 COUNT=0
 PRINTHEADERLINE1="COUNT |ACCOUNT        |EFFECTDT|TIME|A|TRANSACTIONAMNT|NEWBALANCEAMOUN|"
 PRINTHEADERLINE2="NEWAVAILABLEAMT|DRAFTNUMBR|SEQUENCENO|PREVIBALANCEAMT|"+CTRLCHR(10)

END

SELECT
 ALL
END

PRINT TITLE="BANNO.TRANSACTIONS.INQUIRY"

 IF STARTDATE='--/--/--' THEN             [Set real date]
  STARTDATE=SYSTEMDATE
 IF ENDDATE='--/--/--' THEN               [Set real date]
  ENDDATE=SYSTEMDATE

 [CHECK TO SEE IF THE FILE WILL OPEN FOR READING]
 FILEOPEN("DATA", INPUTFILE,"READ",INPUTFILENUMBER,FILEERROR)
 IF FILEERROR <> "" THEN
  DO
   PRINT "Error opening input file: " + FILEERROR
   NEWLINE
  END


 [NOW GRAB THE ACCOUNT NUMBERS AND PRINT TRANSACTIONS]
 ELSE 
  DO
   IF COUNT=0 THEN
    DO
     PRINT PRINTHEADERLINE1
     PRINT PRINTHEADERLINE2
     NEWLINE
    END
   FILEREADLINE(INPUTFILENUMBER, TEMP, FILEERROR)
   WHILE FILEERROR = "" AND
         TEMP<>"EOF"
    DO
     IF LENGTH(TEMP) = 15 THEN
      DO
       ACCOUNTNUM = SEGMENT(TEMP, 1, 10)
       ALERTIDTYPE = SEGMENT(TEMP,11,11)
       ALERTID = SEGMENT(TEMP,12,15)   
      END
     ELSE
      DO
       PRINT "Invalid input file format"
       NEWLINE
       PRINT TEMP
       NEWLINE
      END
     IF ACCOUNTNUM<>"" THEN
      DO
       FOR ACCOUNT WITH NUMBER ACCOUNTNUM
        DO
         IF ALERTIDTYPE="S" THEN
          DO
           CALL GETSHARETRANS
          END
         IF ALERTIDTYPE="L" THEN
          CALL GETLOANTRANS
        END  [FOR ACCT LOOP]
      END    [IF ACCT LOOP]
     CALL READDATAROW
    END   [WHILE LOOP] 
  END    [INSIDE FILEERROR OK LOOP ]

END

TOTAL
 FILECLOSE(OUTPUTFILENUMBER, FILEERROR)
 PRINT "COUNT: "
 PRINT LEFT COUNT
 NEWLINE
 PRINT "PRINTCOUNT: "
 PRINT LEFT PRINTCOUNT
 NEWLINE
 IF COUNT>PRINTCOUNT+STARTCOUNT THEN
  DO
   PRINT "MORE TO PRINT: YES"
   NEWLINE
   PRINT "STARTCOUNT: "
   PRINT LEFT STARTCOUNT+PRINTCOUNT
   NEWLINE
  END
 ELSE
  DO
   PRINT "MORE TO PRINT: NO"
   NEWLINE
  END
END

PROCEDURE READDATAROW

 FILEREADLINE(INPUTFILENUMBER, TEMP, FILEERROR)
 IF FILEERROR <> "" AND
    FILEERROR <> "EOF" THEN
  DO
   PRINT "Error reading input file"+FILEERROR
   NEWLINE
  END
 ELSE
  DO
   ACCOUNTNUM = ""
   ALERTIDTYPE = ""
   ALERTID = ""
   IF LENGTH(TEMP) = 15 AND
      CHARACTERSEARCH(TEMP,"?")=0 THEN
    DO
     ACCOUNTNUM = SEGMENT(TEMP, 1, 10)
     ALERTIDTYPE = SEGMENT(TEMP,11,11)
     ALERTID = SEGMENT(TEMP,12,15)
    END

   ELSE IF FILEERROR <> "" AND
           FILEERROR <> "EOF" THEN
    DO
     PRINT "Invalid input file format"
    END
  END
END [PROCEDURE]

PROCEDURE GETSHARETRANS
 IF ANY SHARE WITH (VALUE(SHARE:ID)=VALUE(ALERTID) AND
                    SHARE:LASTTRANDATE>=STARTDATE) THEN
  DO
   FOR EACH SHARE WITH (VALUE(SHARE:ID)=VALUE(ALERTID) AND
                        SHARE:LASTTRANDATE>=STARTDATE)
    DO
     IF STARTDATE=ENDDATE THEN
      DO
       FOR EACH SHARE TRANSACTION WITH (SHARE TRANSACTION:POSTDATE=STARTDATE AND
                                        SHARE TRANSACTION:POSTDATE=ENDDATE AND 
                                        SHARE TRANSACTION:POSTTIME>=STARTTIME AND
                                        SHARE TRANSACTION:POSTTIME<=ENDTIME AND
                                        SHARE TRANSACTION:COMMENTCODE=0 AND
                                        SHARE TRANSACTION:VOIDCODE=0)
        DO
         COUNT=COUNT+1
         CALL PRINTSHARETRANS
        END
        UNTIL SHARE TRANSACTION:POSTDATE<STARTDATE
      END
     ELSE IF ENDDATE-STARTDATE=1 THEN
      DO
       FOR EACH SHARE TRANSACTION WITH (((SHARE TRANSACTION:POSTDATE=STARTDATE AND
                                          SHARE TRANSACTION:POSTTIME>=STARTTIME AND
                                          SHARE TRANSACTION:POSTTIME<=2359) OR
                                         (SHARE TRANSACTION:POSTDATE=ENDDATE AND
                                          SHARE TRANSACTION:POSTTIME>=0000 AND
                                          SHARE TRANSACTION:POSTTIME<=ENDTIME)) AND
                                          SHARE TRANSACTION:COMMENTCODE=0 AND
                                          SHARE TRANSACTION:VOIDCODE=0)
        DO
         COUNT=COUNT+1
         CALL PRINTSHARETRANS
        END
        UNTIL SHARE TRANSACTION:POSTDATE<STARTDATE
      END
    END   [FOR EACH SHARE LOOP]
  END     [IF ANY SHARE LOOP]
END


PROCEDURE GETLOANTRANS
 IF ANY LOAN WITH (VALUE(LOAN:ID)=VALUE(ALERTID) AND
                   LOAN:LASTTRANDATE>=STARTDATE) THEN
  DO
   FOR EACH LOAN WITH (VALUE(LOAN:ID)=VALUE(ALERTID) AND
                       LOAN:LASTTRANDATE>=STARTDATE)
    DO
     IF STARTDATE=ENDDATE THEN
      DO
       FOR EACH LOAN TRANSACTION WITH (LOAN TRANSACTION:POSTDATE=STARTDATE AND
                                       LOAN TRANSACTION:POSTDATE=ENDDATE AND 
                                       LOAN TRANSACTION:POSTTIME>=STARTTIME AND
                                       LOAN TRANSACTION:POSTTIME<=ENDTIME AND
                                       LOAN TRANSACTION:COMMENTCODE=0 AND
                                       LOAN TRANSACTION:VOIDCODE=0)
        DO
         COUNT=COUNT+1
         CALL PRINTLOANTRANS
        END
        UNTIL LOAN TRANSACTION:POSTDATE<STARTDATE [1]
      END
     ELSE IF ENDDATE-STARTDATE=1 THEN
      DO
       FOR EACH LOAN TRANSACTION WITH (((LOAN TRANSACTION:POSTDATE=STARTDATE AND
                                          LOAN TRANSACTION:POSTTIME>=STARTTIME AND
                                          LOAN TRANSACTION:POSTTIME<=2359) OR
                                         (LOAN TRANSACTION:POSTDATE=ENDDATE AND
                                          LOAN TRANSACTION:POSTTIME>=0000 AND
                                          LOAN TRANSACTION:POSTTIME<=ENDTIME)) AND
                                        LOAN TRANSACTION:COMMENTCODE=0 AND
                                        LOAN TRANSACTION:VOIDCODE=0)
        DO
         COUNT=COUNT+1
         CALL PRINTLOANTRANS
        END
        UNTIL LOAN TRANSACTION:POSTDATE<STARTDATE [2]
      END
    END   [FOR EACH LOAN LOOP]
  END     [IF ANY LOAN LOOP]
END

PROCEDURE PRINTSHARETRANS
 NEWAVAILABLEBALANCE=$0.00
 IF SHARE TRANSACTION:ACTIONCODE="D" THEN
  DO
   NEWAVAILABLEBALANCE=SHARE TRANSACTION:PREVAVAILBALANCE+SHARE TRANSACTION:TRANAMOUNT
  END
 ELSE IF SHARE TRANSACTION:ACTIONCODE="W" THEN
  DO
   NEWAVAILABLEBALANCE=SHARE TRANSACTION:PREVAVAILBALANCE-SHARE TRANSACTION:TRANAMOUNT
  END

 OUTPUTTRAN=""
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("999999",COUNT)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+ACCOUNT:NUMBER
 OUTPUTTRAN=OUTPUTTRAN+"S"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("9999",VALUE(SHARE:ID))
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("99/99/99", SHARE TRANSACTION:EFFECTIVEDATE)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("9999", SHARE TRANSACTION:POSTTIME)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+SHARE TRANSACTION:ACTIONCODE
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("+###,###,##9.99", SHARE TRANSACTION:TRANAMOUNT)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("+###,###,##9.99", SHARE TRANSACTION:NEWBALANCE)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("+###,###,##9.99", NEWAVAILABLEBALANCE)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("9999999999",VALUE(SHARE TRANSACTION:DRAFTNUMBER))
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("9999999999",SHARE TRANSACTION:SEQUENCENUMBER)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("+###,###,##9.99", SHARE TRANSACTION:PREVAVAILBALANCE)

 IF COUNT<=9500 THEN
  DO
   PRINT OUTPUTTRAN
   PRINTCOUNT=PRINTCOUNT+1
   NEWLINE
  END
 ELSE
  DO
   FILEWRITE(OUTPUTFILENUMBER,OUTPUTTRAN,FILEERROR)
   FILEWRITE(OUTPUTFILENUMBER,CTRLCHR(10), FILEERROR)
  END
END

PROCEDURE PRINTLOANTRANS
 NEWAVAILABLEBALANCE=$0.00
 IF LOAN TRANSACTION:ACTIONCODE="A" OR
    LOAN TRANSACTION:ACTIONCODE="N" THEN
  DO
   NEWAVAILABLEBALANCE=LOAN TRANSACTION:PREVAVAILBALANCE+LOAN TRANSACTION:BALANCECHANGE
  END
 ELSE IF LOAN TRANSACTION:ACTIONCODE="P" THEN
  DO
   NEWAVAILABLEBALANCE=LOAN TRANSACTION:PREVAVAILBALANCE-LOAN TRANSACTION:BALANCECHANGE
  END
 OUTPUTTRAN=""
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("999999",COUNT)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+ACCOUNT:NUMBER
 OUTPUTTRAN=OUTPUTTRAN+"L"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("9999",VALUE(LOAN:ID))
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("99/99/99", LOAN TRANSACTION:EFFECTIVEDATE)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("9999", LOAN TRANSACTION:POSTTIME)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+LOAN TRANSACTION:ACTIONCODE
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("+###,###,##9.99", LOAN TRANSACTION:TRANAMOUNT)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("+###,###,##9.99", LOAN TRANSACTION:NEWBALANCE)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("+###,###,##9.99", NEWAVAILABLEBALANCE)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("9999999999",VALUE(LOAN TRANSACTION:DRAFTNUMBER))
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("9999999999", LOAN TRANSACTION:SEQUENCENUMBER)
 OUTPUTTRAN=OUTPUTTRAN+"|"
 OUTPUTTRAN=OUTPUTTRAN+FORMAT("+###,###,##9.99", LOAN TRANSACTION:PREVAVAILBALANCE)
 IF COUNT<=9500 THEN
  DO
   PRINT OUTPUTTRAN
   PRINTCOUNT=PRINTCOUNT+1
   NEWLINE
  END
 ELSE
  DO
   FILEWRITE(OUTPUTFILENUMBER,OUTPUTTRAN,FILEERROR)
   FILEWRITE(OUTPUTFILENUMBER,CTRLCHR(10), FILEERROR)
  END
END
