[*
**  PowerOn Name:       BANNO.ODTOPTIN.V1.POW
**  Letterfile Name:    BANNO.ODTOPTIN.V1.CFG
**
**  Copyright 2020 Jack Henry and Associates
**
**  This Banno service PowerOn allows the user to Opt-In or Opt-out
**  of the Reg-E overdraft service
**
**  For more information check
**  https://github.com/Banno/banno-powerons
**
**  Banno is not responsible for any modifications to this file
**  made by unauthorized personnel.
**
**  Modification History:
**    Ver. 1.0.0  07/14/20 T. Kainz - Original Programming
**
**  DO NOT MODIFY THIS FILE UNLESS YOU KNOW WHAT YOU'RE DOING!
*]

SYMCONNECT
STATELESS

TARGET=ACCOUNT

DEFINE
 #INCLUDE "RD.GETDATA.DEF"
 #INCLUDE "RB.LISTEXPAND.DEF"

 TRUE                      = 1
 FALSE                     = 0
 FMUNCHANGED               = 0
 FMSUCCESSFUL              = 1
 FMUNSUCCESSFUL            = 2
 CONFIGFILENAME            = "BANNO.ODTOPTIN.V1.CFG"
 STATEPRELOADDATA          = "PRELOADDATA"
 STATEPROCESSDATA          = "PROCESSDATA"
 STATEEND                  = "STATEEND"
 DATENULL                  = '--/--/--'
 VALIDSOURCECODELIST       = "ABCDEFGHIJKLNOPRSTVW"

 DEBUGMODE                 = NUMBER
 LFNUMBER                  = NUMBER
 LFERROR                   = CHARACTER
 LFLINE                    = CHARACTER
 READCONFIGERROR           = NUMBER
 READCONFIGERRORMSG        = CHARACTER
 PARAMCHR                  = CHARACTER
 PARAMINELIGIBLEACCTS      = CHARACTER
 PARAMVALIDSHARETYPES      = CHARACTER
 PARAMWARNINGSACCT         = CHARACTER
 PARAMWARNINGSSHARE        = CHARACTER
 PARAMSHARETRACKING        = NUMBER
 PARAMUPDATEANDF           = NUMBER
 PARAMSC1TRUE              = CHARACTER
 PARAMSC1FALSE             = CHARACTER
 PARAMAF1TRUE              = NUMBER
 PARAMAF1FALSE             = NUMBER
 PARAMCUSTOMTERMS          = CHARACTER ARRAY(99)
 PARAMFEEDISCL             = CHARACTER ARRAY(99)
 PARAMREVOKEINST           = CHARACTER ARRAY(9)
 PARAMCUSTOMTERMLINES      = NUMBER
 PARAMFEEDISCLLINES        = NUMBER
 PARAMREVOKEINSTLINES      = NUMBER
 PARAMCUSTOMTERMLINESMAX   = 99
 PARAMREVOKEINSTLINESMAX   = 9
 PARAMNAME                 = CHARACTER
 PARAMVALUE                = CHARACTER
 PARAMVALIDATIONERROR      = NUMBER
 PARAMVALIDATIONERRORCHR   = CHARACTER
 INVALIDACCTYPES           = NUMBER    ARRAY(9999)
 VALIDSHARETYPES           = NUMBER    ARRAY(9999)
 WARNINGSACCT              = NUMBER    ARRAY(999)
 WARNINGSSHARE             = NUMBER    ARRAY(999)
 ACCTFOUND                 = NUMBER
 ACCTWARNINGFOUND          = NUMBER
 VALIDSLTYPE               = NUMBER
 SLAWARNINGFOUND           = NUMBER
 INVALIDACCTTYPEFOUND      = NUMBER
 TMPLOOP                   = NUMBER
 TMPCHR                    = CHARACTER
 POS                       = NUMBER
 Q                         = CHARACTER
 MEMBERNUM                 = CHARACTER
 SLTYPE                    = CHARACTER
 SLID                      = CHARACTER
 SLDESCRIPTION             = CHARACTER
 VALIDACCT                 = NUMBER
 FOUND                     = NUMBER
 WDAMOUNT                  = MONEY
 BASESID                   = CHARACTER
 TMPINDEX                  = NUMBER
 TRANERROR                 = CHARACTER
 REGDCHKCODE               = NUMBER
 ERRORCODE                 = NUMBER
 ERRORMSG                  = CHARACTER
 ERRORDETAIL               = CHARACTER ARRAY(99)
 ERRORDETAILOFFSET         = NUMBER
 ADDRESSLINECOUNT          = NUMBER
 SLFOUND                   = NUMBER
 IDLENGTH                  = NUMBER
 MAXWARNINGTYPES           = NUMBER
 MAXSLTYPES                = NUMBER
 TMPTEXT                   = CHARACTER
 TMPTEXTLOOP               = NUMBER
 CHR                       = NUMBER
 SYSTEMMEMOMODE            = NUMBER
 SDMAX                     = NUMBER
 SDCOUNT                   = NUMBER
 SDOVERMAX                 = NUMBER
 SDID                      = CHARACTER(4) ARRAY(132)
 SDNAME                    = CHARACTER(40) ARRAY(132)
 SDBALANCE                 = MONEY ARRAY(132)
 SDODTSTATUS               = NUMBER ARRAY(132)
 SDODTNEWSTATUS            = NUMBER ARRAY(132)
 SDODTTRACKINGLOC          = NUMBER ARRAY(132)
 SDTRACKINGUPDATE          = NUMBER ARRAY(132)
 SDAUTHFEEUPDATE           = NUMBER ARRAY(132)
 SNSHARELIST               = CHARACTER ARRAY(9)
 SHARELISTINDEX            = NUMBER
 SHARELIST                 = CHARACTER
 COMMAPOS                  = NUMBER
 SLIDLEN                   = NUMBER
 FMERROR                   = CHARACTER
 NEWSTATUS                 = NUMBER
 FMTRACKINGLOCATOR         = NUMBER
 TEMPLOC                   = NUMBER
 NEWSOURCECODE1            = CHARACTER
 NEWAUTFEEOPTION1          = NUMBER
 INVALIDCONFIGPARAMS       = NUMBER
 TMPNUM                    = NUMBER
 BOOLEANCHR                = CHARACTER ARRAY(1)
 CHRVAL                    = NUMBER
 FMRESULTSCHR              = CHARACTER ARRAY(3)
 VALIDCHRINPUT1            = CHARACTER
 VALIDCHARS                = NUMBER ARRAY(999)
 MAXCHRVALUE               = 255
 WARNINGFOUND              = NUMBER
 FMUPDATEERRORTRACKING     = NUMBER
 FMUPDATEERRORAUTHFEE      = NUMBER
 LASTSID                   = CHARACTER

END [DEFINE]

SETUP
 Q=CTRLCHR(34)
 DEBUGMODE=FALSE

[* Set SDMAX to 130 for production. Pass back any lower number >0 in the
** @RGUSERNUM1 field for testing or limiting program to lower values
*]
 SDMAX=130
 IF @RGUSERNUM1>0 THEN
  SDMAX=@RGUSERNUM1

 IDLENGTH=GETDATANUMBER(GETPARAMIDLENGTH)
 IF IDLENGTH=2 THEN
  MAXSLTYPES=99
 ELSE
  MAXSLTYPES=9999
 MAXWARNINGTYPES=999

 FMRESULTSCHR(FMSUCCESSFUL)="true"
 FMRESULTSCHR(FMUNSUCCESSFUL)="false"
 FMRESULTSCHR(FMUNCHANGED)="null"
 BOOLEANCHR(FALSE)="false"
 BOOLEANCHR(TRUE)="true"

 SLIDLEN=GETDATANUMBER(GETPARAMIDLENGTH)
 VALIDCHRINPUT1="32-126,128-175,181-184,189,190,198,199,208-216,221,222,224-253"
END [SETUP]

PRINT TITLE="BANNO.TEMPLATE.V1.POW"
[* STATE             OVERVIEW
** ----------------  -----------------------------------------------------------
** STATEPRELOADDATA  Present the user with a list of valid shares along with
**                   their current balance and ODT status.
** PROCESSDATA       Receive user input, update share and share tracking as
**                   needed and return a list of shares changed and new status.
**
*]
 CALL INITIALIZEDATA
 CALL VALIDATESYSMEMOMODE

 IF @RGSTATE<>STATEEND THEN
  CALL READCONFIGFILESETTINGS

 IF @RGSTATE<>STATEEND THEN
  CALL VALIDATEACCOUNT

 IF @RGSTATE<>STATEEND THEN
  DO
   IF @RGSTATE=STATEPRELOADDATA THEN
    DO
     CALL POLLSHARES
     IF ERRORCODE=0 THEN
      DO
       IF SDCOUNT=0 THEN
        DO
         ERRORCODE=503
         CALL JSONOPEN
         CALL ERRORHANDLER
         CALL JSONCLOSE
         @RGSTATE=STATEEND
        END
       ELSE
        DO
         CALL PRINTSHAREDETAIL
        END
      END
    END
   IF @RGSTATE=STATEPROCESSDATA THEN
    DO
     CALL POLLSHARES
     CALL SETSESSIONVARS
     CALL SETSNSHARELISTSELECTED

     IF DEBUGMODE=TRUE THEN
      DO
       NEWLINE
       FOR TMPLOOP=1 TO SDCOUNT
        DO
         PRINT FORMAT("99: ",TMPLOOP)+
               "  SID:"+SDID(TMPLOOP)+
               FORMAT("  SDODTTRACKINGLOC:999",SDODTTRACKINGLOC(TMPLOOP))+
               FORMAT("  SDODTSTATUS:99",SDODTSTATUS(TMPLOOP))+
               FORMAT("  SDODTNEWSTATUS:99",SDODTNEWSTATUS(TMPLOOP))
         NEWLINE
        END
      END

     CALL UPDATERECORDS

     IF FMUPDATEERRORTRACKING=TRUE OR
        FMUPDATEERRORAUTHFEE=TRUE THEN
      DO
       IF FMUPDATEERRORTRACKING=TRUE THEN
        ERRORCODE=506
       ELSE IF FMUPDATEERRORAUTHFEE=TRUE THEN
        ERRORCODE=507

       CALL JSONOPEN
       CALL ERRORHANDLER
       CALL JSONCLOSE
      END
     ELSE
      DO
       IF (SDODTSTATUS(TMPLOOP)<>SDODTNEWSTATUS(TMPLOOP)) OR
           SDODTTRACKINGLOC(TMPLOOP)=0 THEN
        DO
         CALL PRINTSHAREDETAIL
        END
      END
    END
  END
END [PRINT]

PROCEDURE PRINTSHAREDETAIL
[* Loop through array of eligible shares and print properly formatted
** JSON for each share. If in state PRELOADDATA, include the terms and
** conditions, fee disclosure and revocation instructions
*]

 PRINT "{"
 NEWLINE
 PRINT "  "+Q+"memoMode"+Q+":  false,"
 NEWLINE
 PRINT "  "+Q+"results"+Q+": {"
 NEWLINE
 PRINT "  "+Q+"maxSharesExceeded"+Q+": "
 IF SDOVERMAX=TRUE THEN
  PRINT "true,"
 ELSE
  PRINT "false,"
 NEWLINE
 IF @RGSTATE=STATEPRELOADDATA THEN
  PRINT "  "+Q+"shareDetail"+Q+": ["
 ELSE
  PRINT "  "+Q+"shareDetailUpdated"+Q+": ["
 LASTSID=""
 FOR TMPLOOP=1 TO SDCOUNT
  DO
   IF SDID(TMPLOOP)<>"" AND
     (@RGSTATE=STATEPRELOADDATA OR
     (@RGSTATE=STATEPROCESSDATA AND
      SDODTSTATUS(TMPLOOP)<>SDODTNEWSTATUS(TMPLOOP))) THEN
    DO
     LASTSID=SDID(TMPLOOP)
    END
  END
 FOR TMPLOOP=1 TO SDCOUNT
  DO
   IF SDID(TMPLOOP)<>"" AND
     (@RGSTATE=STATEPRELOADDATA OR
     (@RGSTATE=STATEPROCESSDATA AND
      SDODTSTATUS(TMPLOOP)<>SDODTNEWSTATUS(TMPLOOP))) THEN
    DO
     NEWLINE
     CALL JSONOPEN
     PRINT "   "+Q+"SID"+Q+": "+Q+SDID(TMPLOOP)+Q+","
     NEWLINE
     PRINT "   "+Q+"name"+Q+": "+Q+SDNAME(TMPLOOP)+Q+","
     NEWLINE
     TMPCHR=FORMAT("######9.99+",SDBALANCE(TMPLOOP))
     CALL NLS
     PRINT "   "+Q+"balance"+Q+": "+Q+TMPCHR+Q+","
     NEWLINE
     PRINT "   "+Q+"currentState"+Q+": "
     IF @RGSTATE=STATEPRELOADDATA THEN
      DO
       IF SDODTSTATUS(TMPLOOP)=TRUE THEN
        PRINT "true"
       ELSE
        PRINT "false"
      END
     ELSE
      DO
       IF SDODTNEWSTATUS(TMPLOOP)=TRUE THEN
        PRINT "true"
       ELSE
        PRINT "false"
      END
     NEWLINE
     PRINT "}"
     IF SDID(TMPLOOP)<>LASTSID THEN
      PRINT ","
     NEWLINE
    END
  END  [FOR TMPLOOP=1 TO SDCOUNT]
 PRINT "]"
 IF @RGSTATE=STATEPRELOADDATA THEN
  DO
   PRINT ","
   NEWLINE
   PRINT Q+"terms"+Q+": ["
   NEWLINE
   FOR TMPLOOP=1 TO PARAMCUSTOMTERMLINES
    DO
     PRINT Q+PARAMCUSTOMTERMS(TMPLOOP)+Q
     IF TMPLOOP<PARAMCUSTOMTERMLINES THEN
      PRINT ","
     NEWLINE
    END
   PRINT "],"
   NEWLINE
   PRINT Q+"feeDisclosure"+Q+": ["
   NEWLINE

   FOR TMPLOOP=1 TO PARAMFEEDISCLLINES
    DO
     PRINT Q+PARAMFEEDISCL(TMPLOOP)+Q
     IF TMPLOOP<PARAMFEEDISCLLINES THEN
      PRINT ","
     NEWLINE
    END
   PRINT "],"
   NEWLINE
   PRINT Q+"revocationInstructions"+Q+": ["
   NEWLINE

   FOR TMPLOOP=1 TO PARAMREVOKEINSTLINES
    DO
     PRINT Q+PARAMREVOKEINST(TMPLOOP)+Q
     IF TMPLOOP<PARAMREVOKEINSTLINES THEN
      PRINT ","
     NEWLINE
    END
   PRINT "]"
   NEWLINE
  END
 CALL JSONCLOSE
 CALL JSONCLOSE
END [PROCEDURE]

PROCEDURE POLLSHARES
[* Create list of eligible shares. For each eigible share found, call
** procedure to add the share to the list.
*]
 WHILELIMIT=1000000
 SDCOUNT=0
 FOR TMPLOOP=0 TO SDMAX
  DO
   SDID(TMPLOOP)=""
   SDNAME(TMPLOOP)=""
   SDBALANCE(TMPLOOP)=$0.00
   SDODTSTATUS(TMPLOOP)=FALSE
   SDODTNEWSTATUS(TMPLOOP)=FALSE
   SDODTTRACKINGLOC(TMPLOOP)=0
   SDTRACKINGUPDATE(TMPLOOP)=FMUNCHANGED
   SDAUTHFEEUPDATE(TMPLOOP)=0
  END

 FOR EACH SHARE WITH(SHARE:CLOSEDATE=DATENULL AND
                     SHARE:CHARGEOFFDATE=DATENULL AND
                     VALIDSHARETYPES(SHARE:TYPE)=TRUE AND
                     SHARE:SHARECODE<>2)
  DO
   CALL TESTFORSHAREWARNING
   IF SLAWARNINGFOUND=FALSE THEN
    DO
     CALL ADDSHARETOLIST
    END
  END
END [PROCEDURE]

PROCEDURE TESTFORSHAREWARNING
[* Test share for targeted warning(s)
*]
 SLAWARNINGFOUND=FALSE
 FOR TMPLOOP=1 TO MAXWARNINGTYPES
  DO
   IF ANYWARNING(SHARE,TMPLOOP) AND
      WARNINGSSHARE(TMPLOOP)=TRUE THEN
    DO
     SLAWARNINGFOUND=TRUE
     TMPLOOP=MAXWARNINGTYPES
    END
  END
END [PROCEDURE]

PROCEDURE ADDSHARETOLIST
[* Increment share counter. If max shares have been reached then
** set flag, else add share to list. Current share ODT status is
** found in share tracking. The first unexpired share tracking found
** will be used.
*]
 SDCOUNT=SDCOUNT+1
 IF SDCOUNT>SDMAX THEN
  DO
   SDOVERMAX=TRUE
  END
 ELSE
  DO
   TMPCHR=SHARE:DESCRIPTION
   CALL CLEANUPTEXT

   SDID(SDCOUNT)=SHARE:ID
   SDNAME(SDCOUNT)=TMPCHR
   SDBALANCE(SDCOUNT)=SHARE:AVAILABLEBALANCE
   FOR EACH SHARE TRACKING WITH (SHARE TRACKING:TYPE=PARAMSHARETRACKING AND
                                (SHARE TRACKING:EXPIREDATE=DATENULL OR
                                 SHARE TRACKING:EXPIREDATE>SYSTEMDATE) AND
                                 SDODTTRACKINGLOC(SDCOUNT)=0)
    DO
     SDODTTRACKINGLOC(SDCOUNT)=SHARE TRACKING:LOCATOR
     SDODTSTATUS(SDCOUNT)=SHARE TRACKING:USERCODE1
    END
  END
END [PROCEDURE]

PROCEDURE READCONFIGFILESETTINGS
[* Read parameter settings from the configuration Letter file.
**  IAT PARAMINELIGIBLEACCTS  Ineligible Account Type(s) (in LISTEXPAND format)
**  TRK PARAMSHARETRACKING    The Share tracking type used for ODT tracking
**  ST  PARAMVALIDSHARETYPES  Char list of valid Share types (in LISTEXPAND format)
**  AW  PARAMWARNINGSACCT     Acct level warnings which exclude account (in LISTEXPAND format)
**  SW  PARAMWARNINGSSHARE    Share warnings which exclude share (in LISTEXPAND format)
**  UD  PARAMUPDATEANDF       Should the program update the AUTHFEEOPTION:1 and ODTAUTHFEESRCCODELIST:1 fields
**  SCT PARAMSC1TRUE          Source code 1 value if opt-in = true
**  SCF PARAMSC1FALSE         Source code 1 value if opt-in = false
**  AFT PARAMAF1TRUE          Auth & fee 1 value if opt-in = true
**  AFF PARAMAF1FALSE         Auth & fee 1 value if opt-in = false
**  TC  PARAMCUSTOMTERMS      Custom terms and conditions
**  FD  PARAMFEEDISCL         Custom fee disclosure
**  RI  PARAMREVOKEINST       Revocation instructions
*]
 INVALIDCONFIGPARAMS=FALSE

 FILEOPEN("LETTER",CONFIGFILENAME,"READ",LFNUMBER,LFERROR)

 IF LFERROR<>"" THEN
  DO
   READCONFIGERROR=TRUE
   READCONFIGERRORMSG="Error Opening Letterfile "+CONFIGFILENAME+": "+LFERROR
  END
 ELSE
  DO
   FILEREADLINE(LFNUMBER,LFLINE,LFERROR)
   WHILE LFERROR=""
    DO
     CALL NORMALIZEDATA
     IF PARAMNAME<>"" THEN
      DO
[* Ineligible Account Type(s)
*]
       IF PARAMNAME="IAT" AND
          PARAMVALUE<>"" THEN
        PARAMINELIGIBLEACCTS=PARAMVALUE

[* Share Tracking Type
*]
       IF PARAMNAME="TRK" AND
          PARAMVALUE<>"" THEN
        PARAMSHARETRACKING=VALUE(PARAMVALUE)

[* Valid Share Types
*]
       IF PARAMNAME="ST" THEN
        PARAMVALIDSHARETYPES=PARAMVALUE
[* Account Warnings
*]
       ELSE IF PARAMNAME="AW" AND
               PARAMVALUE<>"" THEN
        PARAMWARNINGSACCT=PARAMVALUE
[* Share Warnings
*]
       ELSE IF PARAMNAME="SW" AND
               PARAMVALUE<>"" THEN
        PARAMWARNINGSSHARE=PARAMVALUE
[* Update Auth And Fee
*]
       ELSE IF PARAMNAME="UD" THEN
        DO
         IF PARAMVALUE="FALSE" THEN
          PARAMUPDATEANDF=FALSE
        END
[* Source Code 1 when update A&F true & Opt-in true
*]
       ELSE IF PARAMNAME="SCT" THEN
        PARAMSC1TRUE=UPPERCASE(PARAMVALUE)
[* Source Code 1 when update A&F true & opt-in false
*]
       ELSE IF PARAMNAME="SCF" THEN
        PARAMSC1FALSE=UPPERCASE(PARAMVALUE)
[* Auth/Fee Option 1 when update A&F true & Opt-in true
*]
       ELSE IF PARAMNAME="AFT" AND
               PARAMVALUE<>"" THEN
        PARAMAF1TRUE=VALUE(PARAMVALUE)
[* Auth/Fee Option 1 when update A&F true & opt-in false
*]
       ELSE IF PARAMNAME="AFF" AND
               PARAMVALUE<>"" THEN
        PARAMAF1FALSE=VALUE(PARAMVALUE)
[* Custom terms & conditions
*]
       ELSE IF PARAMNAME="TC" THEN
        DO
         IF PARAMCUSTOMTERMLINES<PARAMCUSTOMTERMLINESMAX THEN
          DO
           PARAMCUSTOMTERMLINES=PARAMCUSTOMTERMLINES+1
           TMPCHR=PARAMVALUE
           CALL NTS
           CALL CLEANUPTEXT
           PARAMCUSTOMTERMS(PARAMCUSTOMTERMLINES)=TMPCHR
          END
        END
[* Custom Fee Disclosure
*]
       ELSE IF PARAMNAME="FD" THEN
        DO
         IF PARAMFEEDISCLLINES<PARAMCUSTOMTERMLINESMAX THEN
          DO
           PARAMFEEDISCLLINES=PARAMFEEDISCLLINES+1
           TMPCHR=PARAMVALUE
           CALL NTS
           CALL CLEANUPTEXT
           PARAMFEEDISCL(PARAMFEEDISCLLINES)=TMPCHR
          END
        END
[* Revocation Instructions
*]
       ELSE IF PARAMNAME="RI" THEN
        DO
         IF PARAMREVOKEINSTLINES<PARAMREVOKEINSTLINESMAX THEN
          DO
           PARAMREVOKEINSTLINES=PARAMREVOKEINSTLINES+1
           TMPCHR=PARAMVALUE
           CALL NTS
           CALL CLEANUPTEXT
           PARAMREVOKEINST(PARAMREVOKEINSTLINES)=TMPCHR
          END
        END
      END

     PARAMNAME=""
     PARAMVALUE=""
     FILEREADLINE(LFNUMBER,LFLINE,LFERROR)
    END [WHILE LFERROR=""]

   IF LFERROR<>"" AND
      LFERROR<>"EOF" THEN
    DO
     READCONFIGERROR=TRUE
     READCONFIGERRORMSG="Error Reading Letterfile "+CONFIGFILENAME+": "+LFERROR
    END
   FILECLOSE(LFNUMBER,LFERROR)
  END

 IF DEBUGMODE=TRUE THEN
  DO
   PRINT ""
   NEWLINE
   PRINT "IAT: "+PARAMINELIGIBLEACCTS
   NEWLINE
   PRINT "TRK: "+FORMAT("99",PARAMSHARETRACKING)
   NEWLINE
   PRINT "ST: "+PARAMVALIDSHARETYPES
   NEWLINE
   PRINT "AW: "+PARAMWARNINGSACCT
   NEWLINE
   PRINT "SW: "+PARAMWARNINGSSHARE
   NEWLINE
   PRINT "UD: "+FORMAT("9",PARAMUPDATEANDF)
   NEWLINE
   PRINT "SCT: "+PARAMSC1TRUE
   NEWLINE
   PRINT "SCF: "+PARAMSC1FALSE
   NEWLINE
   PRINT "AFT: "+FORMAT("9",PARAMAF1TRUE)
   NEWLINE
   PRINT "AFF: "+FORMAT("9",PARAMAF1FALSE)
   NEWLINE

   FOR TMPLOOP=1 TO PARAMCUSTOMTERMLINES
    DO
     PRINT FORMAT("TC-99:",TMPLOOP)+"'"+PARAMCUSTOMTERMS(TMPLOOP)+"'"
     NEWLINE
    END
   NEWLINE

   FOR TMPLOOP=1 TO PARAMFEEDISCLLINES
    DO
     PRINT FORMAT("FD-99:",TMPLOOP)+"'"+PARAMFEEDISCL(TMPLOOP)+"'"
     NEWLINE
    END
   NEWLINE

   FOR TMPLOOP=1 TO PARAMREVOKEINSTLINES
    DO
     PRINT FORMAT("RI-99:",TMPLOOP)+"'"+PARAMREVOKEINST(TMPLOOP)+"'"
     NEWLINE
    END
   NEWLINE
  END

 LELISTINPUT=PARAMINELIGIBLEACCTS
 IF LELISTINPUT="" THEN
  LELISTINPUT="NONE"
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO 9999
  DO
   INVALIDACCTYPES(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=PARAMVALIDSHARETYPES
 IF LELISTINPUT="" THEN
  LELISTINPUT="ALL"
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXSLTYPES
  DO
   VALIDSHARETYPES(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=PARAMWARNINGSACCT
 IF LELISTINPUT="" THEN
  LELISTINPUT="NONE"
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXWARNINGTYPES
  DO
   WARNINGSACCT(TMPLOOP)=LELIST(TMPLOOP)
  END

 LELISTINPUT=PARAMWARNINGSSHARE
 IF LELISTINPUT="" THEN
  LELISTINPUT="NONE"
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXWARNINGTYPES
  DO
   WARNINGSSHARE(TMPLOOP)=LELIST(TMPLOOP)
  END

 IF READCONFIGERROR=TRUE THEN
  DO
   NEWLINE
   CALL JSONOPEN
   ERRORCODE=501
   CALL ERRORHANDLER
   CALL JSONCLOSE
   @RGSTATE=STATEEND
  END
 ELSE
  CALL VALIDATEPARAMS
END [PROCEDURE]

PROCEDURE VALIDATEPARAMS
[* Validate required parameters to make sure all necessary
** parameter settings are present and within required ranges
*]
 PARAMVALIDATIONERROR=FALSE
[* Validate tracking record (<=3 and <=99)
*]
 IF PARAMSHARETRACKING<30 OR
    PARAMSHARETRACKING>99 THEN
  DO
   PARAMVALIDATIONERROR=TRUE
   PARAMVALIDATIONERRORCHR="Invalid tracking type"
  END

[* validate source code list entries  - if true or false
*]
 IF PARAMVALIDATIONERROR=FALSE AND
    PARAMUPDATEANDF=TRUE AND
    LENGTH(PARAMSC1TRUE)>0 THEN
  DO
   FOR TMPLOOP=1 TO LENGTH(PARAMSC1TRUE)
    DO
     TMPCHR=SEGMENT(PARAMSC1TRUE,TMPLOOP,TMPLOOP)
     IF CHARACTERSEARCH(VALIDSOURCECODELIST,TMPCHR)=0 THEN
      DO
       PARAMVALIDATIONERROR=TRUE
       PARAMVALIDATIONERRORCHR="Invalid source code"
       TMPLOOP=LENGTH(PARAMSC1TRUE)
      END
    END
  END

 IF PARAMVALIDATIONERROR=FALSE AND
    PARAMUPDATEANDF=TRUE AND
    LENGTH(PARAMSC1FALSE)>0 THEN
  DO
   FOR TMPLOOP=1 TO LENGTH(PARAMSC1FALSE)
    DO
     TMPCHR=SEGMENT(PARAMSC1FALSE,TMPLOOP,TMPLOOP)
     IF CHARACTERSEARCH(VALIDSOURCECODELIST,TMPCHR)=0 THEN
      DO
       PARAMVALIDATIONERROR=TRUE
       PARAMVALIDATIONERRORCHR="Invalid tracking type"
       TMPLOOP=LENGTH(PARAMSC1FALSE)
      END
    END
  END

 IF PARAMVALIDATIONERROR=FALSE AND
    PARAMUPDATEANDF=TRUE AND
   (PARAMAF1TRUE<0 OR
    PARAMAF1TRUE>7) THEN
  PARAMVALIDATIONERROR=TRUE

 IF PARAMVALIDATIONERROR=FALSE AND
    PARAMUPDATEANDF=TRUE AND
   (PARAMAF1FALSE<0 OR
    PARAMAF1FALSE>7) THEN
  PARAMVALIDATIONERROR=TRUE

 IF PARAMSHARETRACKING<30 OR
    PARAMSHARETRACKING>99 THEN
  PARAMVALIDATIONERROR=TRUE

 IF PARAMVALIDATIONERROR=TRUE THEN
  DO
   NEWLINE
   CALL JSONOPEN
   ERRORCODE=502
   CALL ERRORHANDLER
   CALL JSONCLOSE
   @RGSTATE=STATEEND
  END
END [PROCEDURE]

PROCEDURE NORMALIZEDATA
[* Normalize the data and if a parameter, separate into
** parameter name and value
** PASS    LFLINE          Character line read in
** RETURN  PARAMNAME       Parameter name found
** RETURN  PARAMVALUE      Parameter value
**
*]
 PARAMNAME=""
 PARAMVALUE=""

 POS=CHARACTERSEARCH(LFLINE,":")
 IF LFLINE<>"" AND
    SEGMENT(LFLINE,1,1)<>"*" AND
    POS>1 THEN
  DO
   TMPCHR=SEGMENT(LFLINE,1,POS-1)
   CALL NLTS
   PARAMNAME=UPPERCASE(TMPCHR)

   TMPCHR=SEGMENT(LFLINE,POS+1,LENGTH(LFLINE))
   CALL NLTS
   PARAMVALUE=TMPCHR
  END
END [PROCEDURE]

PROCEDURE NLTS
[* Remove leading AND trailing spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 CALL NTS
 IF TMPCHR<>"" THEN
  CALL NLS
END [PROCEDURE]

PROCEDURE NLS
[* Remove leading spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 WHILE (LENGTH(TMPCHR)>0 AND
        SEGMENT(TMPCHR,1,1)=" ")
  DO
   IF LENGTH(TMPCHR)=1 THEN
    TMPCHR=""
   ELSE
    TMPCHR=SEGMENT(TMPCHR,2,LENGTH(TMPCHR))
  END
 IF LENGTH(TMPCHR)=0 THEN
  TMPCHR=""
END [PROCEDURE]

PROCEDURE NTS
[* Remove trailing spaces
**  PASS       TMPCHR
**  RETURN     TMPCHR
*]
 IF TMPCHR<>"" THEN
  TMPCHR=SEGMENT(TMPCHR,1,LENGTH(TMPCHR))
 IF LENGTH(TMPCHR)=0 THEN
  TMPCHR=""
END [PROCEDURE]

PROCEDURE CLEANUPTEXT
[* Check character string and remove out any characters or hidden
** characters which have an ASCII value which is not established in
** the VALIDCHRINPUT1 string in the SETUP division . This is to avoid
** display issues with displaying the terms or conditions. Additionally,
** if a back-slash or double quote is encountered, add a preceding
** backslash
**  PASS       TMPCHR   String to test
**  RETURN     TMPCHR   Updated string
*]
 LELISTINPUT=VALIDCHRINPUT1
 CALL LISTEXPAND
 FOR TMPLOOP=0 TO MAXCHRVALUE
  DO
   VALIDCHARS(TMPLOOP)=LELIST(TMPLOOP)
  END
 TMPTEXT=""

 IF TMPCHR<>"" THEN
  DO
   FOR TMPTEXTLOOP=1 TO LENGTH(TMPCHR)
    DO
     CHRVAL=CHRVALUE(SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP))
     IF  VALIDCHARS(CHRVAL)=TRUE THEN
      DO
[* Check for back-slash or double-quote. If found, precede with a back-slash
*]
       IF (CHRVAL=92 OR CHRVAL=34) THEN
        TMPTEXT=TMPTEXT+"\"+SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP)
       ELSE
        TMPTEXT=TMPTEXT+SEGMENT(TMPCHR,TMPTEXTLOOP,TMPTEXTLOOP)
      END
    END
  END
 TMPCHR=TMPTEXT
END [PROCEDURE]

PROCEDURE INITIALIZEDATA
[* Initialize state variables
*]
 WHILELIMIT=100000
 LFNUMBER=0
 LFERROR=""
 MEMBERNUM=""
 SLTYPE=""
 SLID=""
 READCONFIGERROR=FALSE
 READCONFIGERRORMSG=""
 LFERROR=""
 LFNUMBER=0

 PARAMINELIGIBLEACCTS="NONE"
 PARAMVALIDSHARETYPES="ALL"
 PARAMWARNINGSACCT="NONE"
 PARAMWARNINGSSHARE="NONE"
 PARAMUPDATEANDF=TRUE
 PARAMSC1TRUE=""
 PARAMSC1FALSE="GOBA"
 PARAMAF1TRUE=0
 PARAMAF1FALSE=7
 PARAMCUSTOMTERMLINES=0
 PARAMREVOKEINSTLINES=0
 PARAMSHARETRACKING=0

 FOR TMPLOOP=0 TO PARAMCUSTOMTERMLINESMAX
  DO
   PARAMCUSTOMTERMS(TMPLOOP)=""
   PARAMFEEDISCL(TMPLOOP)=""
  END

 FOR TMPLOOP=0 TO PARAMREVOKEINSTLINESMAX
  DO
   PARAMREVOKEINST(TMPLOOP)=""
  END

 FOR TMPLOOP=0 TO MAXSLTYPES
  DO
   VALIDSHARETYPES(TMPLOOP)=FALSE
  END

 FOR TMPLOOP=0 TO MAXWARNINGTYPES
  DO
   WARNINGSACCT(TMPLOOP)=FALSE
   WARNINGSSHARE(TMPLOOP)=FALSE
  END

END [PROCEDURE]

PROCEDURE ERRORHANDLER
[* Print error code information to output.
**  PASS       ERRORCODE      Error code to print
**  PASS       ERRORMSG       Error type to print
**  PASS       ERRORDETAIL    Specific error detail
**
** ERROR CODES
**  500 - Program running in memo mode
**  501 - Config file read error
**  502 - Config file validation error
**  503 - No eligible shares to be created
**  504 - Ineligible account type
**  505 - Account warning exists
**  506 - Error updating/creating share tracking
**  507 - Error updating Auth/Fee fields

*]
 ERRORMSG="loggingErrorMessage"
 ERRORDETAIL(0)="Program running in memo mode"
 ERRORDETAIL(1)="Error reading from config file:"+LFERROR
 ERRORDETAIL(2)="Config file validation error"
 ERRORDETAIL(3)="No eligible shares."
 ERRORDETAIL(4)=FORMAT("Ineligible Acct Type 9999 found",ACCOUNT:TYPE)
 ERRORDETAIL(5)=FORMAT("Account warning 999 exists",SLAWARNINGFOUND)
 ERRORDETAIL(6)="Error attempting to update share tracking: "+FMERROR
 ERRORDETAIL(7)="Error updating sourcecode & auth/fee fields: "+FMERROR

 ERRORDETAILOFFSET=ERRORCODE-500

[* 7/1-TEK: Force all error codes to 500 except for 503
*]
 IF ERRORCODE<>503 THEN
  ERRORCODE=500

 PRINT "    "+Q+"errorCode"+Q+": "+FORMAT(Q+"999"+Q,ERRORCODE)+","
 NEWLINE
 PRINT "    "+Q+ERRORMSG+Q+": "+
            Q+ERRORDETAIL(ERRORDETAILOFFSET)+Q
 NEWLINE
END [PROCEDURE]

PROCEDURE JSONOPEN
 PRINT "{"
 NEWLINE
END [PROCEDURE]

PROCEDURE JSONCLOSE
 PRINT "}"
 NEWLINE
END [PROCEDURE]

PROCEDURE VALIDATEACCOUNT

 INVALIDACCTTYPEFOUND=FALSE
 IF INVALIDACCTYPES(ACCOUNT:TYPE)=TRUE THEN
  INVALIDACCTTYPEFOUND=TRUE

 SLAWARNINGFOUND=FALSE
 FOR TMPLOOP=1 TO MAXWARNINGTYPES
  DO
   IF WARNINGSACCT(TMPLOOP)=TRUE AND
      ANYWARNING(ACCOUNT,TMPLOOP) THEN
    DO
     SLAWARNINGFOUND=TMPLOOP
     TMPLOOP=MAXWARNINGTYPES
    END
  END

 IF INVALIDACCTTYPEFOUND=TRUE THEN
  DO
   ERRORCODE=504
   @RGSTATE=STATEEND
   CALL JSONOPEN
   CALL ERRORHANDLER
   CALL JSONCLOSE
  END

 IF SLAWARNINGFOUND<>FALSE THEN
  DO
   ERRORCODE=505
   @RGSTATE=STATEEND
   CALL JSONOPEN
   CALL ERRORHANDLER
   CALL JSONCLOSE
  END
END [PROCEDURE]

PROCEDURE VALIDATESYSMEMOMODE
[* Check to see if system is in MemoMode and if so, return
** memoMode: true
*]
 SYSTEMMEMOMODE=SYSMEMOMODE

 IF SYSTEMMEMOMODE=TRUE THEN
  DO
   NEWLINE
   CALL JSONOPEN
   PRINT Q+"memoMode"+Q+": true"
   NEWLINE
   CALL JSONCLOSE
   @RGSTATE=STATEEND
  END
END [PROCEDURE]

PROCEDURE SETSESSIONVARS
[* Pull the values from the state character arrays and store in
** an array for processing.
*]
 SNSHARELIST(1)=@RGUSERCHR1
 SNSHARELIST(2)=@RGUSERCHR2
 SNSHARELIST(3)=@RGUSERCHR3
 SNSHARELIST(4)=@RGUSERCHR4
 SNSHARELIST(5)=@RGUSERCHR5
END [PROCEDURE]

PROCEDURE SETSNSHARELISTSELECTED
[* UX will pass back up to 5 strings of data consisting of those Share
** IDs which are to be enrolled in ODT, passed data will be formatted
** as 4-chracter Share IDs with comma dilineation.
*]

 FOR TMPLOOP=1 TO SDMAX
  DO
   SDODTNEWSTATUS(TMPLOOP)=FALSE
  END

 SHARELISTINDEX=1
 WHILE SHARELISTINDEX<=5
  DO
   SHARELIST=SNSHARELIST(SHARELISTINDEX)
   WHILE SHARELIST<>""
    DO
     COMMAPOS=CHARACTERSEARCH(SHARELIST,",")
     IF COMMAPOS>0 THEN
      DO
       SLID=SEGMENT(SHARELIST,1,COMMAPOS-1)
       IF COMMAPOS=LENGTH(SHARELIST) THEN
        SHARELIST=""
       ELSE
	  SHARELIST=SEGMENT(SHARELIST,COMMAPOS+1,LENGTH(SHARELIST))
      END
     ELSE
      DO
       SLID=SHARELIST
       SHARELIST=""
      END
     IF SLID<>"" THEN
      DO
       SLID="0000"+SLID
       SLID=SEGMENT(SLID,LENGTH(SLID)-SLIDLEN+1,LENGTH(SLID))
       FOUND=FALSE
       TMPLOOP=1
       WHILE FOUND=FALSE AND TMPLOOP<=SDCOUNT
        DO
         IF SDID(TMPLOOP)=SLID THEN
          DO
           FOUND=TRUE
           SDODTNEWSTATUS(TMPLOOP)=TRUE
          END
         TMPLOOP=TMPLOOP+1
        END
      END
    END
   SHARELISTINDEX=SHARELISTINDEX+1
  END
END [PROCEDURE]

PROCEDURE UPDATERECORDS
[* Update or create share tracking records as needed and, if the parameter
** is set, the auth/fee and surcecode fields.
*]
 TMPLOOP=1
 FMERROR=""
 FMUPDATEERRORTRACKING=FALSE

 WHILE (TMPLOOP<=SDCOUNT)
  DO
   IF (SDODTSTATUS(TMPLOOP)<>SDODTNEWSTATUS(TMPLOOP)) OR
       SDODTTRACKINGLOC(TMPLOOP)=0 OR
       PARAMUPDATEANDF=TRUE THEN
    DO
     IF SDODTNEWSTATUS(TMPLOOP)=TRUE THEN
      NEWSTATUS=1
     ELSE
      NEWSTATUS=0
     IF SDODTTRACKINGLOC(TMPLOOP)=0 THEN
      DO
       FMTRACKINGLOCATOR=-1
       FMPERFORM CREATE SHARE SDID(TMPLOOP) TRACKING LOC FMTRACKINGLOCATOR
                (0,PARAMSHARETRACKING,TEMPLOC,FMERROR)
        DO
         SET USERCODE1   TO NEWSTATUS
         SET USERDATE1   TO SYSTEMDATE
        END
      END
     ELSE
      DO
       FMTRACKINGLOCATOR=SDODTTRACKINGLOC(TMPLOOP)
       FMPERFORM REVISE SHARE SDID(TMPLOOP) TRACKING LOC FMTRACKINGLOCATOR
                (0,PARAMSHARETRACKING,FMERROR)
        DO
         SET USERCODE1   TO NEWSTATUS
         SET USERDATE1   TO SYSTEMDATE
        END
      END
     IF FMERROR<>"" THEN
      DO
       SDTRACKINGUPDATE(TMPLOOP)=FMUNSUCCESSFUL
       FMUPDATEERRORTRACKING=TRUE
      END
     ELSE
      SDTRACKINGUPDATE(TMPLOOP)=FMSUCCESSFUL

     IF PARAMUPDATEANDF=TRUE THEN
      CALL FMAUTHFEEFIELDS
    END
   TMPLOOP=TMPLOOP+1
  END
END [PROCEDURE]

PROCEDURE FMAUTHFEEFIELDS
[* If parameter is set, update the Auth/Fee and Sourcecode fields
*]
 FMERROR=""
 FMUPDATEERRORAUTHFEE=FALSE

 IF SDODTNEWSTATUS(TMPLOOP)=TRUE THEN
  DO
   NEWSOURCECODE1=PARAMSC1TRUE
   NEWAUTFEEOPTION1=PARAMAF1TRUE
  END
 ELSE
  DO
   NEWSOURCECODE1=PARAMSC1FALSE
   NEWAUTFEEOPTION1=PARAMAF1FALSE
  END

 FMPERFORM REVISE SHARE SDID(TMPLOOP) (0,0,FMERROR)
  DO
   SET ODTAUTHFEESRCCODELIST:1 TO NEWSOURCECODE1
   SET AUTHFEEOPTION:1 TO NEWAUTFEEOPTION1
  END

 IF FMERROR<>"" THEN
  DO
   SDAUTHFEEUPDATE(TMPLOOP)=FMUNSUCCESSFUL
   FMUPDATEERRORAUTHFEE=TRUE
  END
 ELSE
  SDAUTHFEEUPDATE(TMPLOOP)=FMSUCCESSFUL
END [PROCEDURE]

#INCLUDE "RB.LISTEXPAND"
