[*
**  Copyright 2019 Jack Henry and Associates
**
**  This Banno service PowerOn allow the user to select one or more
**  eligible loans and, for a fee, have the loan due date advanced
**  by a month.
**
**  For more information check
**  https://github.com/Banno/banno-powerons
**
**  Banno is not responsible for any modifications to this file
**  made by unauthorized personel.
**
**  DO NOT MODIFY THIS FILE UNLESS YOU KNOW WHAT YOU'RE DOING!
*]

SYMCONNECT
STATELESS

TARGET=ACCOUNT

DEFINE
 #INCLUDE "RB.LISTEXPAND.DEF"

 Q                   = CHARACTER
 I                   = NUMBER
 J                   = NUMBER
 TOTALLOANS          = NUMBER
 ELIGIBLELOANS       = NUMBER
 WARNINGLOOP         = NUMBER
 SERVICEFOUND        = NUMBER
 SERVICELOOP         = NUMBER
 LOANSEASON          = NUMBER
 GRACEDAYS           = NUMBER
 SKIPCOUNT           = NUMBER
 TEMPLOOP            = NUMBER
 TIMEPERIOD          = CHARACTER(12)
 ERRORMSGUSER        = CHARACTER
 ERRORMSGLOG         = CHARACTER
 ERRORFLAG           = NUMBER
 TOTALFEE            = MONEY
 FEESUM              = MONEY
 COMMAPOS            = NUMBER
 TT                  = NUMBER
 TEXTFOUND           = NUMBER
 TEXT1               = CHARACTER

 LIDLIST             = CHARACTER
 LID                 = CHARACTER
 LDUEDATE            = DATE
 LNEWDUEDATE         = DATE
 LPAYMENT            = MONEY
 LMATURITYDATE       = DATE
 LNEWMATURITYDATE    = DATE
 LDESCRIPTION        = CHARACTER(40)
 LOANLOOP            = NUMBER
 LOANDISPLAYED       = NUMBER
 SHAREDISPLAYED      = NUMBER
 SHAREFOUND          = NUMBER
 INELIGIBLEDISPLAYED = NUMBER

 SEQ1                = NUMBER
 SEQ2                = NUMBER
 CAC                 = CHARACTER
 CN                  = CHARACTER
 TRANERROR           = CHARACTER
 FMERROR             = CHARACTER

 LFNUMBER            = NUMBER
 LFERROR             = CHARACTER
 LFLINE              = CHARACTER
 READCONFIGERROR     = NUMBER
 READCONFIGERRORMSG  = CHARACTER
 
 LOANID              = CHARACTER(4)  ARRAY(25)
 LOANINELIGIBLECODE  = NUMBER        ARRAY(25,10)
 LOANSMAX            = 25
 INELIGIBLEREASONS   = CHARACTER(60) ARRAY(10)
 INELIGIBLEREASONSMAX= 10

 LOANTYPES           = NUMBER        ARRAY(9999)
 SHARETYPES          = NUMBER        ARRAY(9999)
 TYPESMAX            = 9999

 LOANWARNINGS        = NUMBER        ARRAY(999)
 ACCTWARNINGS        = NUMBER        ARRAY(999)
 WARNINGSMAX         = 999

 LOANSERVICECODE     = NUMBER        ARRAY(99)
 SERVICECODEMAX      = 99

 FEEAMOUNTS          = MONEY         ARRAY(99) [0:DEFAULT, 
                                                01-99:REL CODE]
 FEEAMOUNTSMAX       = 99

 TERMS	  	     = CHARACTER ARRAY(40)
 TERMSMAXLINES	     = 40
 TERMSLINESCOUNT     = NUMBER

 GETPRELOADDATA	     = "GETPRELOADDATA"
 PERFORMSKIPAPAYMENT = "PERFORMSKIPAPAYMENT"

 CONFIGFILENAME      = "BANNO.LOANPAYMENT.SKIP.CFG"

 TRUE                      = 1
 FALSE                     = 0
 DATENULL                  = '--/--/--'

 INELIGIBLECODESET         = 0
 INELIGIBLECODELOANTYPE    = 1
 INELIGIBLECODELOANWARNING = 2
 INELIGIBLECODEMAXSKIPS    = 3
 INELIGIBLECODETIMESKIP    = 4
 INELIGIBLECODEACCTWARNING = 5
 INELIGIBLECODESERVICECODE = 6
 INELIGIBLECODEMINPAYMENT  = 7
 INELIGIBLECODEMAXPAYMENT  = 8
 INELIGIBLECODETIMEOPEN    = 9
 INELIGIBLECODEPASTDUE     = 10

 FEEAMOUNT                 = MONEY
 LOANTRACKINGTYPE          = NUMBER
 MAXSKIPS                  = NUMBER
 MINMONTHSINCE             = NUMBER
 SUBSOURCECODE             = NUMBER
 OTHERACTION               = NUMBER
 FEECOMMENT                = CHARACTER
 LOANMINPAYMENT            = MONEY
 LOANMAXPAYMENT            = MONEY
 STARTDATE                 = DATE
 ENDDATE                   = DATE

 DEFAULTFEEAMOUNT          = $35.00
 DEFAULTLOANTRACKINGTYPE   = 77
 DEFAULTMAXSKIPS           = 2
 DEFAULTMINMONTHSINCE      = 2
 DEFAULTSUBSOURCECODE      = 33 [Skip Payment Fee]
 DEFAULTOTHERACTION        = 1  [Use "FEE OTHER" OTHERACTION with Fee]
 DEFAULTFEECOMMENT         = ""
 DEFAULTLOANMINPAYMENT     = $0.00
 DEFAULTLOANMAXPAYMENT     = $0.00

 [Both start and end date must be set for this feature to work]
 DEFAULTSTARTDATE          = DATENULL
 DEFAULTENDDATE            = DATENULL

 GENERICUSERERRORMSG="We're sorry we've encountered an error. Please contact your credit union."
END

SETUP
 Q=CTRLCHR(34)

 CALL INITIALIZETERMS
 TERMS(1)="Some example terms go here"
 TERMS(2)="Some more text"
 TERMSLINESCOUNT=2

END [SETUP]

PRINT TITLE="Banno Skip a Loan Payment"

 CALL INITIALIZEDATA
 CALL READCONFIGFILESETTINGS
 IF @RGSTATE=GETPRELOADDATA THEN
  DO
   CALL PROCGETPRELOADDATA
  END
 ELSE IF @RGSTATE=PERFORMSKIPAPAYMENT THEN
  DO
   CALL PROCPERFORMSKIPAPAYMENT
  END
END [PRINT]

PROCEDURE PROCGETPRELOADDATA
 PRINT "{"
 NEWLINE

 IF READCONFIGERROR=TRUE THEN
  DO
   PRINT Q+"clientErrorMessage"+Q+":"
   NEWLINE
   PRINT Q+GENERICUSERERRORMSG+Q
   NEWLINE
   PRINT ","+Q+"loggingErrorMessage"+Q+":"
   NEWLINE
   PRINT Q+READCONFIGERRORMSG+Q+","
   NEWLINE
  END
 ELSE
  DO
   PRINT Q+"clientErrorMessage"+Q+":"+Q+Q+","
   NEWLINE
   PRINT Q+"loggingErrorMessage"+Q+":"+Q+Q+","
   NEWLINE
  END

 [ Check if skip-a-pay is available based on start and end dates.
   Both dates must be set to a non null value for this to work.
 ]
 PRINT "  "+Q+"available"+Q+":"
 IF STARTDATE<>DATENULL AND ENDDATE<>DATENULL THEN
  DO
   IF SYSTEMDATE>=STARTDATE AND SYSTEMDATE<=ENDDATE THEN
    PRINT "true,"
   ELSE
    PRINT "false,"
  END
 ELSE 
  PRINT "true,"
 NEWLINE

 PRINT "  "+Q+"availableStartDate"+Q+":"
 IF STARTDATE<>DATENULL then
  PRINT Q+FORMAT("99/99/9999",STARTDATE)+Q+","
 ELSE
  PRINT Q+Q+","
 NEWLINE
  
 PRINT "  "+Q+"availableEndDate"+Q+":"
 IF ENDDATE<>DATENULL then
  PRINT Q+FORMAT("99/99/9999",ENDDATE)+Q+","
 ELSE
  PRINT Q+Q+","
 NEWLINE 
 
 PRINT "  "+Q+"feePerPaymentSkip"+Q+":"+Q+FORMAT("#######9.99",FEEAMOUNT)+Q+","
 NEWLINE

 PRINT "  "+Q+"terms"+Q+":["
 NEWLINE
 I=1
 WHILE I<TERMSMAXLINES AND TERMS(I)<>""
  DO
   IF I>1 THEN
    PRINT ","
   PRINT Q+TERMS(I)+" "+Q
   NEWLINE
   I=I+1
  END
 PRINT "],"
 NEWLINE

 CALL GETLOANDATA
 PRINT "  "+Q+"availableLoans"+Q+": ["
 NEWLINE

 LOANDISPLAYED=FALSE
 FOR LOANLOOP=1 TO TOTALLOANS
  DO
   IF LOANINELIGIBLECODE(LOANLOOP,INELIGIBLECODESET)=FALSE THEN
    DO
     LID=LOANID(LOANLOOP)
     CALL GETSKIPCRITERIA

     IF LOANDISPLAYED=TRUE THEN
      PRINT ","
     PRINT "{"
     NEWLINE
     PRINT Q+"name"+Q+": "+Q+LDESCRIPTION+Q+","
     NEWLINE
     PRINT Q+"paymentAmount"+Q+": "+Q+FORMAT("#######9.99",LPAYMENT)+Q+","
     NEWLINE
     PRINT Q+"accountId"+Q+":"+Q+LID+Q+","
     NEWLINE
     PRINT Q+"originalPaymentDueDate"+Q+": "+Q+FORMAT("99/99/9999",LDUEDATE)+Q+","
     NEWLINE
     PRINT Q+"newPaymentDueDate"+Q+": "+Q+FORMAT("99/99/9999",LNEWDUEDATE)+Q
     NEWLINE
     PRINT "}"
     NEWLINE
     
     LOANDISPLAYED=TRUE
    END
  END
 PRINT "  ],"
 NEWLINE

 PRINT "  "+Q+"ineligibleLoans"+Q+": ["
 NEWLINE

 LOANDISPLAYED=FALSE
 FOR LOANLOOP=1 TO TOTALLOANS
  DO
   IF LOANINELIGIBLECODE(LOANLOOP,INELIGIBLECODESET)=TRUE THEN
    DO
     LID=LOANID(LOANLOOP)
     CALL GETSKIPCRITERIA

     IF LOANDISPLAYED=TRUE THEN
      PRINT ","
     PRINT "{"
     NEWLINE
     PRINT Q+"name"+Q+": "+Q+LDESCRIPTION+Q+","
     NEWLINE
     PRINT Q+"accountId"+Q+":"+Q+LID+Q+","
     NEWLINE
     INELIGIBLEDISPLAYED=FALSE
     FOR TEMPLOOP=1 TO INELIGIBLEREASONSMAX
      DO
       IF LOANINELIGIBLECODE(LOANLOOP,TEMPLOOP)=TRUE AND
          INELIGIBLEDISPLAYED=FALSE THEN
        DO
         PRINT Q+"ineligibilityReason"+Q+": "+Q+INELIGIBLEREASONS(TEMPLOOP)+Q
         NEWLINE
	 INELIGIBLEDISPLAYED=TRUE
        END
      END

     PRINT "}"
     NEWLINE
     
     LOANDISPLAYED=TRUE
    END
  END
 PRINT "  ],"
 NEWLINE

 PRINT "  "+Q+"availableShares"+Q+": ["
 NEWLINE

 SHAREDISPLAYED=FALSE
 FOR EACH SHARE WITH (SHARE:CLOSEDATE=DATENULL AND
                      SHARE:CHARGEOFFDATE=DATENULL AND 
                      SHARE:AVAILABLEBALANCE>=FEEAMOUNT AND 
                      SHARETYPES(SHARE:TYPE)=TRUE)
  DO
   IF SHAREDISPLAYED=TRUE THEN
    PRINT ","
   PRINT "{"+Q+"name"+Q+": "+Q+SHARE:DESCRIPTION+Q+","
   NEWLINE
   PRINT Q+"accountId"+Q+": "+Q+SHARE:ID+Q+","
   NEWLINE
   PRINT Q+"balance"+Q+": "+Q+FORMAT("#######9.99",SHARE:AVAILABLEBALANCE)+Q+"}"
   NEWLINE
   SHAREDISPLAYED=TRUE
  END 
 PRINT "]}"
 NEWLINE

END

PROCEDURE PROCPERFORMSKIPAPAYMENT
 PRINT "{"+Q+"loansWithPaymentsSkipped"+Q+": ["
 NEWLINE

 [ Need the loan data for input validation ]
 CALL GETLOANDATA

 TEXT1=@RGUSERCHR2
 CALL TEXTNLTS
 @RGUSERCHR2=TEXT1

 ERRORMSGUSER=""
 ERRORMSGLOG=""
 ERRORFLAG=FALSE
 LOANDISPLAYED=FALSE
 LIDLIST=@RGUSERCHR1
 TOTALFEE=FEEAMOUNT
 FEESUM=$0.00
 WHILE LIDLIST<>"" AND ERRORFLAG=FALSE
  DO
   CALL GETNEXTLID
   CALL GETSKIPCRITERIA

   I=1
   WHILE I<=TOTALLOANS AND LOANID(I)<>LID
    DO
     I=I+1
    END
   
   IF I>TOTALLOANS THEN
    DO
     ERRORFLAG=TRUE
     ERRORMSGUSER=GENERICUSERERRORMSG
     ERRORMSGLOG="Invalid loan id: "+LID
    END
   
   IF ERRORFLAG=FALSE AND 
      LOANINELIGIBLECODE(I,INELIGIBLECODESET)=TRUE THEN
    DO
     ERRORFLAG=TRUE
     ERRORMSGUSER=GENERICUSERERRORMSG
     ERRORMSGLOG="Attempt to skip a payment on an ineligible loan: "+LID
    END

   IF ERRORFLAG=FALSE THEN
    DO
     SHAREFOUND=FALSE
     FOR EACH SHARE WITH (SHARE:ID=@RGUSERCHR2)
      DO
       SHAREFOUND=TRUE
      END
     IF SHAREFOUND=FALSE THEN
      DO
       ERRORFLAG=TRUE
       ERRORMSGUSER=GENERICUSERERRORMSG
       ERRORMSGLOG="Invalid fee share id: "+@RGUSERCHR2
      END
    END

   IF ERRORFLAG=FALSE THEN
    DO
[ Update Loan fields]
     
     FEESUM=FEESUM+TOTALFEE
     FMPERFORM REVISE LOAN LID (0,0,FMERROR)
      DO
       SET DUEDATE       TO LNEWDUEDATE
       SET MATURITYDATE  TO LNEWMATURITYDATE
      END
     IF FMERROR<>"" THEN
      DO
       ERRORFLAG=TRUE
       ERRORMSGUSER=GENERICUSERERRORMSG
       ERRORMSGLOG="Loan Record Update Failed. Error: "+FMERROR
      END
     ELSE
      DO
[ Update Loan fields]

       FMPERFORM CREATE LOAN LID TRACKING LOC -1 (1,LOANTRACKINGTYPE,FMERROR)
        DO
         SET EXPIREDATE  TO DATENULL
         SET USERDATE1   TO SYSTEMDATE
         SET USERDATE2   TO LDUEDATE
         SET USERDATE3   TO LNEWDUEDATE
         SET USERDATE4   TO LMATURITYDATE
         SET USERDATE5   TO LNEWMATURITYDATE
         SET USERAMOUNT1 TO TOTALFEE
         SET USERAMOUNT2 TO LPAYMENT
        END
       IF FMERROR<>"" THEN
        DO
         ERRORFLAG=TRUE
         ERRORMSGUSER=GENERICUSERERRORMSG
         ERRORMSGLOG="Tracking Record Create Failed. Error: "+FMERROR
        END
       ELSE
        DO
         IF LOANDISPLAYED=TRUE THEN
          PRINT ","
         PRINT "{"
         NEWLINE
         PRINT Q+"name"+Q+": "+Q+LDESCRIPTION+Q+","
         NEWLINE
         PRINT Q+"paymentAmount"+Q+": "+Q+FORMAT("#######9.99",LPAYMENT)+Q+","
         NEWLINE
         PRINT Q+"accountId"+Q+":"+Q+LID+Q+","
         NEWLINE
         PRINT Q+"feePaid"+Q+": "+Q+FORMAT("#######9.99",TOTALFEE)+Q+","
         NEWLINE
         PRINT Q+"nextDueDate"+Q+": "+Q+FORMAT("99/99/9999",LNEWDUEDATE)+Q+","
         NEWLINE
	 FOR EACH SHARE WITH (SHARE:ID=@RGUSERCHR2)
          DO
           PRINT Q+"shareDebited"+Q+": "+Q+SHARE:DESCRIPTION+Q+"}"
           NEWLINE
	  END
	 LOANDISPLAYED=TRUE
        END
      END
    END
  END

[ Debit fee]

 IF ERRORFLAG=FALSE AND FEESUM>$0.00 THEN
  DO
   IF OTHERACTION<>0 THEN
    DO
     TRANPERFORM WF (0,SEQ1,SEQ2,CAC,CN,TRANERROR)
      DO
       SET FMACCT TO ACCOUNT:NUMBER
       SET FMTYPE TO "S"
       SET FMID   TO @RGUSERCHR2
       SET AMOUNT TO FEESUM
       SET SUBSOURCECODE TO SUBSOURCECODE
       SET COMMENT:1 TO FEECOMMENT
       SET OTHERACTION TO FORMAT("9",OTHERACTION)
       SET OTHERIDTYPE TO "L"
       SET OTHERID TO LID
      END  [TRANPERFORM]
    END
   ELSE
    DO
     TRANPERFORM WF (0,SEQ1,SEQ2,CAC,CN,TRANERROR)
      DO
       SET FMACCT TO ACCOUNT:NUMBER
       SET FMTYPE TO "S"
       SET FMID   TO @RGUSERCHR2
       SET AMOUNT TO FEESUM
       SET SUBSOURCECODE TO SUBSOURCECODE
       SET COMMENT:1 TO FEECOMMENT
      END  [TRANPERFORM]
    END
  END
 IF TRANERROR<>"" AND ERRORFLAG=FALSE THEN
  DO
   ERRORFLAG=TRUE
   ERRORMSGUSER=GENERICUSERERRORMSG
   ERRORMSGLOG="Skip Pay Fee Post Failed. Error="+TRANERROR
  END

 PRINT "],"+Q+"clientErrorMessage"+Q+":"
 NEWLINE
 PRINT Q+ERRORMSGUSER+Q
 NEWLINE
 PRINT ","+Q+"loggingErrorMessage"+Q+":"
 NEWLINE
 PRINT Q+ERRORMSGLOG+Q
 NEWLINE
 PRINT ","+Q+"memoMode"+Q+":"
 IF SYSMEMOMODE=0 THEN
  DO
   PRINT "false"
  END
 ELSE
  DO
   PRINT "true"
  END
 PRINT "}"
 NEWLINE
END

PROCEDURE INITIALIZETERMS
 WHILELIMIT=100000
 FOR I=1 TO TERMSMAXLINES
  DO
   TERMS(I)=""
  END
END

PROCEDURE INITIALIZEDATA
 FEEAMOUNT=DEFAULTFEEAMOUNT
 LOANTRACKINGTYPE=DEFAULTLOANTRACKINGTYPE
 MAXSKIPS=DEFAULTMAXSKIPS
 MINMONTHSINCE=DEFAULTMINMONTHSINCE
 SUBSOURCECODE=DEFAULTSUBSOURCECODE
 OTHERACTION=DEFAULTOTHERACTION
 FEECOMMENT=DEFAULTFEECOMMENT
 LOANMINPAYMENT=DEFAULTLOANMINPAYMENT
 LOANMAXPAYMENT=DEFAULTLOANMAXPAYMENT
 STARTDATE=DEFAULTSTARTDATE
 ENDDATE=DEFAULTENDDATE

 WHILELIMIT=100000
 FOR I=1 TO LOANSMAX
  DO
   LOANID(I)=""
   FOR J=0 TO INELIGIBLEREASONSMAX
    DO
     LOANINELIGIBLECODE(I,J)=FALSE
    END
  END
 
 FOR TEMPLOOP=1 TO WARNINGSMAX
  DO
   LOANWARNINGS(TEMPLOOP)=FALSE
   ACCTWARNINGS(TEMPLOOP)=FALSE
  END

 FOR TEMPLOOP=1 TO SERVICECODEMAX
  DO
   LOANSERVICECODE(TEMPLOOP)=FALSE
  END

 FOR TEMPLOOP=1 TO FEEAMOUNTSMAX
  DO
   FEEAMOUNTS(TEMPLOOP)=$0.00
  END

 FOR TEMPLOOP=0 TO TYPESMAX
  DO
   LOANTYPES(TEMPLOOP)=TRUE
   SHARETYPES(TEMPLOOP)=TRUE
  END

 FEEAMOUNTS(0)=FEEAMOUNT
 GRACEDAYS=0

 [Initialize the ineligible reason messages]
 INELIGIBLEREASONS(INELIGIBLECODELOANTYPE)=
  "Ineligible Loan Type"
 INELIGIBLEREASONS(INELIGIBLECODELOANWARNING)=
  "Loan Warning Found"
 INELIGIBLEREASONS(INELIGIBLECODEMAXSKIPS)=
  "Max Loan skips already used for last 12 months"
 INELIGIBLEREASONS(INELIGIBLECODETIMESKIP)=
  "Insufficient time since last skip"
 INELIGIBLEREASONS(INELIGIBLECODEACCTWARNING)=
  "Account Warning Found"
 INELIGIBLEREASONS(INELIGIBLECODESERVICECODE)=
  "Required Service Code(s) not found"
 INELIGIBLEREASONS(INELIGIBLECODEMINPAYMENT)=
  "Payment Less than Minimum allowed"
 INELIGIBLEREASONS(INELIGIBLECODEMAXPAYMENT)=
  "Payment More than Maximum allowed"
 INELIGIBLEREASONS(INELIGIBLECODETIMEOPEN)=
  "Insufficient time since loan was opened"
 INELIGIBLEREASONS(INELIGIBLECODEPASTDUE)=
  "Loan past due grace period elapsed"
END

PROCEDURE READCONFIGFILESETTINGS
 READCONFIGERROR=FALSE
 READCONFIGERRORMSG=""
[ Parse letterfile]
 FILEOPEN("LETTER",CONFIGFILENAME,"READ",LFNUMBER,LFERROR)
 IF LFERROR<>"" THEN
  DO
   READCONFIGERROR=TRUE
   READCONFIGERRORMSG="Error Opening Letterfile "+CONFIGFILENAME+": "+LFERROR
  END
 ELSE
  DO
   TERMSLINESCOUNT=0
   WHILE LFERROR=""
    DO
     FILEREADLINE(LFNUMBER,LFLINE,LFERROR)
     IF SEGMENT(LFLINE,1,1)<>"*" AND LFLINE<>"" THEN
      DO
[ Terms & conditions]
       IF SEGMENT(LFLINE,1,3)="TC:" AND TERMSLINESCOUNT<TERMSMAXLINES THEN
        DO
         TERMSLINESCOUNT=TERMSLINESCOUNT+1
         TERMS(TERMSLINESCOUNT)=SEGMENT(LFLINE,4,LENGTH(LFLINE))
        END
[ Loan types]
       IF SEGMENT(LFLINE,1,3)="LT:" THEN
        DO
         LELISTINPUT=SEGMENT(LFLINE,4,LENGTH(LFLINE))
         CALL LISTEXPAND
         FOR I=0 TO TYPESMAX
          DO
           LOANTYPES(I)=LELIST(I)
          END
        END
[ Loan service codes]
       IF SEGMENT(LFLINE,1,3)="SC:" THEN
        DO
         LELISTINPUT=SEGMENT(LFLINE,4,LENGTH(LFLINE))
         IF LELISTINPUT="" THEN
          LELISTINPUT="NONE"
         CALL LISTEXPAND
         FOR I=0 TO SERVICECODEMAX
          DO
           LOANSERVICECODE(I)=LELIST(I)
          END
        END
[ Loan warning codes]
       IF SEGMENT(LFLINE,1,3)="LW:" THEN
        DO
         IF LENGTH(LFLINE)>3 THEN
          DO
           LELISTINPUT=SEGMENT(LFLINE,4,LENGTH(LFLINE))
           CALL LISTEXPAND
           FOR I=1 TO WARNINGSMAX
            DO
             LOANWARNINGS(I)=LELIST(I)
            END
          END
        END
[ Acct warning codes]
       IF SEGMENT(LFLINE,1,3)="AW:" THEN
        DO
         IF LENGTH(LFLINE)>3 THEN
          DO
           LELISTINPUT=SEGMENT(LFLINE,4,LENGTH(LFLINE))
           CALL LISTEXPAND
           FOR I=1 TO WARNINGSMAX
            DO
             ACCTWARNINGS(I)=LELIST(I)
            END
          END
        END
[ Share types]
       IF SEGMENT(LFLINE,1,3)="ST:" THEN
        DO
         LELISTINPUT=SEGMENT(LFLINE,4,LENGTH(LFLINE))
         CALL LISTEXPAND
         FOR I=0 TO TYPESMAX
          DO
           SHARETYPES(I)=LELIST(I)
          END
        END
[ Program time period]
       IF SEGMENT(LFLINE,1,3)="TP:" THEN
        TIMEPERIOD=SEGMENT(LFLINE,4,LENGTH(LFLINE))
[ Min payment amount]
       IF SEGMENT(LFLINE,1,3)="MA:" THEN
        LOANMINPAYMENT=MONEY(VALUE(SEGMENT(LFLINE,4,LENGTH(LFLINE))))
[ Max payment amount]
       IF SEGMENT(LFLINE,1,3)="XA:" THEN
        LOANMAXPAYMENT=MONEY(VALUE(SEGMENT(LFLINE,4,LENGTH(LFLINE))))
[ Loan season]
       IF SEGMENT(LFLINE,1,3)="LS:" THEN
        LOANSEASON=VALUE(SEGMENT(LFLINE,4,LENGTH(LFLINE)))
       IF LOANSEASON>360 THEN
        LOANSEASON=360
[ Grace days past due]
       IF SEGMENT(LFLINE,1,3)="GD:" THEN
        GRACEDAYS=VALUE(SEGMENT(LFLINE,4,LENGTH(LFLINE)))
       IF GRACEDAYS>30 THEN
        GRACEDAYS=30 [MAX]
[ Fee amount(s)]
       IF SEGMENT(LFLINE,1,3)="FA:" THEN
        FEEAMOUNTS(VALUE(SEGMENT(LFLINE,4,5)))=
                   MONEY(VALUE(SEGMENT(LFLINE,7,LENGTH(LFLINE))))
[ Loan tracking type]
       IF SEGMENT(LFLINE,1,3)="TT:" THEN
        LOANTRACKINGTYPE=VALUE(SEGMENT(LFLINE,4,LENGTH(LFLINE)))
[ Max skips per year]
       IF SEGMENT(LFLINE,1,3)="PS:" THEN
        MAXSKIPS=VALUE(SEGMENT(LFLINE,4,LENGTH(LFLINE)))
[ Min months since last skip]
       IF SEGMENT(LFLINE,1,3)="MM:" THEN
        MINMONTHSINCE=VALUE(SEGMENT(LFLINE,4,LENGTH(LFLINE)))
[ Sub Source Code for Fee]
       IF SEGMENT(LFLINE,1,3)="SS:" THEN
        SUBSOURCECODE=VALUE(SEGMENT(LFLINE,4,LENGTH(LFLINE)))
[ OTHERACTION for Fee]
       IF SEGMENT(LFLINE,1,3)="OA:" THEN
        OTHERACTION=VALUE(SEGMENT(LFLINE,4,LENGTH(LFLINE)))
[ Transaction comment for Fee]
       IF SEGMENT(LFLINE,1,3)="FC:" THEN
        FEECOMMENT=SEGMENT(LFLINE,4,LENGTH(LFLINE))
      END
    END
  END

[ Determine which fee to use]
 IF ACCOUNT:RELATIONSHIPOVERRIDE>0 AND
   (ACCOUNT:RELATIONSHIPOVERRIDEEFFDATE=DATENULL OR
    ACCOUNT:RELATIONSHIPOVERRIDEEFFDATE<=SYSTEMDATE) AND
   (ACCOUNT:RELATIONSHIPOVERRIDEEXPDATE=DATENULL OR
    ACCOUNT:RELATIONSHIPOVERRIDEEXPDATE>SYSTEMDATE) THEN [Rel Code Override]
  FEEAMOUNT=FEEAMOUNTS(ACCOUNT:RELATIONSHIPOVERRIDE)
 ELSE IF ACCOUNT:RELATIONSHIPCODE>0 THEN [Relationship Code]
  FEEAMOUNT=FEEAMOUNTS(ACCOUNT:RELATIONSHIPCODE)
 ELSE [Base fee]
  FEEAMOUNT=FEEAMOUNTS(0)

 IF FEEAMOUNT=0 THEN
  FEEAMOUNT=FEEAMOUNTS(0)

[ Check if time period is valid, and parse start and end dates ]
 IF TIMEPERIOD<>"" AND LENGTH(TIMEPERIOD)=21 THEN
  DO
   STARTDATE=DATE(VALUE(SEGMENT(TIMEPERIOD,1,2)),
                  VALUE(SEGMENT(TIMEPERIOD,4,5)),
                  VALUE(SEGMENT(TIMEPERIOD,7,10)))
   ENDDATE=DATE(VALUE(SEGMENT(TIMEPERIOD,12,13)),
                VALUE(SEGMENT(TIMEPERIOD,15,16)),
                VALUE(SEGMENT(TIMEPERIOD,18,21)))
  END
END

PROCEDURE GETLOANDATA

 TOTALLOANS=0
 ELIGIBLELOANS=0
 FOR EACH LOAN WITH (LOAN:CLOSEDATE=DATENULL AND
                     LOAN:CHARGEOFFDATE=DATENULL AND
                     LOAN:BALANCE>$0.00)
  DO
   TOTALLOANS=TOTALLOANS+1
   FOR I=0 TO INELIGIBLEREASONSMAX
    DO
     LOANINELIGIBLECODE(TOTALLOANS,I)=FALSE
    END

   LOANID(TOTALLOANS)=LOAN:ID
   IF LOANTYPES(LOAN:TYPE)=FALSE THEN
    LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODELOANTYPE)=TRUE
   FOR WARNINGLOOP=1 TO WARNINGSMAX
    DO
     IF ANYWARNING(ACCOUNT,WARNINGLOOP) AND
        ACCTWARNINGS(WARNINGLOOP)=TRUE THEN
      LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODEACCTWARNING)=TRUE
     IF ANYWARNING(LOAN,WARNINGLOOP) AND 
        LOANWARNINGS(WARNINGLOOP)=TRUE THEN
      LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODELOANWARNING)=TRUE
    END

   SERVICEFOUND=FALSE
   FOR SERVICELOOP=1 TO SERVICECODEMAX
    DO
     IF ANYSERVICE(LOAN,SERVICELOOP) AND
        LOANSERVICECODE(SERVICELOOP)=TRUE THEN
      SERVICEFOUND=TRUE
    END

[ If none are found, check to see if any are defined]
   IF SERVICEFOUND=FALSE THEN
    DO
     [default to none found]
     SERVICEFOUND=TRUE
     FOR I=0 TO SERVICECODEMAX
      DO
[ One found, loan ineligible]
       IF LOANSERVICECODE(I)=TRUE THEN
        SERVICEFOUND=FALSE
      END
    END
[ If none found, and some are defined]
   IF SERVICEFOUND=FALSE THEN
    LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODESERVICECODE)=TRUE

[ Payment amount]
   IF LOANMINPAYMENT>$0.00 AND LOAN:PAYMENT<LOANMINPAYMENT THEN
    LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODEMINPAYMENT)=TRUE
   IF LOANMAXPAYMENT>$0.00 AND LOAN:PAYMENT>LOANMAXPAYMENT THEN
    LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODEMAXPAYMENT)=TRUE
[ Loan season]
   IF LOANSEASON>0 AND 
      SYSTEMDATE<DATEOFFSET(LOAN:OPENDATE,LOANSEASON,0) THEN
    LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODETIMEOPEN)=TRUE
[ Grace period]
   IF LOAN:DUEDATE+GRACEDAYS<SYSTEMDATE THEN
    LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODEPASTDUE)=TRUE
[ Skips]
   SKIPCOUNT=0
   FOR EACH LOAN TRACKING WITH (LOAN TRACKING:TYPE=LOANTRACKINGTYPE AND
                                LOAN TRACKING:USERDATE1>=
                                DATEOFFSET(SYSTEMDATE,-12,0))
    DO
     SKIPCOUNT=SKIPCOUNT+1
    END 
   UNTIL SKIPCOUNT=MAXSKIPS
[ Too many skips in last year]
   IF SKIPCOUNT>=MAXSKIPS THEN
    LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODEMAXSKIPS)=TRUE

   SKIPCOUNT=0
   FOR EACH LOAN TRACKING WITH (
                     LOAN TRACKING:TYPE=LOANTRACKINGTYPE AND
                     LOAN TRACKING:USERDATE2>=
                     DATEOFFSET(LOAN:DUEDATE,-MINMONTHSINCE,0))
    DO
     SKIPCOUNT=SKIPCOUNT+1
    END 
   UNTIL SKIPCOUNT=1
[ Too soon since last skip]
   IF SKIPCOUNT>0 THEN
    LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODETIMESKIP)=TRUE

[ If any codes are set, loan is ineligible]
   FOR I=1 TO INELIGIBLEREASONSMAX
    DO
     IF LOANINELIGIBLECODE(TOTALLOANS,I)=TRUE THEN
      LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODESET)=TRUE
    END

[ Increment eligible loans]
   IF LOANINELIGIBLECODE(TOTALLOANS,INELIGIBLECODESET)=FALSE THEN
    ELIGIBLELOANS=ELIGIBLELOANS+1
  END 
 UNTIL TOTALLOANS=LOANSMAX  [FOR EACH LOAN]
END

PROCEDURE GETSKIPCRITERIA

 LDUEDATE=DATENULL
 LNEWDUEDATE=DATENULL
 LPAYMENT=$0.00
 LMATURITYDATE=DATENULL
 LNEWMATURITYDATE=DATENULL
 LDESCRIPTION=""

 FOR EACH LOAN WITH LOAN:ID=LID
  DO
   LDUEDATE=LOAN:DUEDATE
   LPAYMENT=LOAN:PAYMENT
   LMATURITYDATE=LOAN:MATURITYDATE
   LDESCRIPTION=LOAN:DESCRIPTION
   IF (LOAN:DUEDAY2<>0 AND
       DAY(LOAN:DUEDATE)>LOAN:DUEDAY1) THEN
    DO
     LNEWDUEDATE=DATEOFFSET(LOAN:DUEDATE,1,LOAN:DUEDAY2)
     LNEWMATURITYDATE=DATEOFFSET(LOAN:MATURITYDATE,1,LOAN:DUEDAY2)
    END
   ELSE
    DO
     LNEWDUEDATE=DATEOFFSET(LOAN:DUEDATE,1,LOAN:DUEDAY1)
     LNEWMATURITYDATE=DATEOFFSET(LOAN:MATURITYDATE,1,LOAN:DUEDAY1)
    END
  END
END

[ 
  This procedure extracts the next LID from the LIDLIST. The 
  LIDLIST will be modified not to include the loan ID.

  PASS:   LIDLIST

  RETURN: LIDLIST
          LID
]
PROCEDURE GETNEXTLID
 
 COMMAPOS=CHARACTERSEARCH(LIDLIST,",")
 IF COMMAPOS>0 THEN
  DO
   LID=SEGMENT(LIDLIST,1,COMMAPOS-1)
   LIDLIST=SEGMENT(LIDLIST,COMMAPOS+1,LENGTH(LIDLIST))
  END
 ELSE
  DO
   LID=LIDLIST
   LIDLIST=""
  END
 
 TEXT1=LID
 CALL TEXTNLS
 LID=TEXT1
END

[
 Remove leading spaces from a text string.

 PASS:   TEXT1     The string to trim
 RETURN: TEXT1     The trimmed string
]
PROCEDURE TEXTNLS

 TT=1
 TEXTFOUND=FALSE
 WHILE (TT<=LENGTH(TEXT1) AND TEXTFOUND=FALSE)
  DO
   IF SEGMENT(TEXT1,TT,TT)<>" " THEN
    TEXTFOUND=TRUE
   ELSE
    TT=TT+1
  END
 IF TT>1 THEN
  TEXT1=SEGMENT(TEXT1,TT,LENGTH(TEXT1))
END

[
 Remove trailing spaces from a text string.

 PASS:   TEXT1     The string to trim
 RETURN: TEXT1     The trimmed string
]
PROCEDURE TEXTNTS

 TT=LENGTH(TEXT1)
 TEXTFOUND=FALSE
 WHILE (TT>0 AND TEXTFOUND=FALSE)
  DO
   IF SEGMENT(TEXT1,TT,TT)<>" " THEN
    TEXTFOUND=TRUE
   ELSE
    TT=TT-1
  END
 TEXT1=SEGMENT(TEXT1,1,TT)
END

[
 Remove leading and trailing spaces from a text string.

 PASS:   TEXT1     The string to trim
 RETURN: TEXT1     The trimmed string
]
PROCEDURE TEXTNLTS
 CALL TEXTNLS
 CALL TEXTNTS
END

#INCLUDE "RB.LISTEXPAND"
